!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2"),require("query-string")):"function"==typeof define&&define.amd?define("notabug-peer",["ramda","gun-scope","object-hash","gun-suppressor-sear","route-parser","uri-js","gun-suppressor","argon2","query-string"],t):"object"==typeof exports?exports["notabug-peer"]=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2"),require("query-string")):e["notabug-peer"]=t(e.ramda,e["gun-scope"],e["object-hash"],e["gun-suppressor-sear"],e["route-parser"],e["uri-js"],e["gun-suppressor"],e.argon2,e["query-string"])}("undefined"!=typeof self?self:this,function(e,t,r,n,o,i,s,a,u){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=29)}([function(t,r){t.exports=e},function(e,r){e.exports=t},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(3),s=r(8),a=r(4),u=r(6),c=r(9);const p=(0,o.resolve)(null),d=n.reduce(n.union,[]),l=e=>{const{topics:t=["all"]}=e||{},r=n.propOr(365,"days",e)||365,o=[],i=(new Date).getTime()-864e5*parseInt(r,10);for(let e=0;e<=r+1;e++)o.push(u.ThingSet.dayStr(i+864e5*e));return Object.keys(t.reduce((e,t)=>o.reduce((e,r)=>(e[`${s.Constants.PREFIX}/topics/${t}/days/${r}`]=!0,e),e),{}))},g=(0,o.query)((e,t)=>{const r=l({...t,topics:[t.topic]});let n=[],i=s.Constants.LISTING_SIZE;"new"===t.sort?i=s.Constants.LISTING_SIZE:("top"===t.sort&&(i*=3),"all"===t.topic&&(i*=3));const a=()=>{const t=r.pop();return n.length>i||!t?(0,o.resolve)(n):e.get(t).souls().then(e=>(n=[...n,...e],a()))};return a()}),h=(0,o.query)((e,{domain:t})=>e.get(a.Schema.Domain.route.reverse({domainName:t})).souls()),m=(0,o.query)((e,t)=>(0,o.all)([t.type&&"submitted"!==t.type&&"overview"!==t.type?(0,o.resolve)([]):e.get(`~${t.authorId}`).get("submissions").souls(),t.type&&"comments"!==t.type&&"overview"!==t.type&&"commands"!==t.type?(0,o.resolve)([]):e.get(`~${t.authorId}`).get("comments").souls()]).then(([e,t])=>d([e,t]))),f=(0,o.query)((e,t)=>e.get(t).then(c.ListingNode.sortedIds),"listingIds"),y=(0,o.query)((e,{listing:t,sort:r,indexer:o})=>f(e,`${s.Constants.PREFIX}${t}/${r}@~${o}.`).then(n.compose(n.map(e=>a.Schema.Thing.route.reverse({thingId:e})),n.filter(n.identity)))),b=(0,o.query)((e,{repliesToAuthorId:t,type:r="overview",...n})=>y(e,{listing:`/user/${t}/${r}`,sort:"new",...n}).then(t=>(0,o.all)(t.map(t=>e.get(`${t}/comments`).souls())).then(d))),O=(0,o.query)((e,t)=>e.get(a.Schema.ThingAllComments.route.reverse({thingId:t.submissionId})).souls(n.prepend(a.Schema.Thing.route.reverse({thingId:t.submissionId})))),P=(0,o.query)((e,t)=>e.get(t).then(e=>{if(!e||!e.id)return null;const t={id:e.id,timestamp:parseFloat(e.timestamp,10)},r=n.path(["replyTo","#"],e),o=n.path(["op","#"],e),i=o?a.Schema.Thing.route.match(o).thingid:null,s=r?a.Schema.Thing.route.match(r).thingid:null;return i&&(t.opId=i),s&&(t.replyToId=s),t})),I=(e,t,r,i=d)=>(0,o.query)((s,a)=>{const u=n.prop(t,a);return n.isNil(u)?p:(0,o.all)(n.map(t=>e(s,{...a,[r]:t}),n.propOr([],t,a))).then(i)}),S=I(g,"topics","topic"),v=I(h,"domains","domain"),T=I(m,"authorIds","authorId"),j=I(O,"submissionIds","submissionId"),w=e=>t=>(0,o.all)(t.filter(e=>!!e).map(t=>e.get(t).get("data").then(e=>e))),_=(0,o.query)((e,t,r=!1)=>(0,o.all)([T(e,{type:"comments",authorIds:t}).then(w(e)).then(n.compose(n.map(r?n.prop("opId"):n.prop("replyToId")),n.filter(n.prop("replyToId")))),T(e,{type:"submitted",authorIds:t}).then(n.map(e=>a.Schema.Thing.route.match(e).thingId))]).then(([e,t])=>n.uniq([...e,...t]))),L=(0,o.query)((e,t,r)=>t&&r?e.get(a.Schema.ThingVoteCounts.route.reverse({thingId:r,tabulator:t})).then():(0,o.resolve)(),"thingScores"),$=(0,o.query)((e,t)=>t?e.get(a.Schema.Thing.route.reverse({thingId:t})).get("data"):(0,o.resolve)(null),"thingData"),M=(0,o.query)((e,{thingSoul:t,tabulator:r,data:n=!1,scores:s=!1})=>{if(!t)return(0,o.resolve)(null);const a=c.ListingNode.soulToId(t);return(0,o.all)([P(e,t),s?L(e,r||i.Config.tabulator,a):(0,o.resolve)(),n?$(e,a):(0,o.resolve)()]).then(([e,t,r])=>e&&e.id?{...e,votes:t,data:r}:null)}),D=(0,o.query)((e,t)=>(0,o.all)(n.reduce((r,n)=>n?(r.push(M(e,{...t,thingSoul:n})),r):r,[],n.propOr([],"thingSouls",t)))),C=(0,o.query)((e,t)=>e.get(a.Schema.AuthorPages.route.reverse({authorId:t})),"userPages"),A=(0,o.query)((e,t,r)=>t&&r?e.get(a.Schema.AuthorPages.route.reverse({authorId:t})).get(r).get("id"):(0,o.resolve)(null),"wikiPageId"),E=(0,o.query)((e,t,r)=>A(e,t,r).then(t=>t&&$(e,t))),q=(0,o.query)((e,t)=>t?e.get(`~${t}`).then(e=>({alias:n.prop("alias",e),createdAt:n.path(["_",">","pub"],e)})):(0,o.resolve)(null),"userMeta"),N=n.curry((e,t)=>(0,o.scope)(n.assoc("gun",e.gun,t||{}))),x={singleTopic:g,singleDomain:h,singleAuthor:m,singleListing:y,repliesToAuthor:b,singleSubmission:O,thingMeta:M,multiThingMeta:D,multiTopic:S,multiDomain:v,multiAuthor:T,multiSubmission:j,thingScores:L,thingData:$,thingDataFromSouls:w,topicSouls:l,userPages:C,wikiPageId:A,wikiPage:E,userMeta:q,createScope:N,curated:_};t.Query=x},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Config=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(8);const i={tabulator:o.Constants.INDEXER,indexer:o.Constants.INDEXER,owner:o.Constants.INDEXER,update:n.compose(n.map(([e,t])=>i[e]=t),n.toPairs)};t.Config=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Schema=void 0;var n,o=u(r(0)),i=(n=r(20))&&n.__esModule?n:{default:n},s=u(r(19)),a=r(8);function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}const c={...s.AUTH_SCHEMA,topicName:{type:"string",minLength:1,maxLength:a.Constants.MAX_TOPIC_SIZE},TopicDay:{title:"Topic Day",description:"A single day of things in a topic",soul:{pattern:`${a.Constants.PREFIX}/topics/:topicName/days/:year/:month/:day`,properties:{topicName:{$ref:"schema.json#/definitions/topicName"},year:{type:"number",minimum:2018,maximum:2100},month:{type:"number",minimum:1,maximum:12},day:{type:"number",minimum:1,maximum:31}},required:["topicName","year","month","day"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},Topic:{title:"Topic",description:"All things in a topic",soul:{pattern:`${a.Constants.PREFIX}/topics/:topicName`,properties:{topicName:{$ref:"schema.json#/definitions/topicName"}},required:["topicName"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},domainName:{type:"string",minLength:1,maxLength:a.Constants.MAX_DOMAIN_SIZE},Domain:{title:"Domain",description:"All things in a domain",soul:{pattern:`${a.Constants.PREFIX}/domains/:domainName`,properties:{domainName:{$ref:"schema.json#/definitions/domainName"}},required:["domainName"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},url:{type:["null","string"],maxLength:a.Constants.MAX_URL_SIZE},URL:{title:"URL",description:"All things for a given URL",soul:{pattern:`${a.Constants.PREFIX}/urls/*url`,properties:{url:{$ref:"schema.json#/definitions/url"}},required:["url"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},thingId:{type:"string",maxLength:a.Constants.MAX_HASH_SIZE},thingSoul:{properties:{thingId:{"#ref":"#definitions/thingId"}}},ThingAllComments:{title:"Thing All Comments",description:"All comments for a given submission",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/allcomments`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},ThingComments:{title:"Thing Comments",description:"Direct replies to a thing",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/comments`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},timestamp:{type:["number","string"]},thingKind:{type:"string",maxLength:a.Constants.MAX_THING_KIND_SIZE},Thing:{title:"Thing Reference",description:"These are submissions, comments, chat messages and wiki pages",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},propsFromSoul:{id:"thingId"},properties:{id:{$ref:"#/definitions/thingId"},kind:{"#ref":"#/definitions/thingKind"},timestamp:{$ref:"#/definitions/timestamp"},originalHash:{$ref:"#/definitions/thingId"},data:{oneOf:[{$ref:"#/definitions/ThingDataEdge"},{$ref:"#/definitions/ThingDataSignedEdge"}]},topic:{anyOf:[{$ref:"#/definitions/TopicEdge"},{description:"Some old things had generic topic souls",type:"object",additionalProperties:!1,properties:{"#":{type:"string",maxLength:42}},required:["#"]}]},domain:{$ref:"#/definitions/DomainEdge"},url:{$ref:"#/definitions/URLEdge"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"},op:{$ref:"#/definitions/ThingEdge"},replyTo:{$ref:"#/definitions/ThingEdge"},author:{$ref:"#/definitions/SEAAuthorEdge"}},anyOf:[{allOf:[{thingHashMatchesSoul:!0},{anyOf:[{signedThingDataMatchesThing:!0},{thingDataMatchesOriginalHash:!0}]}]},{isLegacyThing:!0},{additionalProperties:!1,description:"Self verifying can be updated in isolation",properties:{id:{$ref:"#/definitions/thingId"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"}}}]},ProofOfWorkVotes:{$async:!0,keysAreProofsOfWork:{algorithm:"argon2d",config:{complexity:6,hashLength:32,timeCost:1,memoryCost:10240,parallelism:1}}},ThingVotesUp:{soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/votesup`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingVotesDown:{soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/votesdown`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingData:{title:"Unsigned Thing Data",description:"This is the actual content of a thing",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/data`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}],required:["thingId"]},properties:{kind:{$ref:"#/definitions/thingKind"},title:{type:"string",minLength:1,maxLength:a.Constants.MAX_THING_TITLE_SIZE},topic:{$ref:"#/definitions/topicName"},body:{type:["null","string"],maxLength:a.Constants.MAX_THING_BODY_SIZE},author:{$ref:"#/definitions/seaAlias"},authorId:{$ref:"#/definitions/seaAuthorId"},opId:{$ref:"#/definitions/thingId"},replyToId:{$ref:"#/definitions/thingId"},domain:{$ref:"#/definitions/domainName"},url:{$ref:"#/definitions/url"},timestamp:{$ref:"#/definitions/timestamp"}},thingDataHashMatchesSoul:!0},ThingDataSigned:{title:"Signed Thing Data",description:"This is the actual content of a thing, cryptographically signed",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/data~:authorId.`,properties:{thingId:{$ref:"schema.json#/definitions/thingId"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["thingId","authorId"]},properties:{kind:{sea:{$ref:"schema.json#/definitions/thingKind"}},title:{sea:{type:"string",minLength:1,maxLength:a.Constants.MAX_THING_TITLE_SIZE}},topic:{sea:{$ref:"schema.json#/definitions/topicName"}},body:{sea:{type:["null","string"],maxLength:a.Constants.MAX_THING_BODY_SIZE}},author:{sea:{$ref:"schema.json#/definitions/seaAlias"}},authorId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},replyToId:{sea:{$ref:"schema.json#/definitions/thingId"}},domain:{sea:{$ref:"schema.json#/definitions/domainName"}},url:{sea:{$ref:"schema.json#/definitions/url"}},timestamp:{sea:{$ref:"schema.json#/definitions/timestamp"}}}},ThingVoteCounts:{title:"Thing Vote Counts",description:"Aggregated counts from a tabulator",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/votecounts@~:tabulator.`,properties:{thingId:{$ref:"schema.json#/definitions/thingId"},tabulator:{$ref:"schema.json#/definitions/seaAuthorId"}}},properties:{up:{sea:{type:["number","string"]}},down:{sea:{type:["number","string"]}},comment:{sea:{type:["number","string"]}},score:{sea:{type:["number","string"]}},commands:{sea:{type:["object","string"]}}}},ListingData:{$async:!0,title:"Listing Node Data",description:"Shared description of listing properties",type:"object",properties:{ids:{sea:{maxLength:a.Constants.MAX_LISTING_IDS_SIZE}},source:{sea:{maxLength:a.Constants.MAX_LISTING_SOURCE_SIZE}},name:{sea:{maxLength:a.Constants.MAX_TOPIC_SIZE}},submitTopic:{sea:{maxLength:a.Constants.MAX_TOPIC_SIZE}},tabs:{sea:{maxLength:a.Constants.MAX_LISTING_TABS_SIZE}},curators:{sea:{maxLength:a.Constants.MAX_LISTING_SOURCE_SIZE}},censors:{sea:{maxLength:a.Constants.MAX_LISTING_SOURCE_SIZE}},userId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},isChat:{sea:{type:["boolean","string"]}}},patternProperties:{"^d+$":{sea:{type:["string","null","undefined"]}}}},sortName:{type:"string",enum:["new","old","active","top","comments","discussed","hot","best","controversial","random","firehose","chat"]},TopicListing:{soul:{pattern:`${a.Constants.PREFIX}/t/:topic/:sort@~:indexer.`,required:["topic","sort","indexer"],properties:{topic:{type:"string"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},DomainListing:{soul:{pattern:`${a.Constants.PREFIX}/domain/:domain/:sort@~:indexer.`,required:["domain","sort","indexer"],properties:{domain:{type:"string"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},ThingCommentsListing:{soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/comments/:sort@~:indexer.`,properties:{thingId:{$ref:"schema.json#/definitions/thingId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},userListingType:{type:"string",enum:["overview","submitted","comments","commands","commented"]},AuthorRepliesListing:{soul:{pattern:`${a.Constants.PREFIX}/user/:authorId/replies/:type/:sort@~:indexer.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorProfileListing:{soul:{pattern:`${a.Constants.PREFIX}/user/:authorId/:type/:sort@~:indexer.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},SpaceListing:{soul:{pattern:`${a.Constants.PREFIX}/user/:authorId/spaces/:name/:sort@~:indexer.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},name:{$ref:"schema.json#/definitions/topicName"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorComments:{title:"Author's Comments",description:"All of an authors comments should be linked here",soul:{pattern:`${a.Constants.PREFIX}/comments~:authorId.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorSubmissions:{title:"Author's Submissions",description:"All of an author's submissions should be linked here",soul:{pattern:`${a.Constants.PREFIX}/submissions~:authorId.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}},AuthorThings:{title:"Author's Things",description:"All of an author's things should be linked here",soul:{pattern:`${a.Constants.PREFIX}/things~:authorId.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorPages:{title:"Author Page Map",description:"Mapping of page names to things",soul:{pattern:`${a.Constants.PREFIX}/pages~:authorId.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}}},p=o.keys(c).reduce((e,t)=>{const r=o.path([t,"soul","pattern"],c);return r?o.assoc(t,new i.default(r),e):e}),d={...o.compose(o.reduce((e,[t,r])=>o.assoc(t,o.assoc("route",r,o.prop(t,c)),e),{}),o.toPairs)(p),definitions:c,routes:p};t.Schema=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSpec=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(2),s=r(6),a=r(26),u=r(12),c=r(11);const p={fromSource:n.compose(n.apply(n.mergeLeft),n.ap([c.ListingFilter.fromDefinition,n.identity]),n.of,n.apply(n.assoc("dataSource")),n.ap([u.ListingDataSource.fromDefinition,n.identity]),n.of,a.ListingDefinition.fromSource),getSource:(0,o.query)((e,t,r,o="")=>i.Query.wikiPage(e,t,r).then(n.compose(e=>`${e}\n# added by indexer\n${o||""}\nsourced from page ${t} ${r}\n`,s.ThingDataNode.body)))};t.ListingSpec=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return n.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return o.ThingDataNode}}),Object.defineProperty(t,"Thing",{enumerable:!0,get:function(){return i.Thing}});var n=r(21),o=r(22),i=r(33)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),i=(n=r(20))&&n.__esModule?n:{default:n};const s=o.compose(o.sortBy(o.identity),o.filter(o.identity),o.map(o.trim),o.split("+"),o.toLower,o.trim,o.defaultTo("")),a={splitDomains:s,splitTopics:o.compose(o.ifElse(o.prop("length"),o.identity,o.always(["all"])),s),withRoute:e=>o.assoc("route",new i.default(e.path),e)};t.Path=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Constants=void 0;const n={COMMAND_RE:/^ {4}~/,PREFIX:"nab",SOUL_DELIMETER:"|~~|",LISTING_SIZE:1e3,MAX_HASH_SIZE:64,MAX_POW_NONCE_SIZE:64,MAX_TOPIC_SIZE:42,MAX_AUTHOR_ALIAS_SIZE:256,MAX_AUTHOR_ID_SIZE:128,MAX_URL_SIZE:2048,MAX_DOMAIN_SIZE:256,MAX_THING_KIND_SIZE:16,MAX_THING_TITLE_SIZE:300,MAX_THING_BODY_SIZE:5e4,MAX_LISTING_IDS_SIZE:5e4,MAX_LISTING_SOURCE_SIZE:5e4,MAX_LISTING_TABS_SIZE:5e3,MAX_LISTING_SOUL_PREFIX_SIZE:42,MAX_LISTING_SOUL_IDENTIFIER_SIZE:128,MAX_LISTING_SOUL_SORT_SIZE:16,MAX_LISTING_SOUL_TYPE_SIZE:42,MAX_LISTING_SOUL_KIND_SIZE:16,CHAT_PRELOAD_ITEMS:10,INDEXER:"CEyKrDd1xyPXpWSV00MgvnZY2VJLHXgzCvhMeDwKTYA.yjSq0DyXzzhB_ZXr_DzfJgij3tXU0-3t0Q5bJAtZpj8"};t.Constants=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingNode=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(8),s=r(3),a=r(4);const[u,c,p]=[0,1,2,3],d=n.map(n.prop(c)),l=n.map(n.slice(1,3)),g=n.propOr("","source"),h=n.curry((e,t)=>`${i.Constants.PREFIX}${t}@~${e}.`),m=n.compose(n.replace(new RegExp(`^${i.Constants.PREFIX}`),""),n.replace(/@~.*\./,"")),f=e=>a.Schema.Thing.route.reverse({thingId:e}),y=n.map(f),b=e=>n.prop("thingId",a.Schema.Thing.route.match(e)),O=n.map(b),P=n.curry((e,t)=>n.compose(n.ifElse(n.prop("length"),n.insert(0,parseInt(t,10)),n.always(null)),e=>(e[1]=parseFloat(e[1]),e),n.map(n.trim),n.split(","),n.propOr("",`${t}`))(e)),I=n.compose(n.filter(n.compose(e=>!(0!==e&&!e),parseInt)),n.keys),S=n.curry((e,t)=>n.compose(n.addIndex(n.reduce)((e,t,r)=>n.assoc(`${r}`,t.join(","),e),{}),n.defaultTo([]))(t)),v=e=>n.compose(n.map(P(e)),I)(e),T=n.compose(d,v),j=n.sortWith([n.ascend(n.compose(n.cond([[n.isNil,n.always(1/0)],[n.T,parseFloat]]),n.prop(p)))]),w=n.compose(n.map(n.prop(c)),j,n.filter(n.identity),v),_=n.addIndex(n.map)((e,t)=>[t,...e]),L=n.compose(n.uniqBy(n.prop(c)),j,n.reduce(n.concat,[]),n.map(v)),$=(0,o.query)((e,t)=>Promise.all(n.map(e.get,t)).then(L)),M=(0,o.query)((e,t,r)=>{const{indexer:n=s.Config.indexer}=r||{};return $(e,[h(n,t)]).then(d)},"listingRows"),D=(0,o.query)((e,t)=>t?e.get(t):(0,o.resolve)(null),"listing"),C={POS_IDX:u,POS_ID:c,POS_VAL:p,source:g,get:D,getRow:P,itemKeys:I,serialize:S,rows:v,ids:T,idToSoul:f,idsToSouls:y,soulToId:b,soulsToIds:O,rowsToIds:d,rowsToItems:l,itemsToRows:_,sortRows:j,sortedIds:w,soulFromPath:h,pathFromSoul:m,rowsFromSouls:$,read:M,diff:async(e,t=[],r=[],{maxSize:o=1e3}={})=>{const i=n.indexBy(n.identity,r),s={},a={},d=[],l={};let g,h=[],m=0;for(g in e||{}){const t=parseInt(g,10);if(!t&&0!==t)continue;const r=P(e,g)||[t,null,null],[n,o=null,a=null]=r;r[p]=null===a?null:parseFloat(a),o&&i[o]&&(r[c]=r[p]=null),o&&(s[o]=r),r[c]?d.push(r):h.push(r),n>m&&(m=n)}for(let e=0;e<t.length;e++){const[r,n]=t[e]||[null,null];if(!r)continue;const o=s[r];if(o)o[p]!==n&&(o[p]=n,l[r]=!0);else{const e=[null,r,n];d.push(e)}}const f=j(d),y=o?f.slice(0,o):f,b=o?f.slice(o,f.length):[],O=n.filter(e=>null===e[u],y);h=h.concat(n.filter(e=>null!==e[u],b)).reverse();for(let e=0;e<y.length;e++){const t=y[e][c],r=y[e][u],n=y[e][p];null!==r&&l[t]&&(a[`${r}`]=[t,n].join(","))}const I=[];for(;O.length;){const e=O.pop(),t=h.pop();let[r]=t||[null];null===r&&(r=parseInt(m,10)+I.length+1,I.push(r)),a[`${r}`]=[e[c],e[p]].join(",")}for(;h.length;){const t=h.pop();if(t&&!t[c]){const r=`${t[u]}`;null!==e[r]&&(a[r]=null,console.log("nulling",r,e[r]))}}return n.keys(a).length?a:null},categorizeDiff:(e,t)=>{const r=I(n.mergeLeft(e,t)),o=[],i=[];for(let n=0;n<r.length;n++){const s=r[n],[a,u]=P(e,s)||[],[c,p]=P(t,s);u!==p&&(u&&o.push(u),p&&i.push(p))}return[o,i]},unionRows:L};t.ListingNode=C},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GunNode=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0));const o=n.pathOr("",["_","#"]),i=n.pathOr({},["_",">"]);const s={soul:o,state:i,latest:n.compose(n.last,n.sortBy(n.identity),n.values,i),edges:n.compose(n.map(n.prop("#")),n.values),decodeSEA:function(e){const t=e?{...e}:e,r=n.path(["_","#"],t);return r&&Gun.SEA&&-1!==r.indexOf("~")?(n.without(["_"],n.keys(t)).forEach(n=>{Gun.SEA.verify(Gun.SEA.opt.pack(e[n],n,e,r),!1,r=>t[n]=Gun.SEA.opt.unpack(r,n,e))}),t):e}};t.GunNode=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingFilter=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(8),i=r(4),s=r(2),a=r(6),u=r(9),c=r(12);const p=e=>n.compose(parseInt,n.path(e)),d=async(e,t,r,{limit:o=25,count:i=0,after:s=null,filterFn:a}={})=>{const c=parseInt(o,10),p=parseInt(i,10)||0,d=r.slice(),l=[],g=(e=30)=>Promise.all(n.map(async e=>{let t=!0;e[u.ListingNode.POS_ID]?(a&&(t=await a(e[u.ListingNode.POS_ID])),t&&l.push(e)):console.log("blankRow",e)},d.splice(p,e)));for(;d.length>p&&(await g(),!(c&&l.length>=c)););return n.compose(c?n.slice(0,c):n.identity,n.sortBy(n.prop(u.ListingNode.POS_VAL)))(l)},l={fromDefinition:e=>{const{filters:t,voteFilters:r,isPresent:i}=e,s=[],u=[],c=(...e)=>s.push(n.compose(...e)),d=(...e)=>u.push(n.compose(...e));t.allow.aliases.length&&c(e=>!!i(["alias",e]),n.path(["data","author"])),t.allow.authors.length&&c(e=>!!i(["author",e]),n.path(["data","authorId"])),t.allow.domains.length&&c(e=>!!i(["domain",e]),a.ThingDataNode.domain,n.prop("data")),t.allow.topics.length&&!n.find(n.compose(n.identical("all"),n.last,n.split(":")),t.allow.topics)&&c(e=>{let t=n.path(["data","topic"],e);const r=n.path(["data","kind"],e);return"chatmsg"===r&&(t=`chat:${t}`),"comment"===r&&(t=`comments:${t}`),!!i(["topic",t])}),t.allow.kinds.length&&c(e=>!!i(["kind",e]),n.path(["data","kind"])),"commands"===t.allow.type&&c(n.compose(n.test(o.Constants.COMMAND_RE),n.path(["data","body"]))),t.deny.aliases.length&&c(e=>!i(["ban","alias",e]),n.path(["data","author"])),t.deny.authors.length&&c(e=>!i(["ban","author",e]),n.path(["data","authorId"])),t.deny.domains.length&&c(e=>!e||!i(["ban","domain",e]),a.ThingDataNode.domain),t.deny.topics.length&&c(e=>!i(["ban","topic",e]),n.path(["data","topic"])),t.deny.anon&&c(n.path(["data","authorId"])),t.deny.signed&&c(n.compose(e=>!e,n.path(["data","authorId"]))),null!==r.upsMin&&d(n.lte(r.upsMin),p(["votes","up"])),null!==r.upsMax&&d(n.gte(r.upsMax),p(["votes","up"])),null!==r.downsMin&&d(n.lte(r.downsMin),p(["votes","down"])),null!==r.downsMax&&d(n.gte(r.downsMax),p(["votes","down"])),null!==r.scoreMin&&d(n.lte(r.scoreMin),p(["votes","score"])),null!==r.scoreMax&&d(n.gte(r.scoreMax),p(["votes","score"])),t.deny.tags.length&&d(e=>{const r=n.path(["votes","commands"],e)||{};return!t.deny.tags.find(([e,t])=>!!n.path([t,"tag",e],r))});const l=e=>!s.find(t=>!t(e)),g=e=>!u.find(t=>!t(e));return{thingFilter:t=>e.isIdSticky(n.prop("id",t))||l(t)&&g(t),contentFilter:l,voteFilter:g}},getFilteredRows:d,getFilteredIds:n.compose(e=>e.then(n.map(n.prop(u.ListingNode.POS_ID))),d),thingFilter:n.curry((e,t,r)=>s.Query.thingMeta(e,{tabulator:t.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:r}),scores:c.ListingDataSource.needsScores(t),data:c.ListingDataSource.needsData(t)}).then(t.thingFilter))};t.ListingFilter=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDataSource=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(6),s=r(4),a=r(2),u=r(13);const c=(0,o.query)((e,t,r)=>o.Promise.all(n.map(t=>u.ListingSort.itemFromSoul(e,t,r),t)).then(u.ListingSort.sortItems)),p=(0,o.query)((e,t,r)=>o.Promise.all(n.map(e.get,t)).then(n.reduce(n.mergeRight,{})).then(i.ThingSet.souls).then(t=>c(e,t,r))),d=e=>{const{sort:t}=e,r=n.path(["filters","allow","topics"],e)||[];r.length||r.push("all");return{listingPaths:[`/t/${r.sort().join("+")}/${t}`],query:n=>a.Query.multiTopic(n,{topics:r,sort:t}).then(t=>c(n,t,e))}},l={listing:e=>{const t=n.pathOr([],["filters","allow","listings"],e),{sort:r}=e;return{listingPaths:n.map(e=>`${e}/${r}`,t)}},replies:e=>{const{sort:t}=e,r=n.path(["filters","allow","repliesTo"],e),o=n.path(["filters","allow","type"],e);return{listingPaths:[`/user/${r}/replies/${o}/${t}`],query:t=>a.Query.repliesToAuthor(t,{type:o,repliesToAuthorId:r,indexer:e.indexer}).then(r=>c(t,r,e))}},op:e=>{const{sort:t}=e,r=n.path(["filters","allow","ops"],e);r.length||d(e);return{listingPaths:n.map(e=>`/things/${e}/comments/${t}`,r),query:t=>a.Query.multiSubmission(t,{submissionIds:r}).then(r=>c(t,r,e))}},curator:e=>{const{sort:t}=e,r=n.prop("curators",e)||[];if(!r.length)return d(e);return{listingPaths:n.map(e=>`/user/${e}/commented/${t}`,r),query:t=>a.Query.curate(t,r,!0).then(e=>e.map(e=>s.Schema.Thing.route.reverse({thingId:e}))).then(r=>c(t,r,e))}},author:e=>{const{sort:t}=e,r=n.path(["filters","allow","authors"],e),o=n.path(["filters","allow","type"],e);if(!r.length)return d(e);return{listingPaths:n.map(e=>`/user/${e}/${o}/${t}`,r),query:t=>a.Query.multiAuthor(t,{type:o,authorIds:r}).then(r=>c(t,r,e))}},domain:e=>{const{sort:t}=e,r=n.path(["filters","allow","domains"],e)||[];if(!r.length)return d(e);return{listingPaths:[`/domain/${r.sort().join("+")}/${t}`],query:n=>a.Query.multiDomain(n,{domains:r,sort:t}).then(t=>c(n,t,e))}},topic:d},g=n.keys(l),h={fromDefinition:e=>{const t=(e=>n.find(e.isPresent,g)||"topic")(e);return n.mergeLeft({name:t},l[t](e))},sources:l,needsScores:e=>!!n.find(e.isPresent,["sort hot","sort top","sort best","sort controversial","ups","downs","score","can remove"]),needsData:e=>!!n.find(e.isPresent,["topic","domain","author","unique by content","kind","type","require signed","require anon","alias","ban domain","ban topic","ban author","ban alias"]),itemsFromThingSets:p,itemsFromThingSouls:c};t.ListingDataSource=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSort=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(4),s=r(6),a=r(2),u=r(9);const[c,p]=[0,1],d=n.map(n.prop(c)),l=n.sortBy(n.prop(p)),g=e=>(0,o.query)((t,r,s)=>s.isIdSticky(r)?(0,o.resolve)(-1/0):n.contains(r,s.filters.allow.ops)?(0,o.resolve)(-1/0):a.Query.thingMeta(t,{tabulator:s.tabulator,scores:!0,thingSoul:i.Schema.Thing.route.reverse({thingId:r})}).then(t=>e(t,s))),h=e=>(0,o.query)((t,r,n)=>a.Query.thingMeta(t,{tabulator:n.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:r})}).then(e)),m={new:h(n.compose(n.multiply(-1),n.defaultTo(0),n.prop("timestamp"))),old:h(n.prop("timestamp")),active:g(({timestamp:e,lastActive:t})=>-1*(t||e)),top:g(n.compose(e=>-1*parseInt(e,10),n.pathOr(0,["votes","score"]))),comments:g(n.compose(e=>-1*parseFloat(e,10),n.pathOr(0,["votes","comment"]))),discussed:g(e=>{const t=n.prop("timestamp",e),r=parseInt(n.pathOr(0,["votes","comment"],e),10),o=t/1e3-1134028003,i=Math.log10(Math.max(Math.abs(r),1));return r?-1*(i+o/45e3):1e9-o}),hot:g(e=>{const t=n.prop("timestamp",e),r=parseInt(n.pathOr(0,["votes","score"],e),10),o=t/1e3-1134028003;let i=0;return r>0?i=1:r<0&&(i=-1),-1*(i*Math.log10(Math.max(Math.abs(r),1))+o/45e3)}),best:g(e=>{const t=parseInt(n.pathOr(0,["votes","up"],e),10),r=t+parseInt(n.pathOr(0,["votes","down"],e),10);if(0===r)return 0;const o=1.281551565545,i=t/r;return(i+1/(2*r)*o*o-o*Math.sqrt(i*(1-i)/r+o*o/(4*r*r)))/(1+1/r*o*o)*-1}),controversial:g(e=>{const t=parseInt(n.pathOr(0,["votes","up"],e),10),r=parseInt(n.pathOr(0,["votes","down"],e),10);return t<=0||r<=0?0:-1*(t+r)**(t>r?r/t:t/r)})},f=(0,o.query)((e,t,r)=>(m[r.sort]||m.new)(e,t,r).then(e=>[t,e])),y=(0,o.query)((e,t,r)=>(0,o.all)(n.map(t=>f(e,t,r),t))),b=(0,o.query)((e,t,r)=>(0,o.all)(n.map(e.get,t)).then(n.pipe(s.ThingSet.union,s.ThingSet.ids,t=>y(e,t,r))).then(l)),O={POS_ID:c,POS_VAL:p,sorts:m,isValidSort:e=>!!m[e],toItem:f,toItems:y,toIds:d,itemFromSoul:(e,t,r)=>f(e,u.ListingNode.soulToId(t),r),sortItems:l,fromThingSets:b};t.ListingSort=O},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingType=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(36),s=r(37),a=r(38),u=r(15),c=r(39),p=r(40),d=r(41),l=r(42),g=r(43);const h={ChatListing:i.ChatListing,FirehoseListing:s.FirehoseListing,TopicListing:u.TopicListing,DomainListing:c.DomainListing,CommentListing:p.CommentListing,SpaceListing:d.SpaceListing,InboxListing:l.InboxListing,CommentedListing:a.CommentedListing,ProfileListing:g.ProfileListing},m=n.values(h),f=e=>{let t;for(let r=0;r<m.length;r++)if(t=m[r].route.match(e))return n.assoc("match",t,m[r]);return null},y=(0,o.query)((e,t)=>{const r=f(t);return r&&r.getSidebar?r.getSidebar(e,r.match):(0,o.resolve)("")}),b=(0,o.query)((e,t)=>{const r=f(t);if(!r)throw new Error(`Can't find type for path: ${t}`);return r.getSpec(e,r.match).then(e=>{let o=e;return(o="default"===r.match.sort?n.assoc("path",r.route.reverse(n.assoc("sort",o.sort,r.match)),o):n.assoc("path",t,e)).submitTopic&&!o.submitPath&&(o=n.assoc("submitPath",`/t/${o.submitTopic}/submit`,o)),o})}),O={...h,types:h,fromPath:f,sidebarFromPath:y,specFromPath:b};t.ListingType=O},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TopicListing=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=["hot","new","discussed","controversial","top","firehose"],p=(0,o.query)(e=>s.Query.wikiPage(e,i.Config.indexer,"listing:topic:sidebar")),d=(0,o.query)((e,{topic:t,sort:r})=>{const o=a.Path.splitTopics(t),s="all"===o[0]?"whatever":o[0];return u.ListingSpec.getSource(e,i.Config.indexer,"listing:topic",[`name ${t}`,`submit to ${s}`,`sort ${r}`,-1===t.indexOf(":")?"kind submission":"",...n.map(e=>`topic ${e}`,o),...n.map(e=>`tab ${e} /t/${t}/${e}`,c)].join("\n"))}),l=(0,o.query)((e,t)=>d(e,t).then(n.pipe(u.ListingSpec.fromSource,n.assoc("basePath",`/t/${t.topic}`)))),g=a.Path.withRoute({tabs:c,path:"/t/:topic/:sort",getSidebar:p,getSource:d,getSpec:l});t.TopicListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingOracle=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(10),i=r(4),s=r(6),a=r(9),u=r(13),c=r(14);const p=async(e,t,r,n,o=[],i=[])=>{if(!o.length&&!i.length)return;const s=await e.newScope().get(t.soul),c=await u.ListingSort.toItems(r,o,n),p=await a.ListingNode.diff(s,c,i);p&&console.log("CHANGES",t.soul,p),p&&t.write(p)},d={updateListing:p,onPut:async(e,t,{soul:r,updatedSoul:u,diff:d,...l})=>{let g=[];const h=a.ListingNode.pathFromSoul(r),m=e.newScope(),f=await c.ListingType.specFromPath(m,h),{thingId:y}=i.Schema.ThingVoteCounts.route.match(u)||{};n.equals(t.match.thingId||null);y&&g.push(y),g=n.concat(g,s.ThingSet.ids(o.GunNode.decodeSEA(d))),await p(e,t,m,f,g,[]);for(const r in m.getAccesses())e.listen(r,t.soul)}};t.ListingOracle=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validation=t.suppressor=void 0;var n,o=c(r(0)),i=(n=r(18))&&n.__esModule?n:{default:n},s=r(31),a=c(r(19)),u=r(4);function c(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}const p=(e,t)=>{const r=o.path(["data","#"],t),n=o.without(["comments","allcomments","votesup","votesdown"],o.keys(o.path(["_",">"],t))).map(e=>o.path(["_",">",e],t)).sort().pop(),{thingId:i}=u.Schema.ThingData.route.match(r)||{},s=o.prop("id",t);return s&&s===i&&n&&n<1543102814945},d=(e,t)=>{const r=o.prop("id",t);return r&&r===(0,i.default)({authorId:(o.path(["author","#"],t)||"").substr(1)||void 0,timestamp:parseInt(o.prop("timestamp",t),10),kind:o.prop("kind",t),topic:o.prop("topicName",u.Schema.Topic.route.match(o.path(["topic","#"],t))),opId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["op","#"],t))),replyToId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["replyTo","#"],t))),originalHash:o.prop("originalHash",t)})},l=(e,t)=>{const r=(o.path(["author","#"],t)||"").substr(1)||void 0,n=o.prop("authorId",u.Schema.ThingDataSigned.route.match(o.path(["data","#"],t)));return r&&r===n},g=(e,t)=>{const r=o.prop("originalHash",t),n=o.prop("thingId",u.Schema.ThingData.route.match(o.path(["data","#"],t)));return n&&n===r},h=e=>(t,r,n,i,s)=>{const{thingId:a}=u.Schema.Thing.route.match(o.path(["_","#"],s)||"")||{},{thingId:c}=u.Schema[t].route.match(o.prop("#",r)||"");return!(!a||a!==c)&&e.compile({$ref:`schema.json#/definitions/${t}Edge`})(r)},m=(e,t)=>{const{_:r,...n}=t||{};n.timestamp=parseFloat(n.timestamp,10);const{thingId:s}=u.Schema.ThingData.route.match(o.path(["_","#"],t)||"")||{};return s&&s===(0,i.default)(n)},f=(e,t,r,n)=>{const{algorithm:o="argon2d",config:i={}}=t||{},s=Buffer.hasOwnProperty("from")?Buffer.from(n,"hex"):new Buffer(n,"hex"),a=Buffer.hasOwnProperty("from")?Buffer.from(s,"hex"):new Buffer(s,"hex"),u=e.hash(r,{salt:a,hashLength:i.hashLength,timeCost:i.timeCost,memoryCost:i.memoryCost,parallelism:i.parallelism,raw:!0,type:e[o]});let c,p=0;for(c=0;c<=i.complexity-8;c+=8,p++)if(0!==u[p])return!1;const d=255<<8+c-i.complexity;return 0==(u[p]&d)},y=(e,t)=>{const n=r(32);if(!n)return!0;const{algorithm:i="argon2d"}=e||{},s=o.path(["_","#"],t);if("argon2d"!==i)throw new Error("Only argon2 supported for vote hashes");return o.without(["_"],o.keys(t)).forEach(r=>{f(n,e,s,r)||(console.log("invalid vote",s,r),delete t[r])}),!0},b=o.compose(e=>(e.addKeyword("isLegacyThing",{validate:p}),e.addKeyword("thingHashMatchesSoul",{validate:d}),e.addKeyword("signedThingDataMatchesThing",{validate:l}),e.addKeyword("thingDataMatchesOriginalHash",{validate:g}),e.addKeyword("thingRelatedEdge",{validate:h(e)}),e.addKeyword("thingDataHashMatchesSoul",{validate:m}),e.addKeyword("keysAreProofsOfWork",{validate:y,modifying:!0}),e),a.initAjv),O=(0,s.createSuppressor)({definitions:u.Schema.definitions,init:b});t.suppressor=O;const P=o.curry((e,t)=>t.on("in",function(t){const r=t._;delete t._,"ping"in t||"leech"in t||t.put&&!o.keys(t.put).length||(e.config.disableValidation?Promise.resolve(t):O.validate(t)).then(e=>e?(t._=r,this.to.next(t)):console.log("msg didn't validate",t)).catch(e=>console.error("validate err",t,e.stack||e))})),I={isLegacyThing:p,thingHashMatchesSoul:d,signedThingDataMatches:l,thingDataMatchesOriginalHash:g,getIsThingRelatedEdge:h,thingDataHashMatches:m,isVoteValid:f,keysAreProofsOfWork:y,initAjv:b,suppressor:O,gunWireInput:P};t.Validation=I},function(e,t){e.exports=r},function(e,t){e.exports=n},function(e,t){e.exports=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingSet=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(4),i=r(10);const s=i.GunNode.edges;const a={ids:n.compose(n.filter(n.identity),n.map(n.compose(n.prop("thingId"),o.Schema.Thing.route.match.bind(o.Schema.Thing.route))),i.GunNode.edges),union:n.compose(n.dissoc("_"),n.reduce(n.mergeRight,{})),souls:s,dayStr:function(e){const t=new Date(e||(new Date).getTime());return`${t.getUTCFullYear()}/${t.getUTCMonth()+1}/${t.getUTCDate()}`}};t.ThingSet=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingDataNode=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(23);const i=n.propOr("","body"),s=n.propOr("","url"),a={body:i,domain:n.compose(e=>{if(!e)return"";const t=(0,o.parse)(e);return(t.host||t.scheme||"").replace(/^www\./,"")},s)};t.ThingDataNode=a},function(e,t){e.exports=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentCommand=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(8);const i=n.compose(n.map(n.trim),n.split(" "),n.replace(o.Constants.COMMAND_RE,""),n.propOr("",0),n.split("\n")),s={tokenize:i,map:e=>n.reduce((t,r)=>{const s=n.path([r,"body"],e),a=n.path([r,"authorId"],e)||"anon",u=parseFloat(n.path([r,"timestamp"],e));if(!n.test(o.Constants.COMMAND_RE,s))return t;const c=[a,...i(s),r];return n.assocPath(c,u||0,t)},{},n.keys(e))};t.CommentCommand=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ListingQuery",{enumerable:!0,get:function(){return n.ListingQuery}}),Object.defineProperty(t,"ListingNode",{enumerable:!0,get:function(){return o.ListingNode}}),Object.defineProperty(t,"ListingSpec",{enumerable:!0,get:function(){return i.ListingSpec}}),Object.defineProperty(t,"ListingSort",{enumerable:!0,get:function(){return s.ListingSort}}),Object.defineProperty(t,"ListingType",{enumerable:!0,get:function(){return a.ListingType}}),Object.defineProperty(t,"ListingDataSource",{enumerable:!0,get:function(){return u.ListingDataSource}}),Object.defineProperty(t,"ListingDefinition",{enumerable:!0,get:function(){return c.ListingDefinition}}),Object.defineProperty(t,"ListingFilter",{enumerable:!0,get:function(){return p.ListingFilter}}),Object.defineProperty(t,"ListingOracle",{enumerable:!0,get:function(){return d.ListingOracle}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return l.SpaceSpec}}),t.Listing=void 0;var n=r(35),o=r(9),i=r(5),s=r(13),a=r(14),u=r(12),c=r(26),p=r(11),d=r(16),l=r(28);const g={...a.ListingType.types,ListingNode:o.ListingNode,ListingSpec:i.ListingSpec,isValidSort:s.ListingSort.isValidSort,idsToSouls:o.ListingNode.idsToSouls,get:o.ListingNode.get,fromSpec:n.ListingQuery.fromSpec,fromPath:n.ListingQuery.fromPath,typeFromPath:a.ListingType.fromPath,sidebarFromPath:a.ListingType.sidebarFromPath,specFromPath:a.ListingType.specFromPath,nodeFromPath:n.ListingQuery.nodeFromPath};t.Listing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDefinition=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(27),i=r(3);const s={fromSource:(e,t=null,r=null)=>{const s=o.Tokenizer.tokenize(e),a={...s},{isPresent:u,getValue:c,getValues:p,getValueChain:d,getPairs:l}=s;return[a.fromPageAuthor=t,a.fromPageName=(r?`space:${r}`:void 0)]=d("sourced from page"),a.displayName=s.getValue("name")||r,a.indexer=c("tabulator")||i.Config.indexer,a.tabulator=c("tabulator")||a.indexer,a.tabs=l("tab"),a.sort=c("sort"),"default"===a.sort&&(a.sort=c("tab")),a.uniqueByContent=!!u("unique by content"),a.curators=p("curator"),a.moderators=p("mod"),a.includeRanks=!!u("show ranks"),a.stickyIds=p("sticky"),a.isIdSticky=(e=>!!s.isPresent(["sticky",e])),a.isChat=!!u("display as chat"),a.submitTopics=p("submit to"),a.submitTopic=c("submit to"),a.chatTopic=c("chat in"),t&&r&&(a.spaceName=r,a.owner=t,a.useForComments=!s.isPresent("comments leave space"),a.basePath=`/user/${t}/spaces/${r}`,a.submitTopic&&(a.submitPath=`${a.basePath}/submit`),a.defaultTab=s.getValue("tab"),a.defaultTabPath=a.defaultTab?s.getValue(["tab",a.defaultTab]):null),a.filters={functions:[],allow:{repliesTo:c("replies to author"),type:c("type"),ops:p("op"),aliases:p("alias"),authors:p("author"),domains:p("domain"),topics:p("topic"),listings:p("listing"),kinds:p("kind"),anon:!u("require signed"),signed:!u("require anon")},deny:{aliases:p("ban alias"),authors:p("ban author"),domains:p("ban domain"),topics:p("ban topic"),anon:!!u("require signed"),signed:!!u("require anon"),tags:l("can remove")}},a.voteFilters={functions:[],upsMin:parseInt(c("ups above"),10)||null,upsMax:parseInt(c("ups below"),10)||null,downsMin:parseInt(c("downs above"),10)||null,downsMax:parseInt(c("downs below"),10)||null,scoreMin:parseInt(c("score above"),10)||null,scoreMax:parseInt(c("score below"),10)||null},a.censors=n.uniq(n.map(n.prop(1),a.filters.deny.tags)),a}};t.ListingDefinition=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tokenizer=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0));const o={tokenize:e=>{const t=(e||"").split("\n").reduce((e,t)=>{const r=t.trim().split(" ").map(n.trim).filter(e=>e);return r.length?n.assocPath(r,{},e):e},{}),r=e=>{let r=e;return"string"==typeof e&&(r=e.split(" ")),r&&n.path(r,t)},o=e=>n.keysIn(r(e)),i=e=>o(e)[0]||null;return{source:e,isPresent:r,getValue:i,getValues:o,getLastValue:e=>o(e).pop()||null,getValueChain:e=>{const t="string"==typeof e?e.split(" "):e,r=[];let n=e;for(;n;)(n=i([...t,...r]))&&r.push(n);return r},getPairs:e=>{const t="string"==typeof e?e.split(" "):e;return o(t).reduce((e,r)=>[...e,[r,i([...t,r])]],[])}}}};t.Tokenizer=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceSpec=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(3),s=r(27),a=r(2),u=r(5);const c=["hot","new","discussed","controversial","top"],p=e=>`space:${e}`,d=n.curry((e,t,r)=>{let n=[r||""];const o=s.Tokenizer.tokenize(r);o.getValue("tab")||c.map(r=>n.push(`tab ${r} /user/${e}/spaces/${t}/${r}`));let a=o.getValue("indexer");return a||(n.push(`indexer ${i.Config.indexer}`),a=i.Config.indexer),o.getValue("tabulator")||n.push(`tabulator ${a}`),n.join("\n")}),l=(0,o.query)((e,t,r,n)=>u.ListingSpec.getSource(e,t,p(r),n).then(d(t,r))),g=(0,o.query)((e,t,r,n)=>l(e,t,r,n).then(e=>u.ListingSpec.fromSource(e,t,r))),h=n.compose(n.sortBy(n.identity),n.map(n.replace(/^space:/,"")),n.filter(n.compose(n.prop("length"),n.match(/^space:[^:]*$/))),n.keys),m=(0,o.query)((e,t)=>a.Query.userPages(e,t).then(h)),f={configPageName:p,sidebarPageName:e=>`space:${e}:sidebar`,nodeToSpaceNames:h,userSpaceNames:m,tabs:c,getSource:l,getSpec:g};t.SpaceSpec=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Peer",{enumerable:!0,get:function(){return n.Peer}}),Object.defineProperty(t,"Config",{enumerable:!0,get:function(){return o.Config}}),Object.defineProperty(t,"Constants",{enumerable:!0,get:function(){return i.Constants}}),Object.defineProperty(t,"CommentCommand",{enumerable:!0,get:function(){return s.CommentCommand}}),Object.defineProperty(t,"Listing",{enumerable:!0,get:function(){return a.Listing}}),Object.defineProperty(t,"ListingOracle",{enumerable:!0,get:function(){return a.ListingOracle}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return a.SpaceSpec}}),Object.defineProperty(t,"Page",{enumerable:!0,get:function(){return u.Page}}),Object.defineProperty(t,"Query",{enumerable:!0,get:function(){return c.Query}}),Object.defineProperty(t,"Schema",{enumerable:!0,get:function(){return p.Schema}}),Object.defineProperty(t,"Thing",{enumerable:!0,get:function(){return d.Thing}}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return d.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return d.ThingDataNode}}),Object.defineProperty(t,"Validation",{enumerable:!0,get:function(){return l.Validation}}),Object.defineProperty(t,"Promise",{enumerable:!0,get:function(){return g.Promise}}),Object.defineProperty(t,"Tabulator",{enumerable:!0,get:function(){return h.Tabulator}}),t.default=void 0;var n=r(30),o=r(3),i=r(8),s=r(24),a=r(25),u=r(44),c=r(2),p=r(4),d=r(6),l=r(17),g=r(1),h=r(46),m=n.Peer.init;t.default=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Peer=void 0;var n=r(17),o=r(2),i=r(6),s=r(34);const a={init:function(e,t={}){const{leech:r,disableValidation:a,noGun:u,localStorage:c,persist:p,...d}=t||{},l={config:t};if(!u){const t={localStorage:!!c,radisk:!!p,...d};p&&(t.localStorage=!1),a||e.on("opt",n.Validation.gunWireInput(l)),t.storeFn&&(t.store=t.storeFn(t)),l.gun=e(t),t.localStorage&&l.gun.on("localStorage:error",e=>e.retry({})),r&&(()=>l.gun._.on("out",{leech:!0}))()}return l.newScope=(e=>o.Query.createScope(l,e)),l.onLogin=s.Authentication.onLogin(l),l.signup=s.Authentication.signup(l),l.login=s.Authentication.login(l),l.logout=(()=>s.Authentication.logout(l)),l.isLoggedIn=(()=>s.Authentication.isLoggedIn(l)),l.submit=i.Thing.submit(l),l.comment=i.Thing.comment(l),l.chat=i.Thing.chat(l),l.writePage=i.Thing.writePage(l),l.vote=i.Thing.vote(l),l.queries=o.Query,l}};t.Peer=a},function(e,t){e.exports=s},function(e,t){e.exports=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return c.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return p.ThingDataNode}}),t.Thing=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),i=r(1),s=(n=r(18))&&n.__esModule?n:{default:n},a=r(23),u=r(4),c=r(21),p=r(22);const d={chatmsg:"chat:",comment:"comments:"},l=o.compose(o.prop("thingId"),u.Schema.Thing.route.match.bind(u.Schema.Thing.route)),g=o.map(l),h=o.curry((e,t,r)=>{if(!r.topic&&!r.opId)return;if(r.opId&&!r.topic)return void e.gun.get(u.Schema.Thing.route.reverse({thingId:r.opId})).get("data").on(function(n){n&&(h(e,t,{...r,topic:n.topic||"all"}),this.off())});const n=e.gun.get(u.Schema.Thing.route.reverse({thingId:t})),o=c.ThingSet.dayStr(r.timestamp),[i,s,p]=o.split("/"),l=d[r.kind]||"",g=l+r.topic.toLowerCase().trim(),m=e.gun.get(u.Schema.Topic.route.reverse({topicName:g})),f=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:g,year:i,month:s,day:p}));if(!r.skipAll&&"all"!==r.topic){const t=`${l}all`,r=e.gun.get(u.Schema.Topic.route.reverse({topicName:t})),o=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:t,year:i,month:s,day:p}));r.set(n),o.set(n)}if("submission"===r.kind){const t=r.url?(0,a.parse)(r.url):{},o=(r.url?(t.host||t.scheme||"").replace(/^www\./,""):`self.${r.topic}`).toLowerCase();if(e.gun.get(u.Schema.Domain.route.reverse({domainName:o})).set(n),r.url){e.gun.get(u.Schema.URL.route.reverse({url:r.url})).set(n)}}if(r.opId){e.gun.get(u.Schema.ThingAllComments.route.reverse({thingId:r.opId})).set(n)}if(r.replyToId||r.opId){e.gun.get(u.Schema.ThingComments.route.reverse({thingId:r.replyToId||r.opId})).set(n)}m.set(n),f.set(n)}),m=o.curry((e,t)=>{t.timestamp=t.timestamp||(new Date).getTime();const r=(0,s.default)(t),{timestamp:n,kind:o,topic:i,authorId:a,opId:c,replyToId:p}=t,d=(0,s.default)({timestamp:n,kind:o,topic:i,authorId:a,opId:c,replyToId:p,originalHash:r}),l=e.gun.get(u.Schema.Thing.route.reverse({thingId:d})),g=a?u.Schema.ThingDataSigned.route.reverse({thingId:d,authorId:a}):u.Schema.ThingData.route.reverse({thingId:r}),m={id:d,timestamp:n,kind:o,originalHash:r,data:{"#":g},votesup:{"#":u.Schema.ThingVotesUp.route.reverse({thingId:d})},votesdown:{"#":u.Schema.ThingVotesDown.route.reverse({thingId:d})},allcomments:{"#":u.Schema.ThingAllComments.route.reverse({thingId:d})},comments:{"#":u.Schema.ThingComments.route.reverse({thingId:d})}};return i&&(m.topic={"#":u.Schema.Topic.route.reverse({topicName:i})}),a&&(m.author={"#":`~${a}`}),c&&(m.op={"#":u.Schema.Thing.route.reverse({thingId:c})}),p&&(m.replyTo={"#":u.Schema.Thing.route.reverse({thingId:p})}),e.gun.get(g).put(t),l.put(m),h(e,d,t),l}),f=o.curry((e,t)=>{const r=t.timestamp||(new Date).getTime(),n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),t.domain&&(t.domain=t.domain.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);const o=m(e,{...t,timestamp:r,kind:"submission"});if(n){const t=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),r=u.Schema.AuthorSubmissions.route.reverse({authorId:n.pub}),i=e.gun.get(t),s=e.gun.get(r);e.gun.user().get("things").put(i),e.gun.user().get("submissions").put(s),i.set(o),s.set(o)}return o}),y=o.curry((e,t)=>{const r=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),r&&(t.author=r.alias,t.authorId=r.pub);const n=m(e,{...t,kind:"comment"});if(r){const t=u.Schema.AuthorThings.route.reverse({authorId:r.pub}),o=u.Schema.AuthorComments.route.reverse({authorId:r.pub}),i=e.gun.get(t),s=e.gun.get(o);e.gun.user().get("things").put(i),e.gun.user().get("comments").put(s),i.set(n),s.set(n)}return n}),b=o.curry((e,t)=>{const r=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),r&&(t.author=r.alias,t.authorId=r.pub);const n=m(e,{...t,kind:"chatmsg"});if(r){const t=u.Schema.AuthorThings.route.reverse({authorId:r.pub}),o=e.gun.get(t);e.gun.user().get("things").put(o),o.set(n)}return n}),O=o.curry((e,t,r)=>{const n=e.isLoggedIn();if(!n)return i.Promise.reject("not logged in");let o;const s=u.Schema.AuthorPages.route.reverse({authorId:n.pub}),a=e.gun.get(s).get(t);return a.then(i=>{if(i&&i.data)a.get("data").get("body").put(r);else{const i={body:r,title:t,kind:"wikipage",author:n.alias,authorId:n.pub};o=m(e,i),a.put(o)}})}),P=o.curry((e,t,r,n)=>{return e.gun.get(u.Schema["up"===r?"ThingVotesUp":"ThingVotesDown"].route.reverse({thingId:t})).get(n).put("1")}),I={soulToId:l,soulsToIds:g,put:m,submit:f,comment:y,chat:b,writePage:O,vote:P,index:h};t.Thing=I},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Authentication=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1);const i={signup:n.curry((e,t,r,n={})=>new o.Promise((i,s)=>{if(e&&e.gun&&e.gun.user){const a=e.gun.user();o.Promise.resolve(a.create(t,r,n=>{n.err?(s(n.err),a.leave(),e.gun.user().leave()):e.login(t,r).then(i)},n))}else s("SEA is not loaded")})),login:n.curry((e,t,r)=>new o.Promise((n,o)=>{if(e&&e.gun&&e.gun.user){e.gun.user().auth(t,r,t=>t.err?o(t.err):n(e.gun.user().is))}else o("SEA is not loaded")}).then(t=>(e._onLogin&&e._onLogin(t),t))),logout:e=>e.gun.user().leave(),isLoggedIn:e=>e.gun&&e.gun.user&&e.gun.user().is,onLogin:n.curry((e,t)=>e._onLogin=t)};t.Authentication=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingQuery=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(8),s=r(9),a=r(11),u=r(14);const c=(0,o.query)((e,t,r={})=>{const i=a.ListingFilter.thingFilter(e,t),u=n.map(e=>[e,-1/0],t.stickyIds);return t.dataSource.query?t.dataSource.query(e).then(n=>{const o=s.ListingNode.itemsToRows([...u,...n]);return a.ListingFilter.getFilteredRows(e,t,o,{...r,filterFn:i})}):(0,o.resolve)([])}),p=(0,o.query)((e,t,r={})=>{}),d=(0,o.query)((e,t,r)=>c(e,t,r).then(n.compose(s.ListingNode.serialize(t),s.ListingNode.rowsToItems))),l=(0,o.query)((e,t,r={})=>{const o=a.ListingFilter.thingFilter(e,t),i=n.pathOr([],["dataSource","listingPaths"],t),u=n.map(e=>[-1,e,-1/0],t.stickyIds),c=n.map(s.ListingNode.soulFromPath(r.indexer||t.indexer),i);return s.ListingNode.rowsFromSouls(e,c).then(n=>a.ListingFilter.getFilteredIds(e,t,[...u,...n],{...r,filterFn:o}))}),g=(0,o.query)((e,t,r={})=>(r.calculate?p:l)(e,t,r)),h=(0,o.query)((e,t,r)=>{const n=u.ListingType.fromPath(t);return n?n.getSpec(e,n.match).then(o=>o.hasIndexer&&!r.calculate?n&&n.read?n.read(e,n.match,r):s.ListingNode.read(e,t,r):g(e,o,r)):Promise.resolve([])}),m=(0,o.query)((e,t,r)=>u.ListingType.specFromPath(e,t).then(t=>d(e,t,n.mergeLeft(r,{limit:i.Constants.LISTING_SIZE})))),f={fromSpec:g,fromPath:h,calculateRows:c,toNode:d,nodeFromPath:m};t.ListingQuery=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChatListing=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=[...r(15).TopicListing.tabs,"chat"],p=(0,o.query)((e,{topic:t,sort:r})=>s.Query.wikiPage(e,i.Config.indexer,"listing:chat:sidebar")),d=(0,o.query)((e,{topic:t,sort:r})=>{const o=a.Path.splitTopics(t),s="all"===t?"whatever":o[0]||"whatever",p=o.reduce((e,t)=>[...e,`chat:${t}`],[]);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:chat",["sort new","display as chat",`submit to ${s}`,`sort ${r}`,...n.map(e=>`topic ${e}`,p),...n.map(e=>`tab ${e} /t/${t}/${e}`,c)].join("\n"))}),l=(0,o.query)((e,t)=>d(e,t).then(u.ListingSpec.fromSource)),g=a.Path.withRoute({path:"/t/:topic/chat",getSidebar:p,getSource:d,getSpec:l});t.ChatListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FirehoseListing=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=r(15).TopicListing.tabs,p=(0,o.query)(e=>s.Query.wikiPage(e,i.Config.indexer,"listing:firehose:sidebar")),d=(0,o.query)((e,{topic:t,sort:r})=>{const o=a.Path.splitTopics(t),s="all"===t?"whatever":o[0]||"whatever",p=o.reduce((e,t)=>[...e,t,`chat:${t}`,`comments:${t}`],[]);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:firehose",["sort new","display as chat",`submit to ${s}`,`sort ${r}`,...n.map(e=>`topic ${e}`,p),...n.map(e=>`tab ${e} /t/${t}/${e}`,c)].join("\n"))}),l=(0,o.query)((e,t)=>d(e,t).then(u.ListingSpec.fromSource)),g=a.Path.withRoute({tabs:c,path:"/t/:topic/firehose",getSidebar:p,getSource:d,getSpec:l});t.FirehoseListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentedListing=void 0;var n=r(1),o=r(3),i=r(2),s=r(7),a=r(5);const u=(0,n.query)(e=>i.Query.wikiPage(e,o.Config.indexer,"listing:commented:sidebar")),c=(0,n.query)((e,{authorId:t,sort:r})=>a.ListingSpec.getSource(e,o.Config.indexer,"listing:commented",[`curator ${t}`,`sort ${r}`].join("\n"))),p=(0,n.query)((e,t)=>c(e,t).then(a.ListingSpec.fromSource)),d=s.Path.withRoute({path:"/user/:authorId/commented/:sort",getSidebar:u,getSource:c,getSpec:p});t.CommentedListing=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomainListing=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=["hot","new","discussed","controversial","top"],p=(0,o.query)(e=>s.Query.wikiPage(e,i.Config.indexer,"listing:domain:sidebar")),d=(0,o.query)((e,{domain:t,sort:r})=>{const o=a.Path.splitTopics(t);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:domain",[`name ${o[0]}`,"submit to whatever",`sort ${r}`,"kind submission",...n.map(e=>`domain ${e}`,o),...n.map(e=>`tab ${e} /domain/${t}/${e}`,c)].join("\n"))}),l=(0,o.query)((e,t)=>d(e,t).then(u.ListingSpec.fromSource)),g=a.Path.withRoute({path:"/domain/:domain/:sort",tabs:c,getSidebar:p,getSource:d,getSpec:l});t.DomainListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentListing=void 0;var n=r(1),o=r(3),i=r(2),s=r(7),a=r(5);const u=(0,n.query)(e=>i.Query.wikiPage(e,o.Config.indexer,"listing:comments:sidebar")),c=(0,n.query)((e,{thingId:t,sort:r})=>a.ListingSpec.getSource(e,o.Config.indexer,"listing:comments",[`op ${t}`,`sort ${r}`].join("\n"))),p=(0,n.query)((e,t)=>c(e,t).then(a.ListingSpec.fromSource)),d=s.Path.withRoute({path:"/things/:thingId/comments/:sort",getSidebar:u,getSource:c,getSpec:p});t.CommentListing=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceListing=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(4),s=r(10),a=r(2),u=r(7),c=r(9),p=r(16),d=r(28);const l=(0,o.query)((e,{authorId:t,name:r,sort:n})=>d.SpaceSpec.getSource(e,t,r,`sort ${n}`)),g=(0,o.query)((e,{authorId:t,name:r,sort:n})=>d.SpaceSpec.getSpec(e,t,r,`sort ${n}`)),h=(0,o.query)((e,{authorId:t,name:r,sort:n})=>a.Query.wikiPage(e,t,d.SpaceSpec.sidebarPageName(r))),m=u.Path.withRoute({path:"/user/:authorId/spaces/:name/:sort",getSource:l,getSidebar:h,getSpec:g,onPut:async(e,t,{updatedSoul:r,diff:o,original:a,latest:u=0})=>{const d=e.newScope(),l=s.GunNode.decodeSEA(a),h=s.GunNode.decodeSEA(o),[m,f]=c.ListingNode.categorizeDiff(h,l),y=await g(d,t.match),b=i.Schema.ThingVoteCounts.route.match(r),O=i.Schema.Thing.route.match(r),{thingId:P}=i.Schema.ThingDataSigned.route.match(r)||{},I=i.Schema.SEAAuthor.route.match(r);b&&m.push(b.thingId),O&&m.push(O.thingId),P&&P!==y.fromPageId&&m.push(P),await p.ListingOracle.updateListing(e,t,d,y,m,f);for(const r in d.getAccesses())e.listen(r,t.soul);if(n.prop("size",a)||m.length||f.length||I)return;console.log("---STANDARD SPACE UPDATE---",t.soul,r);const S=await e.newScope().get(t.soul),v=c.ListingNode.itemKeys(S);v.length&&t.write({size:0,...v.reduce((e,t)=>(e[`${t}`]=null,e),{})}),e.work({id:`update:${t.soul}`,soul:t.soul,method:"doUpdate",priority:t.priority||50})}});t.SpaceListing=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InboxListing=void 0;var n=r(1),o=r(3),i=r(2),s=r(10),a=r(4),u=r(6),c=r(7),p=r(5),d=r(9),l=r(16);const g=(0,n.query)(e=>i.Query.wikiPage(e,o.Config.indexer,"listing:topic:sidebar")),h=(0,n.query)((e,{authorId:t,type:r,sort:n="new"})=>p.ListingSpec.getSource(e,o.Config.indexer,"listing:inbox",[`replies to author ${t}`,"kind comment",`type ${r}`,`sort ${n}`].join("\n"))),m=(0,n.query)((e,t)=>h(e,t).then(p.ListingSpec.fromSource)),f=c.Path.withRoute({path:"/user/:authorId/replies/:type/:sort",getSidebar:g,getSource:h,getSpec:m,onPut:async(e,t,{updatedSoul:r,diff:n})=>{const o=e.newScope(),i=s.GunNode.decodeSEA(n),[c]=d.ListingNode.categorizeDiff(i),p=await m(o,t.match);let g=u.ThingSet.ids(i);for(let e=0;e<c.length;e++){const t=c[e],r=u.ThingSet.ids(await o.get(a.Schema.ThingComments.route.reverse({thingId:t})).then());g=g.concat(r)}g.length&&await l.ListingOracle.updateListing(e,t,o,p,g,[]);for(const r in o.getAccesses())e.listen(r,t.soul)}});t.InboxListing=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProfileListing=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=["overview","comments","submitted","commands"],p=(0,o.query)(e=>s.Query.wikiPage(e,i.Config.indexer,"listing:profile:sidebar")),d=(0,o.query)((e,{authorId:t,type:r,sort:o})=>u.ListingSpec.getSource(e,i.Config.indexer,"listing:profile",[`author ${t}`,`type ${r}`,`sort ${o}`,...n.map(e=>`tab ${e} /user/${t}/${e}`,c)].join("\n"))),l=(0,o.query)((e,t)=>s.Query.userMeta(e,t.authorId).then(r=>d(e,t).then(n.pipe(u.ListingSpec.fromSource,n.mergeLeft({profileId:t.authorId,displayName:n.propOr("","alias",r)}))))),g=a.Path.withRoute({path:"/user/:authorId/:type/:sort",tabs:c,getSidebar:p,getSource:d,getSpec:l});t.ProfileListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Page=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),i=(n=r(45))&&n.__esModule?n:{default:n},s=r(1),a=r(3),u=r(2),c=r(25);const p=o.mergeLeft({withMatch:({params:{authorId:e=a.Config.owner,name:t}})=>({preload:r=>u.Query.wikiPage(r,e,t)})}),d=(e,t)=>e?{preload:r=>l(r,e,t),sidebar:(0,s.query)(t=>c.Listing.sidebarFromPath(t,e),`sidebar:${e}`),space:(0,s.query)(r=>c.Listing.specFromPath(r,e,t),`spec:${e}`),ids:(0,s.query)((r,n={})=>c.Listing.fromPath(r,e,o.mergeLeft(n,t)),`ids:${e}:${i.default.stringify(t)}`)}:{preload:(0,s.query)(o.always((0,s.resolve)({}))),sidebar:(0,s.query)(o.always((0,s.resolve)(""))),space:(0,s.query)(o.always((0,s.resolve)(c.ListingSpec.fromSource("")))),ids:(0,s.query)(o.always((0,s.resolve)([])))},l=async(e,t,r)=>{const n=d(t,r);let[i,s]=await Promise.all([n.space(e),n.ids(e,{}),n.sidebar(e)]);i||(i=c.ListingSpec.fromSource(""));const p=c.Listing.idsToSouls(s),[g]=await Promise.all([u.Query.multiThingMeta(e,{thingSouls:p,tabulator:i.tabulator||a.Config.tabulator,scores:!0,data:!0}),...o.map(t=>u.Query.userMeta(e,t),o.uniq([i&&i.indexer,i&&i.owner,i&&i.tabulator]))]),h=o.compose(o.without(s),o.filter(o.identity),o.uniq,o.map(o.pathOr(null,["data","opId"])))(g);if(console.log("opIds",h),h.length){const t=c.Listing.idsToSouls(h);await u.Query.multiThingMeta(e,{thingSouls:t,tabulator:i.tabulator||a.Config.tabulator,data:!0})}if(i.chatTopic){`/t/${i.chatTopic}/chat`!==t&&await l(e,`/t/${i.chatTopic}/chat`,{})}return e.getCache()},g={withListingMatch:d,preloadListing:l,wikiPage:p,thingComments:({prefix:e="t",identifier:t="all",sort:r="best",...n}={})=>({...n,withMatch:({params:{opId:n,prefix:i=e,identifier:s=t,sort:a=r},query:u})=>d(c.ListingType.CommentListing.route.reverse({thingId:n,sort:a}),o.assoc("limit",1e3,u))}),listing:({prefix:e="t",identifier:t="all",sort:r="hot",...n}={})=>({...n,withMatch:({params:{prefix:n=e,identifier:o=t,sort:i=r},query:s})=>d(`/${n}/${o}/${i}`,s)}),spaceListing:({name:e="default",authorId:t,sort:r="default",...n}={})=>({...n,withMatch:({params:{authorId:n=t,name:o=e,sort:i=r},query:s})=>d(c.ListingType.SpaceListing.route.reverse({authorId:n||a.Config.owner,name:o,sort:i}),s)}),spaceThingComments:({name:e="default",authorId:t,sort:r="hot",...n})=>({...n,withMatch:({params:{opId:n,authorId:o=t,name:i=e,sort:s=r},query:u})=>{const p=c.ListingType.SpaceListing.route.reverse({authorId:o||a.Config.owner,name:i,sort:s}),d=c.ListingType.CommentListing.route.reverse({thingId:n,sort:s});return{space:u(e=>c.Listing.specFromPath(e,p,u),`spec:${p}`),ids:u(e=>c.Listing.fromPath(e,d,u),d),preload:e=>l(e,d,u)}}}),profile:({sort:e="new",type:t="overview",...r}={})=>({...r,withMatch:({params:{authorId:r,type:n=t,sort:o=e},query:i})=>d(c.ListingType.ProfileListing.route.reverse({authorId:r,type:n,sort:o}),i)}),inbox:({sort:e="new",type:t="overview",...r}={})=>({...r,withMatch:({authorId:r,params:{type:n=t,sort:o=e},query:i})=>d(c.ListingType.InboxListing.route.reverse({authorId:r,type:n,sort:o}),i)})};t.Page=g},function(e,t){e.exports=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tabulator=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1),i=r(4),s=r(2),a=r(24);const u={query:(0,o.query)(async(e,t)=>{const r=i.Schema.Thing.route.reverse(t.match),[u,c,p,d]=await(0,o.all)([e.get(`${r}/votesup`).count(),e.get(`${r}/votesdown`).count(),e.get(`${r}/allcomments`).count(),e.get(`${r}/comments`).souls()]),l=await s.Query.thingDataFromSouls(d),g=a.CommentCommand.map(l),h={up:u,down:c,comment:p,replies:d.length,score:u-c};return n.keys(g).length&&(h.commands=JSON.stringify(g)),h})};t.Tabulator=u}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,