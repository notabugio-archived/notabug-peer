!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):"function"==typeof define&&define.amd?define("notabug-peer",["ramda","gun-scope","object-hash","gun-suppressor-sear","route-parser","uri-js","gun-suppressor","argon2"],t):"object"==typeof exports?exports["notabug-peer"]=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):e["notabug-peer"]=t(e.ramda,e["gun-scope"],e["object-hash"],e["gun-suppressor-sear"],e["route-parser"],e["uri-js"],e["gun-suppressor"],e.argon2)}("undefined"!=typeof self?self:this,function(e,t,n,r,o,i,a,s){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=24)}([function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Schema=void 0;var r,o=u(n(0)),i=(r=n(18))&&r.__esModule?r:{default:r},a=u(n(17)),s=n(7);function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var p={...a.AUTH_SCHEMA,topicName:{type:"string",minLength:1,maxLength:s.Constants.MAX_TOPIC_SIZE},TopicDay:{title:"Topic Day",description:"A single day of things in a topic",soul:{pattern:"".concat(s.Constants.PREFIX,"/topics/:topicName/days/:year/:month/:day"),properties:{topicName:{$ref:"schema.json#/definitions/topicName"},year:{type:"number",minimum:2018,maximum:2100},month:{type:"number",minimum:1,maximum:12},day:{type:"number",minimum:1,maximum:31}},required:["topicName","year","month","day"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},Topic:{title:"Topic",description:"All things in a topic",soul:{pattern:"".concat(s.Constants.PREFIX,"/topics/:topicName"),properties:{topicName:{$ref:"schema.json#/definitions/topicName"}},required:["topicName"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},domainName:{type:"string",minLength:1,maxLength:s.Constants.MAX_DOMAIN_SIZE},Domain:{title:"Domain",description:"All things in a domain",soul:{pattern:"".concat(s.Constants.PREFIX,"/domains/:domainName"),properties:{domainName:{$ref:"schema.json#/definitions/domainName"}},required:["domainName"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},url:{type:["null","string"],maxLength:s.Constants.MAX_URL_SIZE},URL:{title:"URL",description:"All things for a given URL",soul:{pattern:"".concat(s.Constants.PREFIX,"/urls/*url"),properties:{url:{$ref:"schema.json#/definitions/url"}},required:["url"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},thingId:{type:"string",maxLength:s.Constants.MAX_HASH_SIZE},thingSoul:{properties:{thingId:{"#ref":"#definitions/thingId"}}},ThingAllComments:{title:"Thing All Comments",description:"All comments for a given submission",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/allcomments"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},ThingComments:{title:"Thing Comments",description:"Direct replies to a thing",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/comments"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},timestamp:{type:["number","string"]},thingKind:{type:"string",maxLength:s.Constants.MAX_THING_KIND_SIZE},Thing:{title:"Thing Reference",description:"These are submissions, comments, chat messages and wiki pages",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},propsFromSoul:{id:"thingId"},properties:{id:{$ref:"#/definitions/thingId"},kind:{"#ref":"#/definitions/thingKind"},timestamp:{$ref:"#/definitions/timestamp"},originalHash:{$ref:"#/definitions/thingId"},data:{oneOf:[{$ref:"#/definitions/ThingDataEdge"},{$ref:"#/definitions/ThingDataSignedEdge"}]},topic:{anyOf:[{$ref:"#/definitions/TopicEdge"},{description:"Some old things had generic topic souls",type:"object",additionalProperties:!1,properties:{"#":{type:"string",maxLength:42}},required:["#"]}]},domain:{$ref:"#/definitions/DomainEdge"},url:{$ref:"#/definitions/URLEdge"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"},op:{$ref:"#/definitions/ThingEdge"},replyTo:{$ref:"#/definitions/ThingEdge"},author:{$ref:"#/definitions/SEAAuthorEdge"}},anyOf:[{allOf:[{thingHashMatchesSoul:!0},{anyOf:[{signedThingDataMatchesThing:!0},{thingDataMatchesOriginalHash:!0}]}]},{isLegacyThing:!0},{additionalProperties:!1,description:"Self verifying can be updated in isolation",properties:{id:{$ref:"#/definitions/thingId"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"}}}]},ProofOfWorkVotes:{$async:!0,keysAreProofsOfWork:{algorithm:"argon2d",config:{complexity:6,hashLength:32,timeCost:1,memoryCost:10240,parallelism:1}}},ThingVotesUp:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votesup"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingVotesDown:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votesdown"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingData:{title:"Unsigned Thing Data",description:"This is the actual content of a thing",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/data"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}],required:["thingId"]},properties:{kind:{$ref:"#/definitions/thingKind"},title:{type:"string",minLength:1,maxLength:s.Constants.MAX_THING_TITLE_SIZE},topic:{$ref:"#/definitions/topicName"},body:{type:["null","string"],maxLength:s.Constants.MAX_THING_BODY_SIZE},author:{$ref:"#/definitions/seaAlias"},authorId:{$ref:"#/definitions/seaAuthorId"},opId:{$ref:"#/definitions/thingId"},replyToId:{$ref:"#/definitions/thingId"},domain:{$ref:"#/definitions/domainName"},url:{$ref:"#/definitions/url"},timestamp:{$ref:"#/definitions/timestamp"}},thingDataHashMatchesSoul:!0},ThingDataSigned:{title:"Signed Thing Data",description:"This is the actual content of a thing, cryptographically signed",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/data~:authorId."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["thingId","authorId"]},properties:{kind:{sea:{$ref:"schema.json#/definitions/thingKind"}},title:{sea:{type:"string",minLength:1,maxLength:s.Constants.MAX_THING_TITLE_SIZE}},topic:{sea:{$ref:"schema.json#/definitions/topicName"}},body:{sea:{type:["null","string"],maxLength:s.Constants.MAX_THING_BODY_SIZE}},author:{sea:{$ref:"schema.json#/definitions/seaAlias"}},authorId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},replyToId:{sea:{$ref:"schema.json#/definitions/thingId"}},domain:{sea:{$ref:"schema.json#/definitions/domainName"}},url:{sea:{$ref:"schema.json#/definitions/url"}},timestamp:{sea:{$ref:"schema.json#/definitions/timestamp"}}}},ThingVoteCounts:{title:"Thing Vote Counts",description:"Aggregated counts from a tabulator",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votecounts@~:tabulator."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},tabulator:{$ref:"schema.json#/definitions/seaAuthorId"}}},properties:{up:{sea:{type:["number","string"]}},down:{sea:{type:["number","string"]}},comment:{sea:{type:["number","string"]}},score:{sea:{type:["number","string"]}},commands:{sea:{type:["object","string"]}}}},ListingData:{$async:!0,title:"Listing Node Data",description:"Shared description of listing properties",type:"object",properties:{ids:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_IDS_SIZE}},source:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},name:{sea:{type:["string","null"],maxLength:s.Constants.MAX_TOPIC_SIZE}},submitTopic:{sea:{type:"string",maxLength:s.Constants.MAX_TOPIC_SIZE}},tabs:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_TABS_SIZE}},curators:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},censors:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},userId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},isChat:{sea:{type:["boolean","string"]}}},patternProperties:{"^d+$":{sea:{type:"string"}}}},sortName:{type:"string",enum:["new","old","active","top","comments","discussed","hot","best","controversial","random","firehose","chat"]},TopicListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/t/:topic/:sort@~:indexer."),properties:{topic:{$ref:"schema.json#/definitions/topicName"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},DomainListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/domain/:domain/:sort@~:indexer."),properties:{domain:{$ref:"schema.json#/definitions/domainName"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},ThingCommentsListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/comments/:sort@~:indexer."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},userListingType:{type:"string",enum:["overview","submitted","comments","commands","commented"]},AuthorRepliesListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/replies/:type/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorProfileListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/:type/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},SpaceListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/spaces/:name/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},name:{$ref:"schema.json#/definitions/topicName"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorComments:{title:"Author's Comments",description:"All of an authors comments should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/comments~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorSubmissions:{title:"Author's Submissions",description:"All of an author's submissions should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/submissions~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}},AuthorThings:{title:"Author's Things",description:"All of an author's things should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/things~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorPages:{title:"Author Page Map",description:"Mapping of page names to things",soul:{pattern:"".concat(s.Constants.PREFIX,"/pages~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}}},l=o.keys(p).reduce(function(e,t){var n=o.path([t,"soul","pattern"],p);return n?o.assoc(t,new i.default(n),e):e}),d={...o.compose(o.reduce(function(e,t){var n=c(t,2),r=n[0],i=n[1];return o.assoc(r,o.assoc("route",i,o.prop(r,p)),e)},{}),o.toPairs)(l),definitions:p,routes:l};t.Schema=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return c.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return p.ThingDataNode}}),t.Thing=void 0;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=n(1),a=(r=n(16))&&r.__esModule?r:{default:r},s=n(19),u=n(2),c=n(28),p=n(29);function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var d=o.curry(function(e,t){t.timestamp=t.timestamp||(new Date).getTime();var n=(0,a.default)(t),r=t.timestamp,o=t.kind,i=t.topic,s=t.authorId,c=t.opId,p=t.replyToId,l=(0,a.default)({timestamp:r,kind:o,topic:i,authorId:s,opId:c,replyToId:p,originalHash:n}),d=e.gun.get(u.Schema.Thing.route.reverse({thingId:l})),f=s?u.Schema.ThingDataSigned.route.reverse({thingId:l,authorId:s}):u.Schema.ThingData.route.reverse({thingId:n}),h={id:l,timestamp:r,kind:o,originalHash:n,data:{"#":f},votesup:{"#":u.Schema.ThingVotesUp.route.reverse({thingId:l})},votesdown:{"#":u.Schema.ThingVotesDown.route.reverse({thingId:l})},allcomments:{"#":u.Schema.ThingAllComments.route.reverse({thingId:l})},comments:{"#":u.Schema.ThingComments.route.reverse({thingId:l})}};return i&&(h.topic={"#":u.Schema.Topic.route.reverse({topicName:i})}),s&&(h.author={"#":"~".concat(s)}),c&&(h.op={"#":u.Schema.Thing.route.reverse({thingId:c})}),p&&(h.replyTo={"#":u.Schema.Thing.route.reverse({thingId:p})}),e.gun.get(f).put(t),d.put(h),e.index(l,t),d}),f=o.curry(function(e,t){var n=t.timestamp||(new Date).getTime(),r=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),t.domain&&(t.domain=t.domain.toLowerCase().trim()),r&&(t.author=r.alias,t.authorId=r.pub);var o=d(e,{...t,timestamp:n,kind:"submission"});if(r){var i=u.Schema.AuthorThings.route.reverse({authorId:r.pub}),a=u.Schema.AuthorSubmissions.route.reverse({authorId:r.pub}),s=e.gun.get(i),c=e.gun.get(a);e.gun.user().get("things").put(s),e.gun.user().get("submissions").put(c),s.set(o),c.set(o)}return o}),h=o.curry(function(e,t){var n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);var r=d(e,{...t,kind:"comment"});if(n){var o=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),i=u.Schema.AuthorComments.route.reverse({authorId:n.pub}),a=e.gun.get(o),s=e.gun.get(i);e.gun.user().get("things").put(a),e.gun.user().get("comments").put(s),a.set(r),s.set(r)}return r}),g=o.curry(function(e,t){var n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);var r=d(e,{...t,kind:"chatmsg"});if(n){var o=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),i=e.gun.get(o);e.gun.user().get("things").put(i),i.set(r)}return r}),m=o.curry(function(e,t,n){var r,o=e.isLoggedIn();if(!o)return i.Promise.reject("not logged in");var a=u.Schema.AuthorPages.route.reverse({authorId:o.pub}),s=e.gun.get(a).get(t);return s.then(function(i){if(i&&i.data)console.log("res",i),s.get("data").get("body").put(n);else{var a={body:n,title:t,kind:"wikipage",author:o.alias,authorId:o.pub};console.log("page data",a),r=d(e,a),s.put(r)}})}),y=o.curry(function(e,t,n,r){return e.gun.get(u.Schema["up"===n?"ThingVotesUp":"ThingVotesDown"].route.reverse({thingId:t})).get(r).put("1")}),v={chatmsg:"chat:",comment:"comments:"},b=o.curry(function(e,t,n){if(n.topic||n.opId)if(!n.opId||n.topic){var r=e.gun.get(u.Schema.Thing.route.reverse({thingId:t})),o=l(c.ThingSet.dayStr(n.timestamp).split("/"),3),i=o[0],a=o[1],p=o[2],d=v[n.kind]||"",f=d+n.topic.toLowerCase().trim(),h=e.gun.get(u.Schema.Topic.route.reverse({topicName:f})),g=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:f,year:i,month:a,day:p}));if(!n.skipAll&&"all"!==n.topic){var m="".concat(d,"all"),y=e.gun.get(u.Schema.Topic.route.reverse({topicName:m})),O=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:m,year:i,month:a,day:p}));y.set(r),O.set(r)}if("submission"===n.kind){var I=n.url?(0,s.parse)(n.url):{},S=(n.url?(I.host||I.scheme||"").replace(/^www\./,""):"self.".concat(n.topic)).toLowerCase();if(e.gun.get(u.Schema.Domain.route.reverse({domainName:S})).set(r),n.url)e.gun.get(u.Schema.URL.route.reverse({url:n.url})).set(r)}if(n.opId)e.gun.get(u.Schema.ThingAllComments.route.reverse({thingId:n.opId})).set(r);if(n.replyToId||n.opId)e.gun.get(u.Schema.ThingComments.route.reverse({thingId:n.replyToId||n.opId})).set(r);h.set(r),g.set(r)}else e.gun.get(u.Schema.Thing.route.reverse({thingId:n.opId})).get("data").on(function(r){r&&(b(e,t,{...n,topic:r.topic||"all"}),this.off())})}),O={put:d,submit:f,comment:h,chat:g,writePage:m,vote:y,index:b};t.Thing=O},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Config=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(7);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var a={tabulator:o.Constants.DEV_INDEXER,indexer:o.Constants.DEV_INDEXER,owner:o.Constants.DEV_INDEXER,update:r.compose(r.map(function(e){var t=i(e,2),n=t[0],r=t[1];return a[n]=r}),r.toPairs)};t.Config=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(7),a=n(4);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function u(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var c,p,l=[0,1,2,3],d=l[0],f=l[1],h=l[2],g=r.map(r.prop(f)),m=r.map(r.slice(1,3)),y=r.propOr("","source"),v=r.curry(function(e,t){return"".concat(i.Constants.PREFIX).concat(t,"@~").concat(e,".")}),b=r.curry(function(e,t){return r.compose(r.ifElse(r.prop("length"),r.insert(0,parseInt(t,10)),r.always(null)),function(e){return e[1]=parseFloat(e[1]),e},r.map(r.trim),r.split(","),r.propOr("","".concat(t)))(e)}),O=r.compose(r.filter(r.compose(function(e){return!(0!==e&&!e)},parseInt)),r.keys),I=function(e){return r.compose(r.map(b(e)),O)(e)},S=r.compose(g,I),P=r.sortWith([r.ascend(r.compose(r.cond([[r.isNil,r.always(1/0)],[r.T,parseFloat]]),r.prop(h)))]),j=r.compose(r.map(r.prop(f)),P,r.filter(r.identity),I),w=(c=regeneratorRuntime.mark(function e(t){var n,o,i,a,u,c,p,l,g,m,y,v,O,I,S,j,w,T,_,L,A,D,E,M,x,C,N,q,k,R,$,F,X,V,Z,G,U,H,K,Q,z,B,W,Y=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=Y.length>1&&void 0!==Y[1]?Y[1]:[],o=Y.length>2&&void 0!==Y[2]?Y[2]:[],i=Y.length>3&&void 0!==Y[3]?Y[3]:{},a=i.maxSize,u=void 0===a?1e3:a,c=r.indexBy(r.identity,o),p={},l={},g=[],m={},y=[],v=0,e.t0=regeneratorRuntime.keys(t||{});case 11:if((e.t1=e.t0()).done){e.next=25;break}if(O=e.t1.value,(I=parseInt(O,10))||0===I){e.next=16;break}return e.abrupt("continue",11);case 16:S=b(t,O)||[I,null,null],j=s(S,3),w=j[0],T=j[1],_=void 0===T?null:T,L=j[2],A=void 0===L?null:L,S[h]=null===A?null:parseFloat(A),_&&c[_]&&(S[f]=S[h]=null),_&&(p[_]=S),S[f]?g.push(S):y.push(S),w>v&&(v=w),e.next=11;break;case 25:D=0;case 26:if(!(D<n.length)){e.next=35;break}if(E=n[D]||[null,null],M=s(E,2),x=M[0],C=M[1],x){e.next=30;break}return e.abrupt("continue",32);case 30:(N=p[x])?N[h]!==C&&(N[h]=C,m[x]=!0):(q=[null,x,C],g.push(q));case 32:D++,e.next=26;break;case 35:for(k=P(g),R=u?k.slice(0,u):k,$=u?k.slice(u,k.length):[],F=r.filter(function(e){return null===e[d]},R),y=y.concat(r.filter(function(e){return null!==e[d]},$)).reverse(),X=0;X<R.length;X++)V=R[X][f],Z=R[X][d],G=R[X][h],null!==Z&&m[V]&&(l["".concat(Z)]=[V,G].join(","));for(U=[];F.length;)H=F.pop(),K=y.pop(),Q=s(K||[null],1),null===(z=Q[0])&&(z=parseInt(v,10)+U.length+1,U.push(z)),l["".concat(z)]=[H[f],H[h]].join(",");for(;y.length;)(B=y.pop())&&!B[f]&&(W="".concat(B[d]),null!==t[W]&&(l[W]=null,console.log("nulling",W,t[W])));return e.abrupt("return",r.keys(l).length?l:null);case 45:case"end":return e.stop()}},e,this)}),p=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=c.apply(e,t);function i(e){u(o,n,r,i,a,"next",e)}function a(e){u(o,n,r,i,a,"throw",e)}i(void 0)})},function(e){return p.apply(this,arguments)}),T=r.compose(r.uniqBy(r.prop(f)),P,r.reduce(r.concat,[]),r.map(I)),_=(0,o.query)(function(e,t){return Promise.all(r.map(function(t){return e.get(t)})).then(T)}),L=(0,o.query)(function(e,t,n){var r=(n||{}).indexer,o=void 0===r?a.Config.indexer:r;return _(e,[v(o,t)]).then(g)},"listingIds"),A={POS_IDX:d,POS_ID:f,POS_VAL:h,source:y,getRow:b,itemKeys:O,rows:I,ids:S,rowsToIds:g,rowsToItems:m,sortRows:P,sortedIds:j,soulFromPath:v,read:L,diff:w,categorizeDiff:function(e,t){for(var n=O(r.mergeLeft(e,t)),o=[],i=[],a=0;a<n.length;a++){var u=n[a],c=s(b(e,u)||[],2),p=(c[0],c[1]),l=s(b(t,u),2),d=(l[0],l[1]);p!==d&&(p&&o.push(p),d&&i.push(d))}return[o,i]},unionRows:T};t.ListingNode=A},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSpec=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(5),a=n(21),s=n(12),u=n(11),c=n(8);var p={fromSource:r.compose(r.apply(r.mergeLeft),r.ap([u.ListingFilter.fromDefinition,r.identity]),r.of,r.apply(r.assoc("dataSource")),r.ap([s.ListingDataSource.fromDefinition,r.identity]),r.of,a.ListingDefinition.fromSource),getSource:(0,o.query)(function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return c.Query.getWikiPage(e,t,n).then(r.compose(function(e){return"".concat(e,"\n# added by indexer\n").concat(o||"","\nsourced from page ").concat(t," ").concat(n,"\n")},i.ListingNode.body))})};t.ListingSpec=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Constants=void 0;var r={COMMAND_RE:/^ {4}~/,PREFIX:"nab",SOUL_DELIMETER:"|~~|",LISTING_SIZE:1e3,MAX_HASH_SIZE:64,MAX_POW_NONCE_SIZE:64,MAX_TOPIC_SIZE:42,MAX_AUTHOR_ALIAS_SIZE:256,MAX_AUTHOR_ID_SIZE:128,MAX_URL_SIZE:2048,MAX_DOMAIN_SIZE:256,MAX_THING_KIND_SIZE:16,MAX_THING_TITLE_SIZE:300,MAX_THING_BODY_SIZE:5e4,MAX_LISTING_IDS_SIZE:5e4,MAX_LISTING_SOURCE_SIZE:5e4,MAX_LISTING_TABS_SIZE:5e3,MAX_LISTING_SOUL_PREFIX_SIZE:42,MAX_LISTING_SOUL_IDENTIFIER_SIZE:128,MAX_LISTING_SOUL_SORT_SIZE:16,MAX_LISTING_SOUL_TYPE_SIZE:42,MAX_LISTING_SOUL_KIND_SIZE:16,DEFAULT_INDEXER:"CEyKrDd1xyPXpWSV00MgvnZY2VJLHXgzCvhMeDwKTYA.yjSq0DyXzzhB_ZXr_DzfJgij3tXU0-3t0Q5bJAtZpj8",DEV_INDEXER:"l2nSedlSlvomTqCYhmPnANoQLXe4sj5rR2OrC7YqPpU.zimaWwdlfyTrVITgwWoDVdbJQKReOTqV5zNjTRc-yQA"};t.Constants=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(7),a=n(2),s=n(3),u=n(5);function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var d=(0,o.resolve)(null),f=r.reduce(r.union,[]),h=function(e){for(var t=(e||{}).topics,n=void 0===t?["all"]:t,o=r.propOr(365,"days",e)||365,a=[],u=(new Date).getTime()-864e5*parseInt(o,10),c=0;c<=o+1;c++)a.push(s.ThingSet.dayStr(u+864e5*c));return Object.keys(n.reduce(function(e,t){return a.reduce(function(e,n){return e["".concat(i.Constants.PREFIX,"/topics/").concat(t,"/days/").concat(n)]=!0,e},e)},{}))},g=(0,o.query)(function(e,t){var n=h({...t,topics:[t.topic]}),r=[],a=i.Constants.LISTING_SIZE;"new"===t.sort?a=i.Constants.LISTING_SIZE:("top"===t.sort&&(a*=3),"all"===t.topic&&(a*=3));return function t(){var i=n.pop();return r.length>a||!i?(0,o.resolve)(r):e.get(i).souls().then(function(e){return r=[].concat(l(r),l(e)),t()})}()}),m=(0,o.query)(function(e,t){var n=t.domain;return e.get(a.Schema.Domain.route.reverse({domainName:n})).souls()}),y=(0,o.query)(function(e,t){return(0,o.all)([t.type&&"submitted"!==t.type&&"overview"!==t.type?(0,o.resolve)([]):e.get(t.authorId).get("submissions").souls(),t.type&&"comments"!==t.type&&"overview"!==t.type&&"commands"!==t.type?(0,o.resolve)([]):e.get(t.authorId).get("comments").souls()]).then(function(e){var t=p(e,2),n=t[0],r=t[1];return f([n,r])})}),v=(0,o.query)(function(e,t){return e.get(t).then(u.ListingNode.sortedIds)},"listingIds"),b=(0,o.query)(function(e,t){var n=t.listing,o=t.sort,s=t.indexer;return v(e,"".concat(i.Constants.PREFIX).concat(n,"/").concat(o,"@~").concat(s,".")).then(r.compose(r.map(function(e){return a.Schema.Thing.route.reverse({thingId:e})}),r.filter(r.identity)))}),O=(0,o.query)(function(e,t){var n=t.repliesToAuthorId,r=t.type,i=void 0===r?"overview":r,a=c(t,["repliesToAuthorId","type"]);return b(e,{listing:"/user/".concat(n,"/").concat(i),sort:"new",...a}).then(function(t){return(0,o.all)(t.map(function(t){return e.get("".concat(t,"/comments")).souls()})).then(f)})}),I=(0,o.query)(function(e,t){return e.get(a.Schema.ThingAllComments.route.reverse({thingId:t.submissionId})).souls(r.prepend(a.Schema.Thing.route.reverse({thingId:t.submissionId})))}),S=(0,o.query)(function(e,t){return e.get(t).then(function(e){if(!e||!e.id)return null;var t={id:e.id,timestamp:parseFloat(e.timestamp,10)},n=r.path(["replyTo","#"],e),o=r.path(["op","#"],e),i=o?a.Schema.Thing.route.match(o).thingid:null,s=n?a.Schema.Thing.route.match(n).thingid:null;return i&&(t.opId=i),s&&(t.replyToId=s),t})}),P=function(e){return(0,o.query)(function(t,n){return t.get(n).get(e).count()})},j=P("votesup"),w=P("votesdown"),T=(0,o.query)(function(e,t){return e.get("".concat(t,"/allcomments")).count()}),_=(0,o.query)(function(e,t){return(0,o.all)([j(e,t),w(e,t),T(e,t)]).then(function(e){var t=p(e,3),n=t[0],r=t[1];return{up:n,down:r,comment:t[2],score:n-r}})}),L=(0,o.query)(function(e,t){var n=t.thingSoul,r=t.tabulator,i=t.data,a=void 0!==i&&i,s=t.scores,u=void 0!==s&&s;return(0,o.all)([S(e,n),u?r?e.get("".concat(n,"/votecounts@~").concat(r,".")).then():_(e,n).then():(0,o.resolve)(),a?e.get(n).get("data").then():(0,o.resolve)()]).then(function(e){var t=p(e,3),n=t[0],r=t[1],o=t[2];return n&&n.id?{...n,votes:r,data:o}:null})}),A=(0,o.query)(function(e,t){return(0,o.all)(r.reduce(function(n,r){return r?(n.push(L(e,{...t,thingSoul:r})),n):n},[],r.propOr([],"thingSouls",t)))}),D=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:f;return(0,o.query)(function(a,s){var u=r.prop(t,s);return r.isNil(u)?d:(0,o.all)(r.map(function(t){return e(a,(r={...s},i=t,(o=n)in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r));var r,o,i},r.propOr([],t,s))).then(i)})},E=D(g,"topics","topic"),M=D(m,"domains","domain"),x=D(y,"authorIds","authorId"),C=D(I,"submissionIds","submissionId"),N=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return(0,o.all)([x(e,{type:"comments",authorIds:t}).then(function(e){return function(t){return(0,o.all)(t.filter(function(e){return!!e}).map(function(t){return e.get(t).get("data").then(function(e){return e})}))}}(e)).then(r.compose(r.map(n?r.prop("opId"):r.prop("replyToId")),r.filter(r.prop("replyToId")))),x(e,{type:"submitted",authorIds:t}).then(r.map(function(e){return a.Schema.Thing.route.match(e).thingId}))]).then(function(e){var t=p(e,2),n=t[0],o=t[1];return r.uniq([].concat(l(n),l(o)))})}),q=(0,o.query)(function(e,t,n){return t&&n?e.get(a.Schema.ThingVoteCounts.route.reverse({thingId:n,tabulator:t})).then():(0,o.resolve)()},"thingScores"),k=(0,o.query)(function(e,t){return e.get(a.Schema.ThingComments.route.reverse({thingId:t})).then()}),R=(0,o.query)(function(e,t){return t?e.get(a.Schema.Thing.route.reverse({thingId:t})).get("data"):(0,o.resolve)(null)},"thingData"),$=(0,o.query)(function(e,t){return e.get(a.Schema.AuthorPages.route.reverse({authorId:t}))},"userPages"),F=(0,o.query)(function(e,t,n){return e.get(a.Schema.AuthorPages.route.reverse({authorId:t})).get(n).get("id")},"wikiPageId"),X=(0,o.query)(function(e,t,n){return F(e,t,n).then(function(t){return t&&R(e,t)})}),V=(0,o.query)(function(e,t){return e.get(t).then(function(e){return{userAlias:r.prop("alias",e),createdAt:r.path(["_",">","pub"],e)}})},"userMeta"),Z=r.curry(function(e,t){return(0,o.scope)(r.assoc("gun",e.gun,t||{}))}),G={singleTopic:g,singleDomain:m,singleAuthor:y,singleListing:b,repliesToAuthor:O,singleSubmission:I,computeThingScores:_,thingMeta:L,multiThingMeta:A,multiTopic:E,multiDomain:M,multiAuthor:x,multiSubmission:C,thingScores:q,thingReplies:k,thingData:R,topicSouls:h,userPages:$,wikiPageId:F,wikiPage:X,userMeta:V,createScope:Z,curated:N};t.Query=G},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=(r=n(18))&&r.__esModule?r:{default:r};var a=o.compose(o.sortBy(o.identity),o.filter(o.identity),o.map(o.trim),o.split("+"),o.toLower,o.trim,o.defaultTo("")),s={splitDomains:a,splitTopics:o.compose(o.ifElse(o.prop("length"),o.identity,o.always(["all"])),a),withRoute:function(e){return o.assoc("route",new i.default(e.path),e)}};t.Path=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GunNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));var o=r.pathOr("",["_","#"]),i=r.pathOr({},["_",">"]);var a={soul:o,state:i,latest:r.compose(r.last,r.sortBy(r.identity),r.values,i),edges:r.compose(r.map(r.prop("#")),r.values),decodeSEA:function(e){var t=e?{...e}:e,n=r.path(["_","#"],t);return n&&Gun.SEA&&-1!==n.indexOf("~")?(r.without(["_"],r.keys(t)).forEach(function(r){Gun.SEA.verify(Gun.SEA.opt.pack(e[r],r,e,n),!1,function(n){return t[r]=Gun.SEA.opt.unpack(n,r,e)})}),t):e}};t.GunNode=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingFilter=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(7),i=n(2),a=n(8),s=n(3),u=n(5),c=n(12);function p(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function l(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){p(i,r,o,a,s,"next",e)}function s(e){p(i,r,o,a,s,"throw",e)}a(void 0)})}}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var f,h=function(e){return r.compose(parseInt,r.path(e))},g={fromDefinition:function(e){var t=e.filters,n=e.voteFilters,i=e.isPresent,a=e.itemSource,u=[],c=[],p=function(){return u.push(r.compose.apply(r,arguments))},l=function(){return c.push(r.compose.apply(r,arguments))};t.allow.aliases.length&&p(function(e){return!!i(["alias",e])},r.path(["data","author"])),t.allow.authors.length&&p(function(e){return!!i(["author",e])},r.path(["data","authorId"])),t.allow.domains.length&&p(function(e){return!!i(["domain",e])},s.ThingDataNode.domain),t.allow.topics.length&&"topic"!==a&&p(function(e){return!!i(["topic",e])},r.path(["data","topic"])),t.allow.topics.length&&!r.find(r.compose(r.identical("all"),r.last,r.split(":")),t.allow.topics)&&p(function(e){return!!i(["topic",e])},r.path(["data","topic"])),t.allow.kinds.length&&p(function(e){return!!i(["kind",e])},r.path(["data","kind"])),"commands"===t.allow.type&&p(r.compose(r.test(o.Constants.COMMAND_RE),r.path(["data","body"]))),t.deny.aliases.length&&p(function(e){return!i(["ban","alias",e])},r.path(["data","author"])),t.deny.authors.length&&p(function(e){return!i(["ban","author",e])},r.path(["data","authorId"])),t.deny.domains.length&&p(function(e){return!e||!i(["ban","domain",e])},s.ThingDataNode.domain),t.deny.topics.length&&p(function(e){return!i(["ban","topic",e])},r.path(["data","topic"])),t.deny.anon&&p(r.path(["data","authorId"])),t.deny.signed&&p(r.compose(function(e){return!e},r.path(["data","authorId"]))),null!==n.upsMin&&l(r.lte(n.upsMin),h(["votes","up"])),null!==n.upsMax&&l(r.gte(n.upsMax),h(["votes","up"])),null!==n.downsMin&&l(r.lte(n.downsMin),h(["votes","down"])),null!==n.downsMax&&l(r.gte(n.downsMax),h(["votes","down"])),null!==n.scoreMin&&l(r.lte(n.scoreMin),h(["votes","score"])),null!==n.scoreMax&&l(r.gte(n.scoreMax),h(["votes","score"])),t.deny.tags.length&&l(function(e){var n=r.path(["votes","commands"],e)||{};return!t.deny.tags.find(function(e){var t=d(e,2),o=t[0],i=t[1];return!!r.path([i,"tag",o],n)})});var f=function(e){return!u.find(function(t){return!t(e)})},g=function(e){return!c.find(function(t){return!t(e)})};return{thingFilter:function(e){return f(e)&&g(e)},contentFilter:f,voteFilter:g}},getFilteredIds:(f=l(regeneratorRuntime.mark(function e(t,n){var o,i,a,s,c,p,d,f,h,g,m=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o=m.length>2&&void 0!==m[2]?m[2]:{},i=o.limit,a=void 0===i?25:i,s=o.count,c=void 0===s?0:s,p=o.after,void 0===p?null:p,d=o.filterFn,f=n.slice(),h=[],g=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:25;return Promise.all(r.map((e=l(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!0,!d){e.next=5;break}return e.next=4,d(t[u.ListingNode.POS_ID]);case 4:n=e.sent;case 5:n&&h.push(t);case 6:case"end":return e.stop()}},e,this)})),function(t){return e.apply(this,arguments)}),f.splice(c,c+t)))};case 4:if(!f.length){e.next=11;break}return e.next=7,g();case 7:if(!(a&&h.length>=a)){e.next=9;break}return e.abrupt("break",11);case 9:e.next=4;break;case 11:return e.abrupt("return",r.compose(r.map(r.prop(u.ListingNode.POS_ID)),a?r.slice(0,a):r.identity,r.sortBy(r.prop(u.ListingNode.POS_VAL)))(h));case 12:case"end":return e.stop()}},e,this)})),function(e,t){return f.apply(this,arguments)}),thingFilter:r.curry(function(e,t,n){return a.Query.thingMeta(e,{tabulator:t.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:n}),scores:c.ListingDataSource.needsScores(t),data:c.ListingDataSource.needsData(t)}).then(t.thingFilter)})};t.ListingFilter=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDataSource=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(2),s=n(8),u=n(13);var c=(0,o.query)(function(e,t,n){return o.Promise.all(r.map(function(t){return u.ListingSort.itemFromSoul(e,t,n)},t)).then(u.ListingSort.sortItems)}),p=(0,o.query)(function(e,t,n){return o.Promise.all(r.map(e.get,t)).then(r.reduce(r.mergeRight,{})).then(i.ThingSet.souls).then(function(t){return c(e,t,n)})}),l=function(e){var t=e.sort,n=r.path(["filters","allow","topics"],e)||[];return{listingPaths:r.map(function(e){return"/t/".concat(e,"/").concat(t)},n),query:function(r){return s.Query.multiTopic(r,{topics:n,sort:t}).then(function(t){return c(r,t,e)})}}},d={listing:function(e){var t=r.pathOr([],["filters","allow","listings"],e),n=e.sort;return{listingPaths:r.map(function(e){return"".concat(e,"/").concat(n)},t)}},replies:function(e){var t=e.sort,n=r.path(["filters","allow","repliesTo"],e),o=r.path(["filters","allow","type"],e);return{listingPaths:["/user/".concat(n,"/replies/").concat(o,"/").concat(t)],query:function(t){return s.Query.repliesToAuthor(t,{type:o,repliesToAuthorId:n,indexer:e.indexer}).then(function(n){return c(t,n,e)})}}},op:function(e){var t=e.sort,n=r.path(["filters","allow","ops"],e);n.length||l(e);return{listingPaths:r.map(function(e){return"/things/".concat(e,"/comments/").concat(t)},n),query:function(t){return s.Query.multiSubmission(t,{submissionIds:n}).then(function(n){return c(t,n,e)})}}},curator:function(e){var t=e.sort,n=r.prop("curators",e)||[];if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/user/".concat(e,"/commented/").concat(t)},n),query:function(t){return s.Query.curate(t,n,!0).then(function(e){return e.map(function(e){return a.Schema.Thing.route.reverse({thingId:e})})}).then(function(n){return c(t,n,e)})}}},author:function(e){var t=e.sort,n=r.path(["filters","allow","authors"],e),o=r.path(["filters","allow","type"],e);if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/user/".concat(e,"/").concat(o,"/").concat(t)},n),query:function(t){return s.Query.multiAuthor(t,{type:o,authorIds:n}).then(function(n){return c(t,n,e)})}}},domain:function(e){var t=e.sort,n=r.path(["filters","allow","domains"],e)||[];if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/domain/".concat(e,"/").concat(t)},n),query:function(r){return s.Query.multiDomain(r,{domains:n,sort:t}).then(function(t){return c(r,t,e)})}}},topic:l},f=r.keys(d),h={fromDefinition:function(e){return r.mergeLeft({name:(t=e,r.find(t.isPresent,f)||"topic")},d[name](e));var t},sources:d,needsScores:function(e){return!!r.find(e.isPresent,["sort hot","sort top","sort best","sort controversial","ups","downs","score","can remove"])},needsData:function(e){return!!r.find(e.isPresent,["topic","domain","author","unique by content","kind","type","require signed","require anon","alias","ban domain","ban topic","ban author","ban alias"])},itemsFromThingSets:p,itemsFromThingSouls:c};t.ListingDataSource=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSort=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(2),a=n(3),s=n(8);var u=r.map(r.prop(0)),c=r.sortWith(r.prop(1)),p=function(e){return(0,o.query)(function(t,n,a){return a.isIdSticky(n)?(0,o.resolve)(-1/0):r.contains(n,a.filters.allow.ops)?(0,o.resolve)(-1/0):s.Query.thingMeta(t,{tabulator:a.tabulator,scores:!0,thingSoul:i.Schema.Thing.route.reverse({thingId:n})}).then(function(t){return e(t,a)})})},l=function(e){return(0,o.query)(function(t,n,r){return s.Query.thingMeta(t,{tabulator:r.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:n})}).then(e)})},d={new:l(r.compose(r.multiply(-1),function(e){return e||(new Date).getTime()},r.prop("timestamp"))),old:l(r.prop("timestamp")),active:p(function(e){var t=e.timestamp;return-1*(e.lastActive||t)}),top:p(r.compose(function(e){return-1*parseInt(e,10)},r.pathOr(0,["votes","score"]))),comments:p(r.compose(function(e){return-1*parseFloat(e,10)},r.pathOr(0,["votes","comment"]))),discussed:p(function(e){var t=r.prop("timestamp",e),n=parseInt(r.pathOr(0,["votes","comment"],e),10),o=t/1e3-1134028003,i=Math.log10(Math.max(Math.abs(n),1));return n?-1*(i+o/45e3):1e9-o}),hot:p(function(e){var t=r.prop("timestamp",e),n=parseInt(r.pathOr(0,["votes","score"],e),10),o=t/1e3-1134028003,i=0;return n>0?i=1:n<0&&(i=-1),-1*(i*Math.log10(Math.max(Math.abs(n),1))+o/45e3)}),best:p(function(e){var t=parseInt(r.pathOr(0,["votes","up"],e),10),n=t+parseInt(r.pathOr(0,["votes","down"],e),10);if(0===n)return 0;var o=1.281551565545,i=t/n;return(i+1/(2*n)*o*o-o*Math.sqrt(i*(1-i)/n+o*o/(4*n*n)))/(1+1/n*o*o)*-1}),controversial:p(function(e){var t=parseInt(r.pathOr(0,["votes","up"],e),10),n=parseInt(r.pathOr(0,["votes","down"],e),10);if(t<=0||n<=0)return 0;var o=t+n,i=t>n?n/t:t/n;return-1*Math.pow(o,i)})},f=(0,o.query)(function(e,t,n){return(d[n.sort]||d.new)(t,n).then(function(e){return[t,e]})}),h=(0,o.query)(function(e,t,n){return(0,o.all)(r.map(function(t){return f(e,t,n)},t))}),g=(0,o.query)(function(e,t,n){return(0,o.all)(r.map(e.get,t)).then(r.pipe(a.ThingSet.union,a.ThingSet.ids,function(t){return h(e,t,n)})).then(c)}),m={POS_ID:0,POS_VAL:1,sorts:d,toItem:f,toItems:h,toIds:u,sortItems:c,fromThingSets:g};t.ListingSort=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingOracle=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(10),i=n(2),a=n(3),s=n(5),u=n(13);function c(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function p(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){c(i,r,o,a,s,"next",e)}function s(e){c(i,r,o,a,s,"throw",e)}a(void 0)})}}var l,d,f=(l=p(regeneratorRuntime.mark(function e(t,n,r,o){var i,a,c,p,l,d=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(i=d.length>4&&void 0!==d[4]?d[4]:[],a=d.length>5&&void 0!==d[5]?d[5]:[],i.length||a.length){e.next=4;break}return e.abrupt("return");case 4:return e.next=6,t.newScope().get(n.soul);case 6:return c=e.sent,e.next=9,u.ListingSort.toItems(r,i,o);case 9:p=e.sent,(l=s.ListingNode.diff(c,p,a))&&console.log("CHANGES",n.soul,l),l&&n.write(l);case 13:case"end":return e.stop()}},e,this)})),function(e,t,n,r){return l.apply(this,arguments)}),h=(d=p(regeneratorRuntime.mark(function e(t,n,s){var u,c,p,l,d,h,g,m,y;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return u=s.sort,c=s.updatedSoul,p=s.diff,l=[],d=t.newScope(),h=i.Schema.ThingVoteCounts.route.match(c)||{},g=h.thingId,m=r.equals(n.match.thingId||null),g&&l.push(g),l=r.concat(l,a.ThingSet.ids(o.GunNode.decodeSEA(p))),e.next=9,f(t,n,d,u,l,[],m);case 9:for(y in d.getAccesses())t.listen(y,n.soul);case 10:case"end":return e.stop()}},e,this)})),function(e,t,n){return d.apply(this,arguments)}),g={updateListing:f,onPut:h};t.ListingOracle=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validation=t.suppressor=void 0;var r,o=c(n(0)),i=(r=n(16))&&r.__esModule?r:{default:r},a=n(26),s=c(n(17)),u=n(2);function c(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=function(e,t){var n=o.path(["data","#"],t),r=o.without(["comments","allcomments","votesup","votesdown"],o.keys(o.path(["_",">"],t))).map(function(e){return o.path(["_",">",e],t)}).sort().pop(),i=(e.ThingData.route.match(n)||{}).thingId,a=o.prop("id",t);return a&&a===i&&r&&r<1543102814945},d=function(e,t){var n=o.prop("id",t);return n&&n===(0,i.default)({authorId:(o.path(["author","#"],t)||"").substr(1)||void 0,timestamp:parseInt(o.prop("timestamp",t),10),kind:o.prop("kind",t),topic:o.prop("topicName",u.Schema.Topic.route.match(o.path(["topic","#"],t))),opId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["op","#"],t))),replyToId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["replyTo","#"],t))),originalHash:o.prop("originalHash",t)})},f=function(e,t){var n=(o.path(["author","#"],t)||"").substr(1)||void 0,r=o.prop("authorId",u.Schema.ThingDataSigned.route.match(o.path(["data","#"],t)));return n&&n===r},h=function(e,t){var n=o.prop("originalHash",t),r=o.prop("thingId",u.Schema.ThingData.route.match(o.path(["data","#"],t)));return r&&r===n},g=function(e){return function(t,n,r,i,a){var s=(u.Schema.Thing.route.match(o.path(["_","#"],a)||"")||{}).thingId,c=u.Schema[t].route.match(o.prop("#",n)||"").thingId;return!(!s||s!==c)&&e.compile({$ref:"schema.json#/definitions/".concat(t,"Edge")})(n)}},m=function(e,t){var n=t||{},r=(n._,p(n,["_"]));r.timestamp=parseFloat(r.timestamp,10);var a=(u.Schema.ThingData.route.match(o.path(["_","#"],t)||"")||{}).thingId;return a&&a===(0,i.default)(r)},y=function(e,t,n,r){var o,i=t||{},a=i.algorithm,s=void 0===a?"argon2d":a,u=i.config,c=void 0===u?{}:u,p=Buffer.hasOwnProperty("from")?Buffer.from(r,"hex"):new Buffer(r,"hex"),l=Buffer.hasOwnProperty("from")?Buffer.from(p,"hex"):new Buffer(p,"hex"),d=e.hash(n,{salt:l,hashLength:c.hashLength,timeCost:c.timeCost,memoryCost:c.memoryCost,parallelism:c.parallelism,raw:!0,type:e[s]}),f=0;for(o=0;o<=c.complexity-8;o+=8,f++)if(0!==d[f])return!1;var h=255<<8+o-c.complexity;return 0==(d[f]&h)},v=function(e,t){var r=n(27);if(!r)return!0;var i=(e||{}).algorithm,a=void 0===i?"argon2d":i,s=o.path(["_","#"],t);if("argon2d"!==a)throw new Error("Only argon2 supported for vote hashes");return o.without(["_"],o.keys(t)).forEach(function(n){y(r,e,s,n)||(console.log("invalid vote",s,n),delete t[n])}),!0},b=o.compose(function(e){return e.addKeyword("isLegacyThing",{validate:l}),e.addKeyword("thingHashMatchesSoul",{validate:d}),e.addKeyword("signedThingDataMatchesThing",{validate:f}),e.addKeyword("thingDataMatchesOriginalHash",{validate:h}),e.addKeyword("thingRelatedEdge",{validate:g(e)}),e.addKeyword("thingDataHashMatchesSoul",{validate:m}),e.addKeyword("keysAreProofsOfWork",{validate:v,modifying:!0}),e},s.initAjv),O=(0,a.createSuppressor)({definitions:u.Schema.definitions,init:b});t.suppressor=O;var I=o.curry(function(e,t){return t.on("in",function(t){var n=this,r=t._;(delete t._,"ping"in t||"leech"in t)||(t.put&&!o.keys(t.put).length||(e.config.disableValidation?Promise.resolve(t):O.validate(t)).then(function(e){return e?(t._=r,n.to.next(t)):console.log("msg didn't validate",t)}).catch(function(e){return console.error("validate err",t,e.stack||e)}))})}),S={isLegacyThing:l,thingHashMatchesSoul:d,signedThingDataMatches:f,thingDataMatchesOriginalHash:h,getIsThingRelatedEdge:g,thingDataHashMatches:m,isVoteValid:y,keysAreProofsOfWork:v,initAjv:b,suppressor:O,gunWireInput:I};t.Validation=S},function(e,t){e.exports=n},function(e,t){e.exports=r},function(e,t){e.exports=o},function(e,t){e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingType=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(33),i=n(34),a=n(35),s=n(36),u=n(37),c=n(38);var p=[o.TopicListing,i.DomainListing,a.CommentListing,s.SpaceListing,u.InboxListing,c.ProfileListing],l={...p,types:p,fromPath:function(e){for(var t,n=0;n<p.length;n++)if(t=p[n].route.match(e))return r.assoc("match",t,p[n]);return null}};t.ListingType=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDefinition=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(22),i=n(4);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s={fromSource:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=o.Tokenizer.tokenize(e),u={...s},c=s.isPresent,p=s.getValue,l=s.getValues,d=s.getValueChain,f=s.getPairs,h=a(d("sourced from page"),2),g=h[0];u.fromPageAuthor=void 0===g?t:g;var m=h[1];return u.fromPageName=void 0===m?n?"space:".concat(n):void 0:m,u.displayName=s.getValue("name")||n,u.indexer=p("tabulator")||i.Config.indexer,u.tabulator=p("tabulator")||u.indexer,u.tabs=f("tab"),u.sort=p("sort"),u.uniqueByContent=!!c("unique by content"),u.curators=l("curator"),u.moderators=l("mod"),u.includeRanks=!!c("show ranks"),u.stickyIds=l("sticky"),u.isIdSticky=function(e){return!!s.isPresent(["sticky",e])},u.submitTopics=l("submit to"),u.submitTopic=p("submit to"),u.chatTopic=p("chat in"),t&&n&&(u.spaceName=n,u.owner=t,u.useForComments=!s.isPresent("comments leave space"),u.path="/user/".concat(t,"/spaces/").concat(n),u.defaultTab=s.getValue("tab"),u.defaultTabPath=u.defaultTab?s.getValue(["tab",u.defaultTab]):null),u.filters={functions:[],allow:{repliesTo:p("replies to author"),type:p("type"),ops:l("op"),aliases:l("alias"),authors:l("author"),domains:l("domain"),topics:l("topic"),listings:l("listing"),kinds:l("kind"),anon:!c("require signed"),signed:!c("require anon")},deny:{aliases:l("ban alias"),authors:l("ban author"),domains:l("ban domain"),topics:l("ban topic"),anon:!!c("require signed"),signed:!!c("require anon"),tags:f("can remove")}},u.voteFilters={functions:[],upsMin:parseInt(p("ups above"),10)||null,upsMax:parseInt(p("ups below"),10)||null,downsMin:parseInt(p("downs above"),10)||null,downsMax:parseInt(p("downs below"),10)||null,scoreMin:parseInt(p("score above"),10)||null,scoreMax:parseInt(p("score below"),10)||null},u.censors=r.uniq(r.map(r.prop(1),u.filters.deny.tags)),u}};t.ListingDefinition=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tokenizer=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i={tokenize:function(e){var t=(e||"").split("\n").reduce(function(e,t){var n=t.trim().split(" ").map(r.trim).filter(function(e){return e});return n.length?r.assocPath(n,{},e):e},{}),n=function(e){var n=e;return"string"==typeof e&&(n=e.split(" ")),n&&r.path(n,t)},i=function(e){return r.keysIn(n(e))},a=function(e){return i(e)[0]||null};return{source:e,isPresent:n,getValue:a,getValues:i,getLastValue:function(e){return i(e).pop()||null},getValueChain:function(e){for(var t="string"==typeof e?e.split(" "):e,n=[],r=e;r;)(r=a([].concat(o(t),n)))&&n.push(r);return n},getPairs:function(e){var t="string"==typeof e?e.split(" "):e;return i(t).reduce(function(e,n){var r=a([].concat(o(t),[n]));return[].concat(o(e),[[n,r]])},[])}}}};t.Tokenizer=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceSpec=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(22),s=n(3),u=n(6);var c=["hot","new","discussed","controversial","top"],p=r.curry(function(e,t,n){var r=[n||""],o=a.Tokenizer.tokenize(n);o.getValue("tab")||c.map(function(n){return r.push("tab ".concat(n," /user/").concat(e,"/spaces/").concat(t,"/").concat(n))});var s=o.getValue("indexer");return s||(r.push("indexer ".concat(i.Config.indexer)),s=i.Config.indexer),o.getValue("tabulator")||r.push("tabulator ".concat(s)),r.join("\n")}),l=(0,o.query)(function(e,t,n){return u.ListingSpec.getSource(e,t,function(e){return"space:".concat(e)}(n))}),d=(0,o.query)(function(e,t,n){return l.then(r.compose(p(t,n),s.ThingDataNode.body))}),f={tabs:c,getSource:d};t.SpaceSpec=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Peer",{enumerable:!0,get:function(){return r.Peer}}),Object.defineProperty(t,"Constants",{enumerable:!0,get:function(){return o.Constants}}),Object.defineProperty(t,"Listing",{enumerable:!0,get:function(){return i.Listing}}),Object.defineProperty(t,"Query",{enumerable:!0,get:function(){return a.Query}}),Object.defineProperty(t,"Schema",{enumerable:!0,get:function(){return s.Schema}}),Object.defineProperty(t,"Thing",{enumerable:!0,get:function(){return u.Thing}}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return u.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return u.ThingDataNode}}),Object.defineProperty(t,"Validation",{enumerable:!0,get:function(){return c.Validation}}),t.default=void 0;var r=n(25),o=n(7),i=n(31),a=n(8),s=n(2),u=n(3),c=n(15),p=r.Peer.init;t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Peer=void 0;var r=n(15),o=n(8),i=n(3),a=n(30);function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u={init:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t||{},u=n.leech,c=n.disableValidation,p=n.noGun,l=n.localStorage,d=n.persist,f=s(n,["leech","disableValidation","noGun","localStorage","persist"]),h={config:t};if(!p){var g={localStorage:!!l,radisk:!!d,...f};d&&(g.localStorage=!1),c||e.on("opt",r.Validation.gunWireInput(h)),g.storeFn&&(g.store=g.storeFn(g)),h.gun=e(g),g.localStorage&&h.gun.on("localStorage:error",function(e){return e.retry({})}),u&&h.gun._.on("out",{leech:!0})}return h.newScope=o.Query.createScope(h),h.onLogin=a.Authentication.onLogin(h),h.signup=a.Authentication.signup(h),h.login=a.Authentication.login(h),h.logout=function(){return a.Authentication.logout(h)},h.isLoggedIn=function(){return a.Authentication.isLoggedIn(h)},h.submit=i.Thing.submit(h),h.comment=i.Thing.comment(h),h.chat=i.Thing.chat(h),h.writePage=i.Thing.writePage(h),h.vote=i.Thing.vote(h),h.queries=o.Query,h}};t.Peer=u},function(e,t){e.exports=a},function(e,t){e.exports=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingSet=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(2),i=n(10);var a=i.GunNode.edges;var s={ids:r.compose(r.filter(r.identity),r.map(r.compose(r.prop("thingId"),o.Schema.Thing.route.match.bind(o.Schema.Thing.route))),i.GunNode.edges),union:r.compose(r.dissoc("_"),r.reduce(r.mergeRight,{})),souls:a,dayStr:function(e){var t=new Date(e||(new Date).getTime()),n=t.getUTCFullYear(),r=t.getUTCMonth()+1,o=t.getUTCDate();return"".concat(n,"/").concat(r,"/").concat(o)}};t.ThingSet=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingDataNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(19);var i=r.propOr("","body"),a=r.propOr("","url"),s={body:i,domain:r.compose(function(e){if(!e)return"";var t=(0,o.parse)(e);return(t.host||t.scheme||"").replace(/^www\./,"")},a)};t.ThingDataNode=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Authentication=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1);var i={signup:r.curry(function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return new o.Promise(function(i,a){if(e&&e.gun&&e.gun.user){var s=e.user();o.Promise.resolve(s.create(t,n,function(r){r.err?(a(r.err),s.leave(),e.gun.user().leave()):e.login(t,n).then(i)},r))}else a("SEA is not loaded")})}),login:r.curry(function(e,t,n){return new o.Promise(function(r,o){e&&e.gun&&e.gun.user?e.user().auth(t,n,function(t){return t.err?o(t.err):r(e.user().is)}):o("SEA is not loaded")}).then(function(t){return e._onLogin&&e._onLogin(t),t})}),logout:function(e){return e.gun.user().leave()},isLoggedIn:function(e){return e.gun&&e.gun.user&&e.user().is},onLogin:r.curry(function(e,t){return e._onLogin=t})};t.Authentication=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ListingQuery",{enumerable:!0,get:function(){return r.ListingQuery}}),Object.defineProperty(t,"ListingDataSource",{enumerable:!0,get:function(){return o.ListingDataSource}}),Object.defineProperty(t,"ListingDefinition",{enumerable:!0,get:function(){return i.ListingDefinition}}),Object.defineProperty(t,"ListingFilter",{enumerable:!0,get:function(){return a.ListingFilter}}),Object.defineProperty(t,"ListingNode",{enumerable:!0,get:function(){return s.ListingNode}}),Object.defineProperty(t,"ListingOracle",{enumerable:!0,get:function(){return u.ListingOracle}}),Object.defineProperty(t,"ListingSort",{enumerable:!0,get:function(){return c.ListingSort}}),Object.defineProperty(t,"ListingSpec",{enumerable:!0,get:function(){return p.ListingSpec}}),Object.defineProperty(t,"ListingType",{enumerable:!0,get:function(){return l.ListingType}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return d.SpaceSpec}}),t.Listing=void 0;var r=n(32),o=n(12),i=n(21),a=n(11),s=n(5),u=n(14),c=n(13),p=n(6),l=n(20),d=n(23),f={fromSpec:r.ListingQuery.fromSpec,fromPath:r.ListingQuery.fromPath};t.Listing=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingQuery=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(5),a=n(11),s=n(20);var u=(0,o.query)(function(e,t,n){var o=a.ListingFilter.thingFilter(e,t),s=r.pathOr([],["dataSource","listingPaths"],t),u=r.map(i.ListingNode.soulFromPath(n.indexer||t.indexer),s);return i.ListingNode.getRowsFromSouls(e,u).then(function(t){return a.ListingFilter.getFilteredIds(e,t,{...n,filterFn:o})})}),c=(0,o.query)(function(e,t,n){var r=s.ListingType.fromPath(t);return r?r.getSpec(e,t).then(function(o){return o.hasIndexer&&!n.calculate?r&&r.read?r.read(e,r.match,n):i.ListingNode.read(e,t,n):u(e,o,n)}):Promise.resolve([])}),p={fromSpec:u,fromPath:c};t.ListingQuery=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TopicListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(9),s=n(6);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["hot","new","discussed","controversial","top","firehose"],p=(0,o.query)(function(e,t){var n=t.topic,o=t.sort,p=a.Path.splitTopics(n),l="all"===p[0]?"whatever":p[0];return s.ListingSpec.getSource(e,i.Config.indexer,"listing:topic",["name ".concat(n),"submit to ".concat(l),"sort ".concat(o),-1===n.indexOf(":")?"kind submission":""].concat(u(r.map(function(e){return"topic ".concat(e)},p)),u(r.map(function(e){return"tab ".concat(e," /t/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/t/:topic/:sort",getSource:p,getSpec:l});t.TopicListing=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomainListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(9),s=n(6);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["hot","new","discussed","controversial","top"],p=(0,o.query)(function(e,t){var n=t.domain,o=t.sort,p=a.Path.splitTopics(n);return s.ListingSpec.getSource(e,i.Config.indexer,"listing:domain",["name ".concat(p[0]),"submit to whatever","sort ".concat(o),"kind submission"].concat(u(r.map(function(e){return"domain ".concat(e)},p)),u(r.map(function(e){return"tab ".concat(e," /domain/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/domain/:domain/:sort",tabs:c,getSource:p,getSpec:l});t.DomainListing=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentListing=void 0;var r=n(1),o=n(4),i=n(9),a=n(6),s=(0,r.query)(function(e,t){var n=t.thingId,r=t.sort;return a.ListingSpec.getSource(e,o.Config.indexer,"listing:comments",["op ".concat(n),"sort ".concat(r)].join("\n"))}),u=i.Path.withRoute({path:"/things/:thingId/comments/:sort",getSpec:s});t.CommentListing=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(2),s=n(10),u=n(9),c=n(5),p=n(11),l=n(6),d=n(14),f=n(23);function h(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var m,y,v=(0,o.query)(function(e,t){var n=t.authorId,r=t.name,o=t.sort;return f.SpaceSpec.getSource(e,n,r,"sort ".concat(o))}),b=(0,o.query)(function(e,t){return v(e,t).then(function(e){return l.ListingSpec.fromSource(e,t.authorId,t.name)})}),O=(0,o.query)(function(e,t,n){var r={authorId:t.authorId,name:t.name,sort:t.sort,indexer:i.Config.indexer},s=[a.Schema.SpaceListing.route.reverse(r)];return(0,o.all)([b(e,t),c.ListingNode.getRowsFromSouls(e,s)]).then(function(t){var r=g(t,2),o=r[0],i=r[1],a=p.ListingFilter.thingFilter(e,o);return p.ListingFilter.getFilteredIds(e,i,{...n,filterFn:a})})}),I=(m=regeneratorRuntime.mark(function e(t,n,o){var i,u,p,l,f,h,m,y,v,O,I,S,P,j,w,T,_,L,A,D;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=o.updatedSoul,u=o.diff,p=o.original,l=o.latest,void 0===l?0:l,f=t.newScope(),h=s.GunNode.decodeSEA(p),m=s.GunNode.decodeSEA(u),y=c.ListingNode.categorizeDiff(m,h),v=g(y,2),O=v[0],I=v[1],e.next=7,b(f,n.match);case 7:return S=e.sent,P=a.Schema.ThingVoteCounts.route.match(i),j=a.Schema.Thing.route.match(i),w=a.Schema.ThingDataSigned.route.match(i)||{},T=w.thingId,_=a.Schema.SEAAuthor.route.match(i),P&&O.push(P.thingId),j&&O.push(j.thingId),T&&T!==S.fromPageId&&O.push(T),e.next=17,d.ListingOracle.updateListing(t,n,f,S,O,I);case 17:for(L in f.getAccesses())t.listen(L,n.soul);if(!(r.prop("size",p)||O.length||I.length||_)){e.next=20;break}return e.abrupt("return");case 20:return console.log("---STANDARD SPACE UPDATE---",n.soul,i),e.next=23,t.newScope().get(n.soul);case 23:A=e.sent,(D=c.ListingNode.itemKeys(A)).length&&n.write({size:0,...D.reduce(function(e,t){return e["".concat(t)]=null,e},{})}),t.work({id:"update:".concat(n.soul),soul:n.soul,method:"doUpdate",priority:n.priority||50});case 27:case"end":return e.stop()}},e,this)}),y=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=m.apply(e,t);function i(e){h(o,n,r,i,a,"next",e)}function a(e){h(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t,n){return y.apply(this,arguments)}),S=u.Path.withRoute({path:"/user/:authorId/spaces/:name/:sort",calculate:O,getSource:v,getSpec:b,onPut:I});t.SpaceListing=S},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InboxListing=void 0;var r=n(1),o=n(4),i=n(10),a=n(2),s=n(3),u=n(9),c=n(6),p=n(5),l=n(14);function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var h,g,m=(0,r.query)(function(e,t){var n=t.authorId,r=t.type,i=t.sort,a=void 0===i?"new":i;return c.ListingSpec.getSource(e,o.Config.indexer,"listing:inbox",["replies to author ".concat(n),"type ".concat(r),"sort ".concat(a)].join("\n"))}),y=(0,r.query)(function(e,t){return m(e,t).then(c.ListingSpec.fromSource)}),v=(h=regeneratorRuntime.mark(function e(t,n,r){var o,u,c,f,h,g,m,v,b,O,I,S;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r.updatedSoul,o=r.diff,u=t.newScope(),c=i.GunNode.decodeSEA(o),f=p.ListingNode.categorizeDiff(c),h=d(f,1),g=h[0],e.next=6,y(u,n.match);case 6:m=e.sent,v=s.ThingSet.ids(c),b=0;case 9:if(!(b<g.length)){e.next=20;break}return O=g[b],e.t0=s.ThingSet,e.next=14,u.get(a.Schema.ThingComments.route.reverse({thingId:O})).then();case 14:e.t1=e.sent,I=e.t0.ids.call(e.t0,e.t1),v=v.concat(I);case 17:b++,e.next=9;break;case 20:if(!v.length){e.next=23;break}return e.next=23,l.ListingOracle.updateListing(t,n,u,m,v,[]);case 23:for(S in u.getAccesses())t.listen(S,n.soul);case 24:case"end":return e.stop()}},e,this)}),g=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=h.apply(e,t);function i(e){f(o,n,r,i,a,"next",e)}function a(e){f(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t,n){return g.apply(this,arguments)}),b=u.Path.withRoute({path:"/user/:authorId/replied/:type/:sort",getSource:m,getSpec:y,onPut:v});t.InboxListing=b},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProfileListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(9),s=n(6);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["overview","comments","submitted","commands"],p=(0,o.query)(function(e,t){var n=t.authorId,o=t.type,a=t.sort;return s.ListingSpec.getSource(e,i.Config.indexer,"listing:profile",["author ".concat(n),"type ".concat(o),"submit to whatever","sort ".concat(a)].concat(u(r.map(function(e){return"tab ".concat(e," /user/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/user/:authorId/:type/:sort",tabs:c,getSource:p,getSpec:l});t.ProfileListing=d}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,