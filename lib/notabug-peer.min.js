!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):"function"==typeof define&&define.amd?define("notabug-peer",["ramda","gun-scope","object-hash","gun-suppressor-sear","route-parser","uri-js","gun-suppressor","argon2"],t):"object"==typeof exports?exports["notabug-peer"]=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):e["notabug-peer"]=t(e.ramda,e["gun-scope"],e["object-hash"],e["gun-suppressor-sear"],e["route-parser"],e["uri-js"],e["gun-suppressor"],e.argon2)}("undefined"!=typeof self?self:this,function(e,t,n,r,o,i,a,s){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=24)}([function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Schema=void 0;var r,o=u(n(0)),i=(r=n(18))&&r.__esModule?r:{default:r},a=u(n(17)),s=n(7);function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var p={...a.AUTH_SCHEMA,topicName:{type:"string",minLength:1,maxLength:s.Constants.MAX_TOPIC_SIZE},TopicDay:{title:"Topic Day",description:"A single day of things in a topic",soul:{pattern:"".concat(s.Constants.PREFIX,"/topics/:topicName/days/:year/:month/:day"),properties:{topicName:{$ref:"schema.json#/definitions/topicName"},year:{type:"number",minimum:2018,maximum:2100},month:{type:"number",minimum:1,maximum:12},day:{type:"number",minimum:1,maximum:31}},required:["topicName","year","month","day"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},Topic:{title:"Topic",description:"All things in a topic",soul:{pattern:"".concat(s.Constants.PREFIX,"/topics/:topicName"),properties:{topicName:{$ref:"schema.json#/definitions/topicName"}},required:["topicName"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},domainName:{type:"string",minLength:1,maxLength:s.Constants.MAX_DOMAIN_SIZE},Domain:{title:"Domain",description:"All things in a domain",soul:{pattern:"".concat(s.Constants.PREFIX,"/domains/:domainName"),properties:{domainName:{$ref:"schema.json#/definitions/domainName"}},required:["domainName"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},url:{type:["null","string"],maxLength:s.Constants.MAX_URL_SIZE},URL:{title:"URL",description:"All things for a given URL",soul:{pattern:"".concat(s.Constants.PREFIX,"/urls/*url"),properties:{url:{$ref:"schema.json#/definitions/url"}},required:["url"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},thingId:{type:"string",maxLength:s.Constants.MAX_HASH_SIZE},thingSoul:{properties:{thingId:{"#ref":"#definitions/thingId"}}},ThingAllComments:{title:"Thing All Comments",description:"All comments for a given submission",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/allcomments"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},ThingComments:{title:"Thing Comments",description:"Direct replies to a thing",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/comments"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},timestamp:{type:["number","string"]},thingKind:{type:"string",maxLength:s.Constants.MAX_THING_KIND_SIZE},Thing:{title:"Thing Reference",description:"These are submissions, comments, chat messages and wiki pages",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},propsFromSoul:{id:"thingId"},properties:{id:{$ref:"#/definitions/thingId"},kind:{"#ref":"#/definitions/thingKind"},timestamp:{$ref:"#/definitions/timestamp"},originalHash:{$ref:"#/definitions/thingId"},data:{oneOf:[{$ref:"#/definitions/ThingDataEdge"},{$ref:"#/definitions/ThingDataSignedEdge"}]},topic:{anyOf:[{$ref:"#/definitions/TopicEdge"},{description:"Some old things had generic topic souls",type:"object",additionalProperties:!1,properties:{"#":{type:"string",maxLength:42}},required:["#"]}]},domain:{$ref:"#/definitions/DomainEdge"},url:{$ref:"#/definitions/URLEdge"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"},op:{$ref:"#/definitions/ThingEdge"},replyTo:{$ref:"#/definitions/ThingEdge"},author:{$ref:"#/definitions/SEAAuthorEdge"}},anyOf:[{allOf:[{thingHashMatchesSoul:!0},{anyOf:[{signedThingDataMatchesThing:!0},{thingDataMatchesOriginalHash:!0}]}]},{isLegacyThing:!0},{additionalProperties:!1,description:"Self verifying can be updated in isolation",properties:{id:{$ref:"#/definitions/thingId"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"}}}]},ProofOfWorkVotes:{$async:!0,keysAreProofsOfWork:{algorithm:"argon2d",config:{complexity:6,hashLength:32,timeCost:1,memoryCost:10240,parallelism:1}}},ThingVotesUp:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votesup"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingVotesDown:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votesdown"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingData:{title:"Unsigned Thing Data",description:"This is the actual content of a thing",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/data"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}],required:["thingId"]},properties:{kind:{$ref:"#/definitions/thingKind"},title:{type:"string",minLength:1,maxLength:s.Constants.MAX_THING_TITLE_SIZE},topic:{$ref:"#/definitions/topicName"},body:{type:["null","string"],maxLength:s.Constants.MAX_THING_BODY_SIZE},author:{$ref:"#/definitions/seaAlias"},authorId:{$ref:"#/definitions/seaAuthorId"},opId:{$ref:"#/definitions/thingId"},replyToId:{$ref:"#/definitions/thingId"},domain:{$ref:"#/definitions/domainName"},url:{$ref:"#/definitions/url"},timestamp:{$ref:"#/definitions/timestamp"}},thingDataHashMatchesSoul:!0},ThingDataSigned:{title:"Signed Thing Data",description:"This is the actual content of a thing, cryptographically signed",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/data~:authorId."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["thingId","authorId"]},properties:{kind:{sea:{$ref:"schema.json#/definitions/thingKind"}},title:{sea:{type:"string",minLength:1,maxLength:s.Constants.MAX_THING_TITLE_SIZE}},topic:{sea:{$ref:"schema.json#/definitions/topicName"}},body:{sea:{type:["null","string"],maxLength:s.Constants.MAX_THING_BODY_SIZE}},author:{sea:{$ref:"schema.json#/definitions/seaAlias"}},authorId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},replyToId:{sea:{$ref:"schema.json#/definitions/thingId"}},domain:{sea:{$ref:"schema.json#/definitions/domainName"}},url:{sea:{$ref:"schema.json#/definitions/url"}},timestamp:{sea:{$ref:"schema.json#/definitions/timestamp"}}}},ThingVoteCounts:{title:"Thing Vote Counts",description:"Aggregated counts from a tabulator",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votecounts@~:tabulator."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},tabulator:{$ref:"schema.json#/definitions/seaAuthorId"}}},properties:{up:{sea:{type:["number","string"]}},down:{sea:{type:["number","string"]}},comment:{sea:{type:["number","string"]}},score:{sea:{type:["number","string"]}},commands:{sea:{type:["object","string"]}}}},ListingData:{$async:!0,title:"Listing Node Data",description:"Shared description of listing properties",type:"object",properties:{ids:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_IDS_SIZE}},source:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},name:{sea:{type:["string","null"],maxLength:s.Constants.MAX_TOPIC_SIZE}},submitTopic:{sea:{type:"string",maxLength:s.Constants.MAX_TOPIC_SIZE}},tabs:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_TABS_SIZE}},curators:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},censors:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},userId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},isChat:{sea:{type:["boolean","string"]}}},patternProperties:{"^d+$":{sea:{type:"string"}}}},sortName:{type:"string",enum:["new","old","active","top","comments","discussed","hot","best","controversial","random","firehose","chat"]},TopicListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/t/:topic/:sort@~:indexer."),properties:{topic:{$ref:"schema.json#/definitions/topicName"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},DomainListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/domain/:domain/:sort@~:indexer."),properties:{domain:{$ref:"schema.json#/definitions/domainName"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},ThingCommentsListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/comments/:sort@~:indexer."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},userListingType:{type:"string",enum:["overview","submitted","comments","commands","commented"]},AuthorRepliesListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/replies/:type/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorProfileListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/:type/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},SpaceListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/spaces/:name/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},name:{$ref:"schema.json#/definitions/topicName"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorComments:{title:"Author's Comments",description:"All of an authors comments should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/comments~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorSubmissions:{title:"Author's Submissions",description:"All of an author's submissions should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/submissions~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}},AuthorThings:{title:"Author's Things",description:"All of an author's things should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/things~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorPages:{title:"Author Page Map",description:"Mapping of page names to things",soul:{pattern:"".concat(s.Constants.PREFIX,"/pages~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}}},l=o.keys(p).reduce(function(e,t){var n=o.path([t,"soul","pattern"],p);return n?o.assoc(t,new i.default(n),e):e}),d={...o.compose(o.reduce(function(e,t){var n=c(t,2),r=n[0],i=n[1];return o.assoc(r,o.assoc("route",i,o.prop(r,p)),e)},{}),o.toPairs)(l),definitions:p,routes:l};t.Schema=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return c.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return p.ThingDataNode}}),t.Thing=void 0;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=n(1),a=(r=n(16))&&r.__esModule?r:{default:r},s=n(19),u=n(2),c=n(28),p=n(29);function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var d=o.curry(function(e,t){t.timestamp=t.timestamp||(new Date).getTime();var n=(0,a.default)(t),r=t.timestamp,o=t.kind,i=t.topic,s=t.authorId,c=t.opId,p=t.replyToId,l=(0,a.default)({timestamp:r,kind:o,topic:i,authorId:s,opId:c,replyToId:p,originalHash:n}),d=e.gun.get(u.Schema.Thing.route.reverse({thingId:l})),f=s?u.Schema.ThingDataSigned.route.reverse({thingId:l,authorId:s}):u.Schema.ThingData.route.reverse({thingId:n}),h={id:l,timestamp:r,kind:o,originalHash:n,data:{"#":f},votesup:{"#":u.Schema.ThingVotesUp.route.reverse({thingId:l})},votesdown:{"#":u.Schema.ThingVotesDown.route.reverse({thingId:l})},allcomments:{"#":u.Schema.ThingAllComments.route.reverse({thingId:l})},comments:{"#":u.Schema.ThingComments.route.reverse({thingId:l})}};return i&&(h.topic={"#":u.Schema.Topic.route.reverse({topicName:i})}),s&&(h.author={"#":"~".concat(s)}),c&&(h.op={"#":u.Schema.Thing.route.reverse({thingId:c})}),p&&(h.replyTo={"#":u.Schema.Thing.route.reverse({thingId:p})}),e.gun.get(f).put(t),d.put(h),e.index(l,t),d}),f=o.curry(function(e,t){var n=t.timestamp||(new Date).getTime(),r=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),t.domain&&(t.domain=t.domain.toLowerCase().trim()),r&&(t.author=r.alias,t.authorId=r.pub);var o=d(e,{...t,timestamp:n,kind:"submission"});if(r){var i=u.Schema.AuthorThings.route.reverse({authorId:r.pub}),a=u.Schema.AuthorSubmissions.route.reverse({authorId:r.pub}),s=e.gun.get(i),c=e.gun.get(a);e.gun.user().get("things").put(s),e.gun.user().get("submissions").put(c),s.set(o),c.set(o)}return o}),h=o.curry(function(e,t){var n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);var r=d(e,{...t,kind:"comment"});if(n){var o=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),i=u.Schema.AuthorComments.route.reverse({authorId:n.pub}),a=e.gun.get(o),s=e.gun.get(i);e.gun.user().get("things").put(a),e.gun.user().get("comments").put(s),a.set(r),s.set(r)}return r}),g=o.curry(function(e,t){var n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);var r=d(e,{...t,kind:"chatmsg"});if(n){var o=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),i=e.gun.get(o);e.gun.user().get("things").put(i),i.set(r)}return r}),m=o.curry(function(e,t,n){var r,o=e.isLoggedIn();if(!o)return i.Promise.reject("not logged in");var a=u.Schema.AuthorPages.route.reverse({authorId:o.pub}),s=e.gun.get(a).get(t);return s.then(function(i){if(i&&i.data)console.log("res",i),s.get("data").get("body").put(n);else{var a={body:n,title:t,kind:"wikipage",author:o.alias,authorId:o.pub};console.log("page data",a),r=d(e,a),s.put(r)}})}),y=o.curry(function(e,t,n,r){return e.gun.get(u.Schema["up"===n?"ThingVotesUp":"ThingVotesDown"].route.reverse({thingId:t})).get(r).put("1")}),v={chatmsg:"chat:",comment:"comments:"},b=o.curry(function(e,t,n){if(n.topic||n.opId)if(!n.opId||n.topic){var r=e.gun.get(u.Schema.Thing.route.reverse({thingId:t})),o=l(c.ThingSet.dayStr(n.timestamp).split("/"),3),i=o[0],a=o[1],p=o[2],d=v[n.kind]||"",f=d+n.topic.toLowerCase().trim(),h=e.gun.get(u.Schema.Topic.route.reverse({topicName:f})),g=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:f,year:i,month:a,day:p}));if(!n.skipAll&&"all"!==n.topic){var m="".concat(d,"all"),y=e.gun.get(u.Schema.Topic.route.reverse({topicName:m})),O=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:m,year:i,month:a,day:p}));y.set(r),O.set(r)}if("submission"===n.kind){var I=n.url?(0,s.parse)(n.url):{},S=(n.url?(I.host||I.scheme||"").replace(/^www\./,""):"self.".concat(n.topic)).toLowerCase();if(e.gun.get(u.Schema.Domain.route.reverse({domainName:S})).set(r),n.url)e.gun.get(u.Schema.URL.route.reverse({url:n.url})).set(r)}if(n.opId)e.gun.get(u.Schema.ThingAllComments.route.reverse({thingId:n.opId})).set(r);if(n.replyToId||n.opId)e.gun.get(u.Schema.ThingComments.route.reverse({thingId:n.replyToId||n.opId})).set(r);h.set(r),g.set(r)}else e.gun.get(u.Schema.Thing.route.reverse({thingId:n.opId})).get("data").on(function(r){r&&(b(e,t,{...n,topic:r.topic||"all"}),this.off())})}),O={put:d,submit:f,comment:h,chat:g,writePage:m,vote:y,index:b};t.Thing=O},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Config=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(7);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var a={tabulator:o.Constants.DEV_INDEXER,indexer:o.Constants.DEV_INDEXER,owner:o.Constants.DEV_INDEXER,update:r.compose(r.map(function(e){var t=i(e,2),n=t[0],r=t[1];return a[n]=r}),r.toPairs)};t.Config=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSpec=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(8),a=n(3),s=n(21),u=n(12),c=n(11);var p={fromSource:r.compose(r.apply(r.mergeLeft),r.ap([c.ListingFilter.fromDefinition,r.identity]),r.of,r.apply(r.assoc("dataSource")),r.ap([u.ListingDataSource.fromDefinition,r.identity]),r.of,s.ListingDefinition.fromSource),getSource:(0,o.query)(function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return i.Query.wikiPage(e,t,n).then(r.compose(function(e){return"".concat(e,"\n# added by indexer\n").concat(o||"","\nsourced from page ").concat(t," ").concat(n,"\n")},a.ThingDataNode.body))})};t.ListingSpec=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(7),a=n(4);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function u(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var c,p,l=[0,1,2,3],d=l[0],f=l[1],h=l[2],g=r.map(r.prop(f)),m=r.map(r.slice(1,3)),y=r.propOr("","source"),v=r.curry(function(e,t){return"".concat(i.Constants.PREFIX).concat(t,"@~").concat(e,".")}),b=r.curry(function(e,t){return r.compose(r.ifElse(r.prop("length"),r.insert(0,parseInt(t,10)),r.always(null)),function(e){return e[1]=parseFloat(e[1]),e},r.map(r.trim),r.split(","),r.propOr("","".concat(t)))(e)}),O=r.compose(r.filter(r.compose(function(e){return!(0!==e&&!e)},parseInt)),r.keys),I=function(e){return r.compose(r.map(b(e)),O)(e)},S=r.compose(g,I),P=r.sortWith([r.ascend(r.compose(r.cond([[r.isNil,r.always(1/0)],[r.T,parseFloat]]),r.prop(h)))]),w=r.compose(r.map(r.prop(f)),P,r.filter(r.identity),I),j=(c=regeneratorRuntime.mark(function e(t){var n,o,i,a,u,c,p,l,g,m,y,v,O,I,S,w,j,T,_,L,A,D,E,M,x,C,N,q,k,R,$,F,X,V,Z,G,U,H,K,Q,z,B,W,Y=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=Y.length>1&&void 0!==Y[1]?Y[1]:[],o=Y.length>2&&void 0!==Y[2]?Y[2]:[],i=Y.length>3&&void 0!==Y[3]?Y[3]:{},a=i.maxSize,u=void 0===a?1e3:a,c=r.indexBy(r.identity,o),p={},l={},g=[],m={},y=[],v=0,e.t0=regeneratorRuntime.keys(t||{});case 11:if((e.t1=e.t0()).done){e.next=25;break}if(O=e.t1.value,(I=parseInt(O,10))||0===I){e.next=16;break}return e.abrupt("continue",11);case 16:S=b(t,O)||[I,null,null],w=s(S,3),j=w[0],T=w[1],_=void 0===T?null:T,L=w[2],A=void 0===L?null:L,S[h]=null===A?null:parseFloat(A),_&&c[_]&&(S[f]=S[h]=null),_&&(p[_]=S),S[f]?g.push(S):y.push(S),j>v&&(v=j),e.next=11;break;case 25:D=0;case 26:if(!(D<n.length)){e.next=35;break}if(E=n[D]||[null,null],M=s(E,2),x=M[0],C=M[1],x){e.next=30;break}return e.abrupt("continue",32);case 30:(N=p[x])?N[h]!==C&&(N[h]=C,m[x]=!0):(q=[null,x,C],g.push(q));case 32:D++,e.next=26;break;case 35:for(k=P(g),R=u?k.slice(0,u):k,$=u?k.slice(u,k.length):[],F=r.filter(function(e){return null===e[d]},R),y=y.concat(r.filter(function(e){return null!==e[d]},$)).reverse(),X=0;X<R.length;X++)V=R[X][f],Z=R[X][d],G=R[X][h],null!==Z&&m[V]&&(l["".concat(Z)]=[V,G].join(","));for(U=[];F.length;)H=F.pop(),K=y.pop(),Q=s(K||[null],1),null===(z=Q[0])&&(z=parseInt(v,10)+U.length+1,U.push(z)),l["".concat(z)]=[H[f],H[h]].join(",");for(;y.length;)(B=y.pop())&&!B[f]&&(W="".concat(B[d]),null!==t[W]&&(l[W]=null,console.log("nulling",W,t[W])));return e.abrupt("return",r.keys(l).length?l:null);case 45:case"end":return e.stop()}},e,this)}),p=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=c.apply(e,t);function i(e){u(o,n,r,i,a,"next",e)}function a(e){u(o,n,r,i,a,"throw",e)}i(void 0)})},function(e){return p.apply(this,arguments)}),T=r.compose(r.uniqBy(r.prop(f)),P,r.reduce(r.concat,[]),r.map(I)),_=(0,o.query)(function(e,t){return Promise.all(r.map(e.get,t)).then(T)}),L=(0,o.query)(function(e,t,n){var r=(n||{}).indexer,o=void 0===r?a.Config.indexer:r;return _(e,[v(o,t)]).then(g)},"listingRows"),A={POS_IDX:d,POS_ID:f,POS_VAL:h,source:y,getRow:b,itemKeys:O,rows:I,ids:S,rowsToIds:g,rowsToItems:m,sortRows:P,sortedIds:w,soulFromPath:v,rowsFromSouls:_,read:L,diff:j,categorizeDiff:function(e,t){for(var n=O(r.mergeLeft(e,t)),o=[],i=[],a=0;a<n.length;a++){var u=n[a],c=s(b(e,u)||[],2),p=(c[0],c[1]),l=s(b(t,u),2),d=(l[0],l[1]);p!==d&&(p&&o.push(p),d&&i.push(d))}return[o,i]},unionRows:T};t.ListingNode=A},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Constants=void 0;var r={COMMAND_RE:/^ {4}~/,PREFIX:"nab",SOUL_DELIMETER:"|~~|",LISTING_SIZE:1e3,MAX_HASH_SIZE:64,MAX_POW_NONCE_SIZE:64,MAX_TOPIC_SIZE:42,MAX_AUTHOR_ALIAS_SIZE:256,MAX_AUTHOR_ID_SIZE:128,MAX_URL_SIZE:2048,MAX_DOMAIN_SIZE:256,MAX_THING_KIND_SIZE:16,MAX_THING_TITLE_SIZE:300,MAX_THING_BODY_SIZE:5e4,MAX_LISTING_IDS_SIZE:5e4,MAX_LISTING_SOURCE_SIZE:5e4,MAX_LISTING_TABS_SIZE:5e3,MAX_LISTING_SOUL_PREFIX_SIZE:42,MAX_LISTING_SOUL_IDENTIFIER_SIZE:128,MAX_LISTING_SOUL_SORT_SIZE:16,MAX_LISTING_SOUL_TYPE_SIZE:42,MAX_LISTING_SOUL_KIND_SIZE:16,DEFAULT_INDEXER:"CEyKrDd1xyPXpWSV00MgvnZY2VJLHXgzCvhMeDwKTYA.yjSq0DyXzzhB_ZXr_DzfJgij3tXU0-3t0Q5bJAtZpj8",DEV_INDEXER:"l2nSedlSlvomTqCYhmPnANoQLXe4sj5rR2OrC7YqPpU.zimaWwdlfyTrVITgwWoDVdbJQKReOTqV5zNjTRc-yQA"};t.Constants=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(7),a=n(2),s=n(3),u=n(6);function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var d=(0,o.resolve)(null),f=r.reduce(r.union,[]),h=function(e){for(var t=(e||{}).topics,n=void 0===t?["all"]:t,o=r.propOr(365,"days",e)||365,a=[],u=(new Date).getTime()-864e5*parseInt(o,10),c=0;c<=o+1;c++)a.push(s.ThingSet.dayStr(u+864e5*c));return Object.keys(n.reduce(function(e,t){return a.reduce(function(e,n){return e["".concat(i.Constants.PREFIX,"/topics/").concat(t,"/days/").concat(n)]=!0,e},e)},{}))},g=(0,o.query)(function(e,t){var n=h({...t,topics:[t.topic]}),r=[],a=i.Constants.LISTING_SIZE;"new"===t.sort?a=i.Constants.LISTING_SIZE:("top"===t.sort&&(a*=3),"all"===t.topic&&(a*=3));return function t(){var i=n.pop();return r.length>a||!i?(0,o.resolve)(r):e.get(i).souls().then(function(e){return r=[].concat(l(r),l(e)),t()})}()}),m=(0,o.query)(function(e,t){var n=t.domain;return e.get(a.Schema.Domain.route.reverse({domainName:n})).souls()}),y=(0,o.query)(function(e,t){return(0,o.all)([t.type&&"submitted"!==t.type&&"overview"!==t.type?(0,o.resolve)([]):e.get(t.authorId).get("submissions").souls(),t.type&&"comments"!==t.type&&"overview"!==t.type&&"commands"!==t.type?(0,o.resolve)([]):e.get(t.authorId).get("comments").souls()]).then(function(e){var t=p(e,2),n=t[0],r=t[1];return f([n,r])})}),v=(0,o.query)(function(e,t){return e.get(t).then(u.ListingNode.sortedIds)},"listingIds"),b=(0,o.query)(function(e,t){var n=t.listing,o=t.sort,s=t.indexer;return v(e,"".concat(i.Constants.PREFIX).concat(n,"/").concat(o,"@~").concat(s,".")).then(r.compose(r.map(function(e){return a.Schema.Thing.route.reverse({thingId:e})}),r.filter(r.identity)))}),O=(0,o.query)(function(e,t){var n=t.repliesToAuthorId,r=t.type,i=void 0===r?"overview":r,a=c(t,["repliesToAuthorId","type"]);return b(e,{listing:"/user/".concat(n,"/").concat(i),sort:"new",...a}).then(function(t){return(0,o.all)(t.map(function(t){return e.get("".concat(t,"/comments")).souls()})).then(f)})}),I=(0,o.query)(function(e,t){return e.get(a.Schema.ThingAllComments.route.reverse({thingId:t.submissionId})).souls(r.prepend(a.Schema.Thing.route.reverse({thingId:t.submissionId})))}),S=(0,o.query)(function(e,t){return e.get(t).then(function(e){if(!e||!e.id)return null;var t={id:e.id,timestamp:parseFloat(e.timestamp,10)},n=r.path(["replyTo","#"],e),o=r.path(["op","#"],e),i=o?a.Schema.Thing.route.match(o).thingid:null,s=n?a.Schema.Thing.route.match(n).thingid:null;return i&&(t.opId=i),s&&(t.replyToId=s),t})}),P=function(e){return(0,o.query)(function(t,n){return t.get(n).get(e).count()})},w=P("votesup"),j=P("votesdown"),T=(0,o.query)(function(e,t){return e.get("".concat(t,"/allcomments")).count()}),_=(0,o.query)(function(e,t){return(0,o.all)([w(e,t),j(e,t),T(e,t)]).then(function(e){var t=p(e,3),n=t[0],r=t[1];return{up:n,down:r,comment:t[2],score:n-r}})}),L=(0,o.query)(function(e,t){var n=t.thingSoul,r=t.tabulator,i=t.data,a=void 0!==i&&i,s=t.scores,u=void 0!==s&&s;return n?(0,o.all)([S(e,n),u?r?e.get("".concat(n,"/votecounts@~").concat(r,".")).then():_(e,n).then():(0,o.resolve)(),a?e.get(n).get("data").then():(0,o.resolve)()]).then(function(e){var t=p(e,3),n=t[0],r=t[1],o=t[2];return n&&n.id?{...n,votes:r,data:o}:null}):(0,o.resolve)(null)}),A=(0,o.query)(function(e,t){return(0,o.all)(r.reduce(function(n,r){return r?(n.push(L(e,{...t,thingSoul:r})),n):n},[],r.propOr([],"thingSouls",t)))}),D=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:f;return(0,o.query)(function(a,s){var u=r.prop(t,s);return r.isNil(u)?d:(0,o.all)(r.map(function(t){return e(a,(r={...s},i=t,(o=n)in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r));var r,o,i},r.propOr([],t,s))).then(i)})},E=D(g,"topics","topic"),M=D(m,"domains","domain"),x=D(y,"authorIds","authorId"),C=D(I,"submissionIds","submissionId"),N=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return(0,o.all)([x(e,{type:"comments",authorIds:t}).then(function(e){return function(t){return(0,o.all)(t.filter(function(e){return!!e}).map(function(t){return e.get(t).get("data").then(function(e){return e})}))}}(e)).then(r.compose(r.map(n?r.prop("opId"):r.prop("replyToId")),r.filter(r.prop("replyToId")))),x(e,{type:"submitted",authorIds:t}).then(r.map(function(e){return a.Schema.Thing.route.match(e).thingId}))]).then(function(e){var t=p(e,2),n=t[0],o=t[1];return r.uniq([].concat(l(n),l(o)))})}),q=(0,o.query)(function(e,t,n){return t&&n?e.get(a.Schema.ThingVoteCounts.route.reverse({thingId:n,tabulator:t})).then():(0,o.resolve)()},"thingScores"),k=(0,o.query)(function(e,t){return e.get(a.Schema.ThingComments.route.reverse({thingId:t})).then()}),R=(0,o.query)(function(e,t){return t?e.get(a.Schema.Thing.route.reverse({thingId:t})).get("data"):(0,o.resolve)(null)},"thingData"),$=(0,o.query)(function(e,t){return e.get(a.Schema.AuthorPages.route.reverse({authorId:t}))},"userPages"),F=(0,o.query)(function(e,t,n){return e.get(a.Schema.AuthorPages.route.reverse({authorId:t})).get(n).get("id")},"wikiPageId"),X=(0,o.query)(function(e,t,n){return F(e,t,n).then(function(t){return t&&R(e,t)})}),V=(0,o.query)(function(e,t){return e.get(t).then(function(e){return{userAlias:r.prop("alias",e),createdAt:r.path(["_",">","pub"],e)}})},"userMeta"),Z=r.curry(function(e,t){return(0,o.scope)(r.assoc("gun",e.gun,t||{}))}),G={singleTopic:g,singleDomain:m,singleAuthor:y,singleListing:b,repliesToAuthor:O,singleSubmission:I,computeThingScores:_,thingMeta:L,multiThingMeta:A,multiTopic:E,multiDomain:M,multiAuthor:x,multiSubmission:C,thingScores:q,thingReplies:k,thingData:R,topicSouls:h,userPages:$,wikiPageId:F,wikiPage:X,userMeta:V,createScope:Z,curated:N};t.Query=G},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=(r=n(18))&&r.__esModule?r:{default:r};var a=o.compose(o.sortBy(o.identity),o.filter(o.identity),o.map(o.trim),o.split("+"),o.toLower,o.trim,o.defaultTo("")),s={splitDomains:a,splitTopics:o.compose(o.ifElse(o.prop("length"),o.identity,o.always(["all"])),a),withRoute:function(e){return o.assoc("route",new i.default(e.path),e)}};t.Path=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GunNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));var o=r.pathOr("",["_","#"]),i=r.pathOr({},["_",">"]);var a={soul:o,state:i,latest:r.compose(r.last,r.sortBy(r.identity),r.values,i),edges:r.compose(r.map(r.prop("#")),r.values),decodeSEA:function(e){var t=e?{...e}:e,n=r.path(["_","#"],t);return n&&Gun.SEA&&-1!==n.indexOf("~")?(r.without(["_"],r.keys(t)).forEach(function(r){Gun.SEA.verify(Gun.SEA.opt.pack(e[r],r,e,n),!1,function(n){return t[r]=Gun.SEA.opt.unpack(n,r,e)})}),t):e}};t.GunNode=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingFilter=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(7),i=n(2),a=n(8),s=n(3),u=n(6),c=n(12);function p(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function l(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){p(i,r,o,a,s,"next",e)}function s(e){p(i,r,o,a,s,"throw",e)}a(void 0)})}}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var f,h=function(e){return r.compose(parseInt,r.path(e))},g={fromDefinition:function(e){var t=e.filters,n=e.voteFilters,i=e.isPresent,a=[],u=[],c=function(){return a.push(r.compose.apply(r,arguments))},p=function(){return u.push(r.compose.apply(r,arguments))};t.allow.aliases.length&&c(function(e){return!!i(["alias",e])},r.path(["data","author"])),t.allow.authors.length&&c(function(e){return!!i(["author",e])},r.path(["data","authorId"])),t.allow.domains.length&&c(function(e){return!!i(["domain",e])},s.ThingDataNode.domain),t.allow.topics.length&&!r.find(r.compose(r.identical("all"),r.last,r.split(":")),t.allow.topics)&&c(function(e){return!!i(["topic",e])},r.path(["data","topic"])),t.allow.kinds.length&&c(function(e){return!!i(["kind",e])},r.path(["data","kind"])),"commands"===t.allow.type&&c(r.compose(r.test(o.Constants.COMMAND_RE),r.path(["data","body"]))),t.deny.aliases.length&&c(function(e){return!i(["ban","alias",e])},r.path(["data","author"])),t.deny.authors.length&&c(function(e){return!i(["ban","author",e])},r.path(["data","authorId"])),t.deny.domains.length&&c(function(e){return!e||!i(["ban","domain",e])},s.ThingDataNode.domain),t.deny.topics.length&&c(function(e){return!i(["ban","topic",e])},r.path(["data","topic"])),t.deny.anon&&c(r.path(["data","authorId"])),t.deny.signed&&c(r.compose(function(e){return!e},r.path(["data","authorId"]))),null!==n.upsMin&&p(r.lte(n.upsMin),h(["votes","up"])),null!==n.upsMax&&p(r.gte(n.upsMax),h(["votes","up"])),null!==n.downsMin&&p(r.lte(n.downsMin),h(["votes","down"])),null!==n.downsMax&&p(r.gte(n.downsMax),h(["votes","down"])),null!==n.scoreMin&&p(r.lte(n.scoreMin),h(["votes","score"])),null!==n.scoreMax&&p(r.gte(n.scoreMax),h(["votes","score"])),t.deny.tags.length&&p(function(e){var n=r.path(["votes","commands"],e)||{};return!t.deny.tags.find(function(e){var t=d(e,2),o=t[0],i=t[1];return!!r.path([i,"tag",o],n)})});var l=function(e){return!a.find(function(t){return!t(e)})},f=function(e){return!u.find(function(t){return!t(e)})};return{thingFilter:function(e){return l(e)&&f(e)},contentFilter:l,voteFilter:f}},getFilteredIds:(f=l(regeneratorRuntime.mark(function e(t,n){var o,i,a,s,c,p,d,f,h,g,m=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o=m.length>2&&void 0!==m[2]?m[2]:{},i=o.limit,a=void 0===i?25:i,s=o.count,c=void 0===s?0:s,p=o.after,void 0===p?null:p,d=o.filterFn,f=n.slice(),h=[],g=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30;return Promise.all(r.map((e=l(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!0,!d){e.next=5;break}return e.next=4,d(t[u.ListingNode.POS_ID]);case 4:n=e.sent;case 5:n&&h.push(t);case 6:case"end":return e.stop()}},e,this)})),function(t){return e.apply(this,arguments)}),f.splice(c,t)))};case 4:if(!f.length){e.next=11;break}return e.next=7,g();case 7:if(!(a&&h.length>=a)){e.next=9;break}return e.abrupt("break",11);case 9:e.next=4;break;case 11:return e.abrupt("return",r.compose(r.map(r.prop(u.ListingNode.POS_ID)),a?r.slice(0,a):r.identity,r.sortBy(r.prop(u.ListingNode.POS_VAL)))(h));case 12:case"end":return e.stop()}},e,this)})),function(e,t){return f.apply(this,arguments)}),thingFilter:r.curry(function(e,t,n){return a.Query.thingMeta(e,{tabulator:t.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:n}),scores:c.ListingDataSource.needsScores(t),data:c.ListingDataSource.needsData(t)}).then(t.thingFilter)})};t.ListingFilter=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDataSource=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(2),s=n(8),u=n(13);var c=(0,o.query)(function(e,t,n){return o.Promise.all(r.map(function(t){return u.ListingSort.itemFromSoul(e,t,n)},t)).then(u.ListingSort.sortItems)}),p=(0,o.query)(function(e,t,n){return o.Promise.all(r.map(e.get,t)).then(r.reduce(r.mergeRight,{})).then(i.ThingSet.souls).then(function(t){return c(e,t,n)})}),l=function(e){var t=e.sort,n=r.path(["filters","allow","topics"],e)||[];return{listingPaths:r.map(function(e){return"/t/".concat(e,"/").concat(t)},n),query:function(r){return s.Query.multiTopic(r,{topics:n,sort:t}).then(function(t){return c(r,t,e)})}}},d={listing:function(e){var t=r.pathOr([],["filters","allow","listings"],e),n=e.sort;return{listingPaths:r.map(function(e){return"".concat(e,"/").concat(n)},t)}},replies:function(e){var t=e.sort,n=r.path(["filters","allow","repliesTo"],e),o=r.path(["filters","allow","type"],e);return{listingPaths:["/user/".concat(n,"/replies/").concat(o,"/").concat(t)],query:function(t){return s.Query.repliesToAuthor(t,{type:o,repliesToAuthorId:n,indexer:e.indexer}).then(function(n){return c(t,n,e)})}}},op:function(e){var t=e.sort,n=r.path(["filters","allow","ops"],e);n.length||l(e);return{listingPaths:r.map(function(e){return"/things/".concat(e,"/comments/").concat(t)},n),query:function(t){return s.Query.multiSubmission(t,{submissionIds:n}).then(function(n){return c(t,n,e)})}}},curator:function(e){var t=e.sort,n=r.prop("curators",e)||[];if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/user/".concat(e,"/commented/").concat(t)},n),query:function(t){return s.Query.curate(t,n,!0).then(function(e){return e.map(function(e){return a.Schema.Thing.route.reverse({thingId:e})})}).then(function(n){return c(t,n,e)})}}},author:function(e){var t=e.sort,n=r.path(["filters","allow","authors"],e),o=r.path(["filters","allow","type"],e);if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/user/".concat(e,"/").concat(o,"/").concat(t)},n),query:function(t){return s.Query.multiAuthor(t,{type:o,authorIds:n}).then(function(n){return c(t,n,e)})}}},domain:function(e){var t=e.sort,n=r.path(["filters","allow","domains"],e)||[];if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/domain/".concat(e,"/").concat(t)},n),query:function(r){return s.Query.multiDomain(r,{domains:n,sort:t}).then(function(t){return c(r,t,e)})}}},topic:l},f=r.keys(d),h={fromDefinition:function(e){var t,n=(t=e,r.find(t.isPresent,f)||"topic");return r.mergeLeft({name:n},d[n](e))},sources:d,needsScores:function(e){return!!r.find(e.isPresent,["sort hot","sort top","sort best","sort controversial","ups","downs","score","can remove"])},needsData:function(e){return!!r.find(e.isPresent,["topic","domain","author","unique by content","kind","type","require signed","require anon","alias","ban domain","ban topic","ban author","ban alias"])},itemsFromThingSets:p,itemsFromThingSouls:c};t.ListingDataSource=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSort=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(2),a=n(3),s=n(8);var u=r.map(r.prop(0)),c=r.sortWith(r.prop(1)),p=function(e){return(0,o.query)(function(t,n,a){return a.isIdSticky(n)?(0,o.resolve)(-1/0):r.contains(n,a.filters.allow.ops)?(0,o.resolve)(-1/0):s.Query.thingMeta(t,{tabulator:a.tabulator,scores:!0,thingSoul:i.Schema.Thing.route.reverse({thingId:n})}).then(function(t){return e(t,a)})})},l=function(e){return(0,o.query)(function(t,n,r){return s.Query.thingMeta(t,{tabulator:r.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:n})}).then(e)})},d={new:l(r.compose(r.multiply(-1),function(e){return e||(new Date).getTime()},r.prop("timestamp"))),old:l(r.prop("timestamp")),active:p(function(e){var t=e.timestamp;return-1*(e.lastActive||t)}),top:p(r.compose(function(e){return-1*parseInt(e,10)},r.pathOr(0,["votes","score"]))),comments:p(r.compose(function(e){return-1*parseFloat(e,10)},r.pathOr(0,["votes","comment"]))),discussed:p(function(e){var t=r.prop("timestamp",e),n=parseInt(r.pathOr(0,["votes","comment"],e),10),o=t/1e3-1134028003,i=Math.log10(Math.max(Math.abs(n),1));return n?-1*(i+o/45e3):1e9-o}),hot:p(function(e){var t=r.prop("timestamp",e),n=parseInt(r.pathOr(0,["votes","score"],e),10),o=t/1e3-1134028003,i=0;return n>0?i=1:n<0&&(i=-1),-1*(i*Math.log10(Math.max(Math.abs(n),1))+o/45e3)}),best:p(function(e){var t=parseInt(r.pathOr(0,["votes","up"],e),10),n=t+parseInt(r.pathOr(0,["votes","down"],e),10);if(0===n)return 0;var o=1.281551565545,i=t/n;return(i+1/(2*n)*o*o-o*Math.sqrt(i*(1-i)/n+o*o/(4*n*n)))/(1+1/n*o*o)*-1}),controversial:p(function(e){var t=parseInt(r.pathOr(0,["votes","up"],e),10),n=parseInt(r.pathOr(0,["votes","down"],e),10);if(t<=0||n<=0)return 0;var o=t+n,i=t>n?n/t:t/n;return-1*Math.pow(o,i)})},f=(0,o.query)(function(e,t,n){return(d[n.sort]||d.new)(t,n).then(function(e){return[t,e]})}),h=(0,o.query)(function(e,t,n){return(0,o.all)(r.map(function(t){return f(e,t,n)},t))}),g=(0,o.query)(function(e,t,n){return(0,o.all)(r.map(e.get,t)).then(r.pipe(a.ThingSet.union,a.ThingSet.ids,function(t){return h(e,t,n)})).then(c)}),m={POS_ID:0,POS_VAL:1,sorts:d,toItem:f,toItems:h,toIds:u,sortItems:c,fromThingSets:g};t.ListingSort=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingOracle=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(10),i=n(2),a=n(3),s=n(6),u=n(13);function c(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function p(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){c(i,r,o,a,s,"next",e)}function s(e){c(i,r,o,a,s,"throw",e)}a(void 0)})}}var l,d,f=(l=p(regeneratorRuntime.mark(function e(t,n,r,o){var i,a,c,p,l,d=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(i=d.length>4&&void 0!==d[4]?d[4]:[],a=d.length>5&&void 0!==d[5]?d[5]:[],i.length||a.length){e.next=4;break}return e.abrupt("return");case 4:return e.next=6,t.newScope().get(n.soul);case 6:return c=e.sent,e.next=9,u.ListingSort.toItems(r,i,o);case 9:p=e.sent,(l=s.ListingNode.diff(c,p,a))&&console.log("CHANGES",n.soul,l),l&&n.write(l);case 13:case"end":return e.stop()}},e,this)})),function(e,t,n,r){return l.apply(this,arguments)}),h=(d=p(regeneratorRuntime.mark(function e(t,n,s){var u,c,p,l,d,h,g,m,y;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return u=s.sort,c=s.updatedSoul,p=s.diff,l=[],d=t.newScope(),h=i.Schema.ThingVoteCounts.route.match(c)||{},g=h.thingId,m=r.equals(n.match.thingId||null),g&&l.push(g),l=r.concat(l,a.ThingSet.ids(o.GunNode.decodeSEA(p))),e.next=9,f(t,n,d,u,l,[],m);case 9:for(y in d.getAccesses())t.listen(y,n.soul);case 10:case"end":return e.stop()}},e,this)})),function(e,t,n){return d.apply(this,arguments)}),g={updateListing:f,onPut:h};t.ListingOracle=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validation=t.suppressor=void 0;var r,o=c(n(0)),i=(r=n(16))&&r.__esModule?r:{default:r},a=n(26),s=c(n(17)),u=n(2);function c(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=function(e,t){var n=o.path(["data","#"],t),r=o.without(["comments","allcomments","votesup","votesdown"],o.keys(o.path(["_",">"],t))).map(function(e){return o.path(["_",">",e],t)}).sort().pop(),i=(e.ThingData.route.match(n)||{}).thingId,a=o.prop("id",t);return a&&a===i&&r&&r<1543102814945},d=function(e,t){var n=o.prop("id",t);return n&&n===(0,i.default)({authorId:(o.path(["author","#"],t)||"").substr(1)||void 0,timestamp:parseInt(o.prop("timestamp",t),10),kind:o.prop("kind",t),topic:o.prop("topicName",u.Schema.Topic.route.match(o.path(["topic","#"],t))),opId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["op","#"],t))),replyToId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["replyTo","#"],t))),originalHash:o.prop("originalHash",t)})},f=function(e,t){var n=(o.path(["author","#"],t)||"").substr(1)||void 0,r=o.prop("authorId",u.Schema.ThingDataSigned.route.match(o.path(["data","#"],t)));return n&&n===r},h=function(e,t){var n=o.prop("originalHash",t),r=o.prop("thingId",u.Schema.ThingData.route.match(o.path(["data","#"],t)));return r&&r===n},g=function(e){return function(t,n,r,i,a){var s=(u.Schema.Thing.route.match(o.path(["_","#"],a)||"")||{}).thingId,c=u.Schema[t].route.match(o.prop("#",n)||"").thingId;return!(!s||s!==c)&&e.compile({$ref:"schema.json#/definitions/".concat(t,"Edge")})(n)}},m=function(e,t){var n=t||{},r=(n._,p(n,["_"]));r.timestamp=parseFloat(r.timestamp,10);var a=(u.Schema.ThingData.route.match(o.path(["_","#"],t)||"")||{}).thingId;return a&&a===(0,i.default)(r)},y=function(e,t,n,r){var o,i=t||{},a=i.algorithm,s=void 0===a?"argon2d":a,u=i.config,c=void 0===u?{}:u,p=Buffer.hasOwnProperty("from")?Buffer.from(r,"hex"):new Buffer(r,"hex"),l=Buffer.hasOwnProperty("from")?Buffer.from(p,"hex"):new Buffer(p,"hex"),d=e.hash(n,{salt:l,hashLength:c.hashLength,timeCost:c.timeCost,memoryCost:c.memoryCost,parallelism:c.parallelism,raw:!0,type:e[s]}),f=0;for(o=0;o<=c.complexity-8;o+=8,f++)if(0!==d[f])return!1;var h=255<<8+o-c.complexity;return 0==(d[f]&h)},v=function(e,t){var r=n(27);if(!r)return!0;var i=(e||{}).algorithm,a=void 0===i?"argon2d":i,s=o.path(["_","#"],t);if("argon2d"!==a)throw new Error("Only argon2 supported for vote hashes");return o.without(["_"],o.keys(t)).forEach(function(n){y(r,e,s,n)||(console.log("invalid vote",s,n),delete t[n])}),!0},b=o.compose(function(e){return e.addKeyword("isLegacyThing",{validate:l}),e.addKeyword("thingHashMatchesSoul",{validate:d}),e.addKeyword("signedThingDataMatchesThing",{validate:f}),e.addKeyword("thingDataMatchesOriginalHash",{validate:h}),e.addKeyword("thingRelatedEdge",{validate:g(e)}),e.addKeyword("thingDataHashMatchesSoul",{validate:m}),e.addKeyword("keysAreProofsOfWork",{validate:v,modifying:!0}),e},s.initAjv),O=(0,a.createSuppressor)({definitions:u.Schema.definitions,init:b});t.suppressor=O;var I=o.curry(function(e,t){return t.on("in",function(t){var n=this,r=t._;(delete t._,"ping"in t||"leech"in t)||(t.put&&!o.keys(t.put).length||(e.config.disableValidation?Promise.resolve(t):O.validate(t)).then(function(e){return e?(t._=r,n.to.next(t)):console.log("msg didn't validate",t)}).catch(function(e){return console.error("validate err",t,e.stack||e)}))})}),S={isLegacyThing:l,thingHashMatchesSoul:d,signedThingDataMatches:f,thingDataMatchesOriginalHash:h,getIsThingRelatedEdge:g,thingDataHashMatches:m,isVoteValid:y,keysAreProofsOfWork:v,initAjv:b,suppressor:O,gunWireInput:I};t.Validation=S},function(e,t){e.exports=n},function(e,t){e.exports=r},function(e,t){e.exports=o},function(e,t){e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingType=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(33),i=n(34),a=n(35),s=n(36),u=n(37),c=n(38);var p=[o.TopicListing,i.DomainListing,a.CommentListing,s.SpaceListing,u.InboxListing,c.ProfileListing],l={...p,types:p,fromPath:function(e){for(var t,n=0;n<p.length;n++)if(t=p[n].route.match(e),console.log("wtf",e,t),t?console.log("match",t):console.log("no match",p[n].route),t)return r.assoc("match",t,p[n]);return null}};t.ListingType=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDefinition=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(22),i=n(4);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s={fromSource:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=o.Tokenizer.tokenize(e),u={...s},c=s.isPresent,p=s.getValue,l=s.getValues,d=s.getValueChain,f=s.getPairs,h=a(d("sourced from page"),2),g=h[0];u.fromPageAuthor=void 0===g?t:g;var m=h[1];return u.fromPageName=void 0===m?n?"space:".concat(n):void 0:m,u.displayName=s.getValue("name")||n,u.indexer=p("tabulator")||i.Config.indexer,u.tabulator=p("tabulator")||u.indexer,u.tabs=f("tab"),u.sort=p("sort"),u.uniqueByContent=!!c("unique by content"),u.curators=l("curator"),u.moderators=l("mod"),u.includeRanks=!!c("show ranks"),u.stickyIds=l("sticky"),u.isIdSticky=function(e){return!!s.isPresent(["sticky",e])},u.submitTopics=l("submit to"),u.submitTopic=p("submit to"),u.chatTopic=p("chat in"),t&&n&&(u.spaceName=n,u.owner=t,u.useForComments=!s.isPresent("comments leave space"),u.path="/user/".concat(t,"/spaces/").concat(n),u.defaultTab=s.getValue("tab"),u.defaultTabPath=u.defaultTab?s.getValue(["tab",u.defaultTab]):null),u.filters={functions:[],allow:{repliesTo:p("replies to author"),type:p("type"),ops:l("op"),aliases:l("alias"),authors:l("author"),domains:l("domain"),topics:l("topic"),listings:l("listing"),kinds:l("kind"),anon:!c("require signed"),signed:!c("require anon")},deny:{aliases:l("ban alias"),authors:l("ban author"),domains:l("ban domain"),topics:l("ban topic"),anon:!!c("require signed"),signed:!!c("require anon"),tags:f("can remove")}},u.voteFilters={functions:[],upsMin:parseInt(p("ups above"),10)||null,upsMax:parseInt(p("ups below"),10)||null,downsMin:parseInt(p("downs above"),10)||null,downsMax:parseInt(p("downs below"),10)||null,scoreMin:parseInt(p("score above"),10)||null,scoreMax:parseInt(p("score below"),10)||null},u.censors=r.uniq(r.map(r.prop(1),u.filters.deny.tags)),u}};t.ListingDefinition=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tokenizer=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i={tokenize:function(e){var t=(e||"").split("\n").reduce(function(e,t){var n=t.trim().split(" ").map(r.trim).filter(function(e){return e});return n.length?r.assocPath(n,{},e):e},{}),n=function(e){var n=e;return"string"==typeof e&&(n=e.split(" ")),n&&r.path(n,t)},i=function(e){return r.keysIn(n(e))},a=function(e){return i(e)[0]||null};return{source:e,isPresent:n,getValue:a,getValues:i,getLastValue:function(e){return i(e).pop()||null},getValueChain:function(e){for(var t="string"==typeof e?e.split(" "):e,n=[],r=e;r;)(r=a([].concat(o(t),n)))&&n.push(r);return n},getPairs:function(e){var t="string"==typeof e?e.split(" "):e;return i(t).reduce(function(e,n){var r=a([].concat(o(t),[n]));return[].concat(o(e),[[n,r]])},[])}}}};t.Tokenizer=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceSpec=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(22),s=n(3),u=n(5);var c=["hot","new","discussed","controversial","top"],p=r.curry(function(e,t,n){var r=[n||""],o=a.Tokenizer.tokenize(n);o.getValue("tab")||c.map(function(n){return r.push("tab ".concat(n," /user/").concat(e,"/spaces/").concat(t,"/").concat(n))});var s=o.getValue("indexer");return s||(r.push("indexer ".concat(i.Config.indexer)),s=i.Config.indexer),o.getValue("tabulator")||r.push("tabulator ".concat(s)),r.join("\n")}),l=(0,o.query)(function(e,t,n){return u.ListingSpec.getSource(e,t,function(e){return"space:".concat(e)}(n))}),d=(0,o.query)(function(e,t,n){return l.then(r.compose(p(t,n),s.ThingDataNode.body))}),f={tabs:c,getSource:d};t.SpaceSpec=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Peer",{enumerable:!0,get:function(){return r.Peer}}),Object.defineProperty(t,"Constants",{enumerable:!0,get:function(){return o.Constants}}),Object.defineProperty(t,"Listing",{enumerable:!0,get:function(){return i.Listing}}),Object.defineProperty(t,"Query",{enumerable:!0,get:function(){return a.Query}}),Object.defineProperty(t,"Schema",{enumerable:!0,get:function(){return s.Schema}}),Object.defineProperty(t,"Thing",{enumerable:!0,get:function(){return u.Thing}}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return u.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return u.ThingDataNode}}),Object.defineProperty(t,"Validation",{enumerable:!0,get:function(){return c.Validation}}),t.default=void 0;var r=n(25),o=n(7),i=n(31),a=n(8),s=n(2),u=n(3),c=n(15),p=r.Peer.init;t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Peer=void 0;var r=n(15),o=n(8),i=n(3),a=n(30);function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u={init:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t||{},u=n.leech,c=n.disableValidation,p=n.noGun,l=n.localStorage,d=n.persist,f=s(n,["leech","disableValidation","noGun","localStorage","persist"]),h={config:t};if(!p){var g={localStorage:!!l,radisk:!!d,...f};d&&(g.localStorage=!1),c||e.on("opt",r.Validation.gunWireInput(h)),g.storeFn&&(g.store=g.storeFn(g)),h.gun=e(g),g.localStorage&&h.gun.on("localStorage:error",function(e){return e.retry({})}),u&&h.gun._.on("out",{leech:!0})}return h.newScope=function(e){return o.Query.createScope(h,e)},h.onLogin=a.Authentication.onLogin(h),h.signup=a.Authentication.signup(h),h.login=a.Authentication.login(h),h.logout=function(){return a.Authentication.logout(h)},h.isLoggedIn=function(){return a.Authentication.isLoggedIn(h)},h.submit=i.Thing.submit(h),h.comment=i.Thing.comment(h),h.chat=i.Thing.chat(h),h.writePage=i.Thing.writePage(h),h.vote=i.Thing.vote(h),h.queries=o.Query,h}};t.Peer=u},function(e,t){e.exports=a},function(e,t){e.exports=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingSet=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(2),i=n(10);var a=i.GunNode.edges;var s={ids:r.compose(r.filter(r.identity),r.map(r.compose(r.prop("thingId"),o.Schema.Thing.route.match.bind(o.Schema.Thing.route))),i.GunNode.edges),union:r.compose(r.dissoc("_"),r.reduce(r.mergeRight,{})),souls:a,dayStr:function(e){var t=new Date(e||(new Date).getTime()),n=t.getUTCFullYear(),r=t.getUTCMonth()+1,o=t.getUTCDate();return"".concat(n,"/").concat(r,"/").concat(o)}};t.ThingSet=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingDataNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(19);var i=r.propOr("","body"),a=r.propOr("","url"),s={body:i,domain:r.compose(function(e){if(!e)return"";var t=(0,o.parse)(e);return(t.host||t.scheme||"").replace(/^www\./,"")},a)};t.ThingDataNode=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Authentication=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1);var i={signup:r.curry(function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return new o.Promise(function(i,a){if(e&&e.gun&&e.gun.user){var s=e.user();o.Promise.resolve(s.create(t,n,function(r){r.err?(a(r.err),s.leave(),e.gun.user().leave()):e.login(t,n).then(i)},r))}else a("SEA is not loaded")})}),login:r.curry(function(e,t,n){return new o.Promise(function(r,o){e&&e.gun&&e.gun.user?e.user().auth(t,n,function(t){return t.err?o(t.err):r(e.user().is)}):o("SEA is not loaded")}).then(function(t){return e._onLogin&&e._onLogin(t),t})}),logout:function(e){return e.gun.user().leave()},isLoggedIn:function(e){return e.gun&&e.gun.user&&e.user().is},onLogin:r.curry(function(e,t){return e._onLogin=t})};t.Authentication=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ListingQuery",{enumerable:!0,get:function(){return r.ListingQuery}}),Object.defineProperty(t,"ListingDataSource",{enumerable:!0,get:function(){return o.ListingDataSource}}),Object.defineProperty(t,"ListingDefinition",{enumerable:!0,get:function(){return i.ListingDefinition}}),Object.defineProperty(t,"ListingFilter",{enumerable:!0,get:function(){return a.ListingFilter}}),Object.defineProperty(t,"ListingNode",{enumerable:!0,get:function(){return s.ListingNode}}),Object.defineProperty(t,"ListingOracle",{enumerable:!0,get:function(){return u.ListingOracle}}),Object.defineProperty(t,"ListingSort",{enumerable:!0,get:function(){return c.ListingSort}}),Object.defineProperty(t,"ListingSpec",{enumerable:!0,get:function(){return p.ListingSpec}}),Object.defineProperty(t,"ListingType",{enumerable:!0,get:function(){return l.ListingType}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return d.SpaceSpec}}),t.Listing=void 0;var r=n(32),o=n(12),i=n(21),a=n(11),s=n(6),u=n(14),c=n(13),p=n(5),l=n(20),d=n(23),f={fromSpec:r.ListingQuery.fromSpec,fromPath:r.ListingQuery.fromPath};t.Listing=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingQuery=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(6),a=n(11),s=n(20);var u=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=a.ListingFilter.thingFilter(e,t),s=r.pathOr([],["dataSource","listingPaths"],t),u=r.map(i.ListingNode.soulFromPath(n.indexer||t.indexer),s);return i.ListingNode.rowsFromSouls(e,u).then(function(t){return a.ListingFilter.getFilteredIds(e,t,{...n,filterFn:o})})}),c=(0,o.query)(function(e,t,n){var r=s.ListingType.fromPath(t);return r?r.getSpec(e,r.match).then(function(o){return o.hasIndexer&&!n.calculate?r&&r.read?r.read(e,r.match,n):i.ListingNode.read(e,t,n):u(e,o,n)}):Promise.resolve([])}),p={fromSpec:u,fromPath:c};t.ListingQuery=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TopicListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(9),s=n(5);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["hot","new","discussed","controversial","top","firehose"],p=(0,o.query)(function(e,t){var n=t.topic,o=t.sort,p=a.Path.splitTopics(n),l="all"===p[0]?"whatever":p[0];return s.ListingSpec.getSource(e,i.Config.indexer,"listing:topic",["name ".concat(n),"submit to ".concat(l),"sort ".concat(o),-1===n.indexOf(":")?"kind submission":""].concat(u(r.map(function(e){return"topic ".concat(e)},p)),u(r.map(function(e){return"tab ".concat(e," /t/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/t/:topic/:sort",getSource:p,getSpec:l});t.TopicListing=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomainListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(9),s=n(5);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["hot","new","discussed","controversial","top"],p=(0,o.query)(function(e,t){var n=t.domain,o=t.sort,p=a.Path.splitTopics(n);return s.ListingSpec.getSource(e,i.Config.indexer,"listing:domain",["name ".concat(p[0]),"submit to whatever","sort ".concat(o),"kind submission"].concat(u(r.map(function(e){return"domain ".concat(e)},p)),u(r.map(function(e){return"tab ".concat(e," /domain/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/domain/:domain/:sort",tabs:c,getSource:p,getSpec:l});t.DomainListing=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentListing=void 0;var r=n(1),o=n(4),i=n(9),a=n(5),s=(0,r.query)(function(e,t){var n=t.thingId,r=t.sort;return a.ListingSpec.getSource(e,o.Config.indexer,"listing:comments",["op ".concat(n),"sort ".concat(r)].join("\n"))}),u=i.Path.withRoute({path:"/things/:thingId/comments/:sort",getSpec:s});t.CommentListing=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(2),s=n(10),u=n(9),c=n(6),p=n(11),l=n(5),d=n(14),f=n(23);function h(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var m,y,v=(0,o.query)(function(e,t){var n=t.authorId,r=t.name,o=t.sort;return f.SpaceSpec.getSource(e,n,r,"sort ".concat(o))}),b=(0,o.query)(function(e,t){return v(e,t).then(function(e){return l.ListingSpec.fromSource(e,t.authorId,t.name)})}),O=(0,o.query)(function(e,t,n){var r={authorId:t.authorId,name:t.name,sort:t.sort,indexer:i.Config.indexer},s=[a.Schema.SpaceListing.route.reverse(r)];return(0,o.all)([b(e,t),c.ListingNode.getRowsFromSouls(e,s)]).then(function(t){var r=g(t,2),o=r[0],i=r[1],a=p.ListingFilter.thingFilter(e,o);return p.ListingFilter.getFilteredIds(e,i,{...n,filterFn:a})})}),I=(m=regeneratorRuntime.mark(function e(t,n,o){var i,u,p,l,f,h,m,y,v,O,I,S,P,w,j,T,_,L,A,D;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=o.updatedSoul,u=o.diff,p=o.original,l=o.latest,void 0===l?0:l,f=t.newScope(),h=s.GunNode.decodeSEA(p),m=s.GunNode.decodeSEA(u),y=c.ListingNode.categorizeDiff(m,h),v=g(y,2),O=v[0],I=v[1],e.next=7,b(f,n.match);case 7:return S=e.sent,P=a.Schema.ThingVoteCounts.route.match(i),w=a.Schema.Thing.route.match(i),j=a.Schema.ThingDataSigned.route.match(i)||{},T=j.thingId,_=a.Schema.SEAAuthor.route.match(i),P&&O.push(P.thingId),w&&O.push(w.thingId),T&&T!==S.fromPageId&&O.push(T),e.next=17,d.ListingOracle.updateListing(t,n,f,S,O,I);case 17:for(L in f.getAccesses())t.listen(L,n.soul);if(!(r.prop("size",p)||O.length||I.length||_)){e.next=20;break}return e.abrupt("return");case 20:return console.log("---STANDARD SPACE UPDATE---",n.soul,i),e.next=23,t.newScope().get(n.soul);case 23:A=e.sent,(D=c.ListingNode.itemKeys(A)).length&&n.write({size:0,...D.reduce(function(e,t){return e["".concat(t)]=null,e},{})}),t.work({id:"update:".concat(n.soul),soul:n.soul,method:"doUpdate",priority:n.priority||50});case 27:case"end":return e.stop()}},e,this)}),y=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=m.apply(e,t);function i(e){h(o,n,r,i,a,"next",e)}function a(e){h(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t,n){return y.apply(this,arguments)}),S=u.Path.withRoute({path:"/user/:authorId/spaces/:name/:sort",calculate:O,getSource:v,getSpec:b,onPut:I});t.SpaceListing=S},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InboxListing=void 0;var r=n(1),o=n(4),i=n(10),a=n(2),s=n(3),u=n(9),c=n(5),p=n(6),l=n(14);function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var h,g,m=(0,r.query)(function(e,t){var n=t.authorId,r=t.type,i=t.sort,a=void 0===i?"new":i;return c.ListingSpec.getSource(e,o.Config.indexer,"listing:inbox",["replies to author ".concat(n),"type ".concat(r),"sort ".concat(a)].join("\n"))}),y=(0,r.query)(function(e,t){return m(e,t).then(c.ListingSpec.fromSource)}),v=(h=regeneratorRuntime.mark(function e(t,n,r){var o,u,c,f,h,g,m,v,b,O,I,S;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r.updatedSoul,o=r.diff,u=t.newScope(),c=i.GunNode.decodeSEA(o),f=p.ListingNode.categorizeDiff(c),h=d(f,1),g=h[0],e.next=6,y(u,n.match);case 6:m=e.sent,v=s.ThingSet.ids(c),b=0;case 9:if(!(b<g.length)){e.next=20;break}return O=g[b],e.t0=s.ThingSet,e.next=14,u.get(a.Schema.ThingComments.route.reverse({thingId:O})).then();case 14:e.t1=e.sent,I=e.t0.ids.call(e.t0,e.t1),v=v.concat(I);case 17:b++,e.next=9;break;case 20:if(!v.length){e.next=23;break}return e.next=23,l.ListingOracle.updateListing(t,n,u,m,v,[]);case 23:for(S in u.getAccesses())t.listen(S,n.soul);case 24:case"end":return e.stop()}},e,this)}),g=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=h.apply(e,t);function i(e){f(o,n,r,i,a,"next",e)}function a(e){f(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t,n){return g.apply(this,arguments)}),b=u.Path.withRoute({path:"/user/:authorId/replied/:type/:sort",getSource:m,getSpec:y,onPut:v});t.InboxListing=b},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProfileListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(9),s=n(5);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["overview","comments","submitted","commands"],p=(0,o.query)(function(e,t){var n=t.authorId,o=t.type,a=t.sort;return s.ListingSpec.getSource(e,i.Config.indexer,"listing:profile",["author ".concat(n),"type ".concat(o),"submit to whatever","sort ".concat(a)].concat(u(r.map(function(e){return"tab ".concat(e," /user/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/user/:authorId/:type/:sort",tabs:c,getSource:p,getSpec:l});t.ProfileListing=d}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL25vdGFidWctcGVlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvZXh0ZXJuYWwgXCJyYW1kYVwiIiwid2VicGFjazovL25vdGFidWctcGVlci9leHRlcm5hbCBcImd1bi1zY29wZVwiIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9TY2hlbWEuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL1RoaW5nL2luZGV4LmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9Db25maWcuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1NwZWMuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ05vZGUuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvUXVlcnkuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvUGF0aC5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvR3VuTm9kZS5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9MaXN0aW5nRmlsdGVyLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdEYXRhU291cmNlLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdTb3J0LmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdPcmFjbGUuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL1ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyL2V4dGVybmFsIFwib2JqZWN0LWhhc2hcIiIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvZXh0ZXJuYWwgXCJndW4tc3VwcHJlc3Nvci1zZWFyXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyL2V4dGVybmFsIFwicm91dGUtcGFyc2VyXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyL2V4dGVybmFsIFwidXJpLWpzXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1R5cGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ0RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9TcGFjZVNwZWMuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9QZWVyLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci9leHRlcm5hbCBcImd1bi1zdXBwcmVzc29yXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyL2V4dGVybmFsIFwiYXJnb24yXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL1RoaW5nL1RoaW5nU2V0LmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9UaGluZy9UaGluZ0RhdGFOb2RlLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9BdXRoZW50aWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9MaXN0aW5nUXVlcnkuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1R5cGUvVG9waWNMaXN0aW5nLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdUeXBlL0RvbWFpbkxpc3RpbmcuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1R5cGUvQ29tbWVudExpc3RpbmcuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1R5cGUvU3BhY2VMaXN0aW5nLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdUeXBlL0luYm94TGlzdGluZy5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9MaXN0aW5nVHlwZS9Qcm9maWxlTGlzdGluZy5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTdfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE4X18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xOV9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMjZfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzI3X18iLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JvdXRlUGFyc2VyIiwic2VhIiwiX0NvbnN0YW50cyIsImRlZmluaXRpb25zIiwiQVVUSF9TQ0hFTUEiLCJ0b3BpY05hbWUiLCJ0eXBlIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwiQ29uc3RhbnRzIiwiTUFYX1RPUElDX1NJWkUiLCJUb3BpY0RheSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJzb3VsIiwicGF0dGVybiIsImNvbmNhdCIsIlBSRUZJWCIsInByb3BlcnRpZXMiLCIkcmVmIiwieWVhciIsIm1pbmltdW0iLCJtYXhpbXVtIiwibW9udGgiLCJkYXkiLCJyZXF1aXJlZCIsInByb3BzRnJvbVNvdWwiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsImVkZ2VNYXRjaGVzS2V5IiwiYW55T2YiLCJUb3BpYyIsImRvbWFpbk5hbWUiLCJNQVhfRE9NQUlOX1NJWkUiLCJEb21haW4iLCJ1cmwiLCJNQVhfVVJMX1NJWkUiLCJVUkwiLCJ0aGluZ0lkIiwiTUFYX0hBU0hfU0laRSIsInRoaW5nU291bCIsIiNyZWYiLCJUaGluZ0FsbENvbW1lbnRzIiwiYWxsT2YiLCJUaGluZ0NvbW1lbnRzIiwidGltZXN0YW1wIiwidGhpbmdLaW5kIiwiTUFYX1RISU5HX0tJTkRfU0laRSIsIlRoaW5nIiwiaWQiLCJraW5kIiwib3JpZ2luYWxIYXNoIiwiZGF0YSIsIm9uZU9mIiwidG9waWMiLCIjIiwiZG9tYWluIiwiY29tbWVudHMiLCJ0aGluZ1JlbGF0ZWRFZGdlIiwiYWxsY29tbWVudHMiLCJ2b3Rlc3VwIiwidm90ZXNkb3duIiwib3AiLCJyZXBseVRvIiwiYXV0aG9yIiwidGhpbmdIYXNoTWF0Y2hlc1NvdWwiLCJzaWduZWRUaGluZ0RhdGFNYXRjaGVzVGhpbmciLCJ0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoIiwiaXNMZWdhY3lUaGluZyIsIlByb29mT2ZXb3JrVm90ZXMiLCIkYXN5bmMiLCJrZXlzQXJlUHJvb2ZzT2ZXb3JrIiwiYWxnb3JpdGhtIiwiY29uZmlnIiwiY29tcGxleGl0eSIsImhhc2hMZW5ndGgiLCJ0aW1lQ29zdCIsIm1lbW9yeUNvc3QiLCJwYXJhbGxlbGlzbSIsIlRoaW5nVm90ZXNVcCIsIlRoaW5nVm90ZXNEb3duIiwiVGhpbmdEYXRhIiwiTUFYX1RISU5HX1RJVExFX1NJWkUiLCJib2R5IiwiTUFYX1RISU5HX0JPRFlfU0laRSIsImF1dGhvcklkIiwib3BJZCIsInJlcGx5VG9JZCIsInRoaW5nRGF0YUhhc2hNYXRjaGVzU291bCIsIlRoaW5nRGF0YVNpZ25lZCIsIlRoaW5nVm90ZUNvdW50cyIsInRhYnVsYXRvciIsInVwIiwiZG93biIsImNvbW1lbnQiLCJzY29yZSIsImNvbW1hbmRzIiwiTGlzdGluZ0RhdGEiLCJpZHMiLCJNQVhfTElTVElOR19JRFNfU0laRSIsInNvdXJjZSIsIk1BWF9MSVNUSU5HX1NPVVJDRV9TSVpFIiwic3VibWl0VG9waWMiLCJ0YWJzIiwiTUFYX0xJU1RJTkdfVEFCU19TSVpFIiwiY3VyYXRvcnMiLCJjZW5zb3JzIiwidXNlcklkIiwiaXNDaGF0IiwicGF0dGVyblByb3BlcnRpZXMiLCJeZCskIiwic29ydE5hbWUiLCJlbnVtIiwiVG9waWNMaXN0aW5nIiwic29ydCIsImluZGV4ZXIiLCJEb21haW5MaXN0aW5nIiwiVGhpbmdDb21tZW50c0xpc3RpbmciLCJ1c2VyTGlzdGluZ1R5cGUiLCJBdXRob3JSZXBsaWVzTGlzdGluZyIsIkF1dGhvclByb2ZpbGVMaXN0aW5nIiwiU3BhY2VMaXN0aW5nIiwiQXV0aG9yQ29tbWVudHMiLCJBdXRob3JTdWJtaXNzaW9ucyIsIkF1dGhvclRoaW5ncyIsIkF1dGhvclBhZ2VzIiwicm91dGVzIiwia2V5cyIsInJlZHVjZSIsInJlc3VsdCIsInBhdGgiLCJhc3NvYyIsImRlZmF1bHQiLCJTY2hlbWEiLCJjb21wb3NlIiwicmVzIiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJyb3V0ZSIsInByb3AiLCJ0b1BhaXJzIiwiX2d1blNjb3BlIiwiX29iamVjdEhhc2giLCJfdXJpSnMiLCJfU2NoZW1hIiwiX1RoaW5nU2V0IiwiX1RoaW5nRGF0YU5vZGUiLCJwdXQiLCJjdXJyeSIsInBlZXIiLCJEYXRlIiwiZ2V0VGltZSIsIm5vZGUiLCJndW4iLCJyZXZlcnNlIiwiZGF0YVNvdWwiLCJtZXRhRGF0YSIsImluZGV4Iiwic3VibWl0IiwidXNlciIsImlzTG9nZ2VkSW4iLCJ0b0xvd2VyQ2FzZSIsInRyaW0iLCJhbGlhcyIsInB1YiIsInRoaW5nIiwidGhpbmdzU291bCIsInN1Ym1pc3Npb25zU291bCIsInRoaW5ncyIsInN1Ym1pc3Npb25zIiwic2V0IiwiY29tbWVudHNTb3VsIiwiY2hhdCIsIndyaXRlUGFnZSIsIlByb21pc2UiLCJyZWplY3QiLCJwYWdlc1NvdWwiLCJjaGFpbiIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwidm90ZSIsIm5vbmNlIiwidG9waWNQcmVmaXhlcyIsImNoYXRtc2ciLCJfZGF5U3RyJHNwbGl0MiIsIlRoaW5nU2V0IiwiZGF5U3RyIiwic3BsaXQiLCJ0b3BpY1ByZWZpeCIsInRvcGljRGF5Iiwic2tpcEFsbCIsImFsbG5hbWUiLCJhbGxUb3BpYyIsImFsbFRvcGljRGF5IiwidXJsSW5mbyIsInBhcnNlIiwiaG9zdCIsInNjaGVtZSIsInJlcGxhY2UiLCJvbiIsInRkIiwib2ZmIiwiQ29uZmlnIiwiREVWX0lOREVYRVIiLCJvd25lciIsInVwZGF0ZSIsIm1hcCIsInZhbCIsIl9RdWVyeSIsIl9UaGluZyIsIl9MaXN0aW5nRGVmaW5pdGlvbiIsIl9MaXN0aW5nRGF0YVNvdXJjZSIsIl9MaXN0aW5nRmlsdGVyIiwiTGlzdGluZ1NwZWMiLCJmcm9tU291cmNlIiwiYXBwbHkiLCJtZXJnZUxlZnQiLCJhcCIsIkxpc3RpbmdGaWx0ZXIiLCJmcm9tRGVmaW5pdGlvbiIsImlkZW50aXR5Iiwib2YiLCJMaXN0aW5nRGF0YVNvdXJjZSIsIkxpc3RpbmdEZWZpbml0aW9uIiwiZ2V0U291cmNlIiwicXVlcnkiLCJzY29wZSIsImV4dHJhIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiUXVlcnkiLCJ3aWtpUGFnZSIsIlRoaW5nRGF0YU5vZGUiLCJfQ29uZmlnIiwiUE9TX0lEWCIsIlBPU19JRCIsIlBPU19WQUwiLCJyb3dzVG9JZHMiLCJyb3dzVG9JdGVtcyIsInNsaWNlIiwicHJvcE9yIiwic291bEZyb21QYXRoIiwiZ2V0Um93IiwiaWR4IiwiaWZFbHNlIiwiaW5zZXJ0IiwicGFyc2VJbnQiLCJhbHdheXMiLCJyb3ciLCJwYXJzZUZsb2F0IiwiaXRlbUtleXMiLCJmaWx0ZXIiLCJyb3dzIiwic29ydFJvd3MiLCJzb3J0V2l0aCIsImFzY2VuZCIsImNvbmQiLCJpc05pbCIsIkluZmluaXR5IiwiVCIsInNvcnRlZElkcyIsImRpZmYiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsInVwZGF0ZWRJdGVtcyIsInJlbW92ZUlkcyIsIl9yZWYzIiwiX3JlZjMkbWF4U2l6ZSIsIm1heFNpemUiLCJyZW1vdmVkIiwiYnlJZCIsImNoYW5nZXMiLCJ1cGRhdGVkIiwidG9SZXBsYWNlIiwibWF4SWR4IiwicGFyc2VkIiwiX3JvdyIsIl9yb3ckIiwiX3JvdyQyIiwicmF3VmFsdWUiLCJfcmVmNCIsIl9yZWY1IiwiX2lkIiwiZXhpc3RpbmciLCJfcm93MiIsImFsbFNvcnRlZCIsInNvcnRlZCIsIm1pc3NpbmciLCJhZGRlZCIsIl9pMiIsIl9pZDIiLCJfaWR4IiwiaW5zZXJ0ZWQiLCJfcm93MyIsInJlcGxhY2VkIiwiX3JlZjciLCJfaWR4MiIsIl9yb3c0IiwiX2lkeDMiLCJfYXJncyIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiaW5kZXhCeSIsInQwIiwidDEiLCJkb25lIiwiYWJydXB0IiwicHVzaCIsImpvaW4iLCJwb3AiLCJzdG9wIiwiX3giLCJ1bmlvblJvd3MiLCJ1bmlxQnkiLCJyb3dzRnJvbVNvdWxzIiwic291bHMiLCJhbGwiLCJyZWFkIiwib3B0cyIsIl9yZWYxMCRpbmRleGVyIiwiTGlzdGluZ05vZGUiLCJjYXRlZ29yaXplRGlmZiIsIm9yaWdpbmFsIiwiYWxsS2V5cyIsIl9yZWY5IiwiZGlmZklkIiwiX2dldFJvdzIiLCJvcmlnSWQiLCJDT01NQU5EX1JFIiwiU09VTF9ERUxJTUVURVIiLCJMSVNUSU5HX1NJWkUiLCJNQVhfUE9XX05PTkNFX1NJWkUiLCJNQVhfQVVUSE9SX0FMSUFTX1NJWkUiLCJNQVhfQVVUSE9SX0lEX1NJWkUiLCJNQVhfTElTVElOR19TT1VMX1BSRUZJWF9TSVpFIiwiTUFYX0xJU1RJTkdfU09VTF9JREVOVElGSUVSX1NJWkUiLCJNQVhfTElTVElOR19TT1VMX1NPUlRfU0laRSIsIk1BWF9MSVNUSU5HX1NPVUxfVFlQRV9TSVpFIiwiTUFYX0xJU1RJTkdfU09VTF9LSU5EX1NJWkUiLCJERUZBVUxUX0lOREVYRVIiLCJfTGlzdGluZ05vZGUiLCJlbXB0eVByb21pc2UiLCJyZXNvbHZlIiwidW5pb25BcnJheXMiLCJ1bmlvbiIsInRvcGljU291bHMiLCJwYXJhbXMiLCJfcmVmJHRvcGljcyIsInRvcGljcyIsImRheXMiLCJkYXlTdHJpbmdzIiwic3RhcnQiLCJkcyIsInNpbmdsZVRvcGljIiwidFNvdWxzIiwiaXRlbU1heCIsImZldGNoTW9yZSIsInRvcGljU291bCIsIm1vcmUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJzaW5nbGVEb21haW4iLCJzaW5nbGVBdXRob3IiLCJsaXN0aW5nSWRzIiwic2luZ2xlTGlzdGluZyIsImxpc3RpbmciLCJyZXBsaWVzVG9BdXRob3IiLCJfcmVmNiIsInJlcGxpZXNUb0F1dGhvcklkIiwiX3JlZjYkdHlwZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImF1dGhvcmVkU291bHMiLCJhdXRob3JlZFNvdWwiLCJzaW5nbGVTdWJtaXNzaW9uIiwic3VibWlzc2lvbklkIiwicHJlcGVuZCIsIm1ldGEiLCJyZXBseVRvU291bCIsIm9wU291bCIsIm1hdGNoIiwidGhpbmdpZCIsInRoaW5nVm90ZUNvdW50Iiwidm90ZVR5cGUiLCJjb3VudCIsInRoaW5nVm90ZXNVcCIsInRoaW5nVm90ZXNEb3duIiwidGhpbmdBbGxDb21tZW50c0NvdW50IiwiY29tcHV0ZVRoaW5nU2NvcmVzIiwiX3JlZjgiLCJ0aGluZ01ldGEiLCJfcmVmOSRkYXRhIiwiX3JlZjkkc2NvcmVzIiwic2NvcmVzIiwiX3JlZjEwIiwiX3JlZjExIiwidm90ZXMiLCJtdWx0aVRoaW5nTWV0YSIsInByb21pc2VzIiwibXVsdGlRdWVyeSIsInNpbmdsZVF1ZXJ5IiwicGx1cmFsIiwic2luZ2xlIiwiY29sbGF0ZSIsIml0ZW1zIiwibXVsdGlUb3BpYyIsIm11bHRpRG9tYWluIiwibXVsdGlBdXRob3IiLCJtdWx0aVN1Ym1pc3Npb24iLCJjdXJhdGVkIiwiYXV0aG9ySWRzIiwic3VibWlzc2lvbk9ubHkiLCJ4IiwidGhpbmdEYXRhRnJvbVNvdWxzIiwiX3JlZjEyIiwiX3JlZjEzIiwiaWRzMSIsImlkczIiLCJ1bmlxIiwidGhpbmdTY29yZXMiLCJ0aGluZ1JlcGxpZXMiLCJ0aGluZ0RhdGEiLCJ1c2VyUGFnZXMiLCJ3aWtpUGFnZUlkIiwidXNlck1ldGEiLCJ1c2VyQWxpYXMiLCJjcmVhdGVkQXQiLCJjcmVhdGVTY29wZSIsIm5hYiIsInNwbGl0RG9tYWlucyIsInNvcnRCeSIsInRvTG93ZXIiLCJkZWZhdWx0VG8iLCJQYXRoIiwic3BsaXRUb3BpY3MiLCJ3aXRoUm91dGUiLCJvYmoiLCJwYXRoT3IiLCJzdGF0ZSIsIkd1bk5vZGUiLCJsYXRlc3QiLCJsYXN0IiwidmFsdWVzIiwiZWRnZXMiLCJkZWNvZGVTRUEiLCJyYXdEYXRhIiwiR3VuIiwiU0VBIiwiaW5kZXhPZiIsIndpdGhvdXQiLCJmb3JFYWNoIiwidmVyaWZ5Iiwib3B0IiwicGFjayIsInVucGFjayIsImludFBhdGgiLCJkZWZpbml0aW9uIiwiZmlsdGVycyIsInZvdGVGaWx0ZXJzIiwiaXNQcmVzZW50IiwiZmlsdGVyRnVuY3Rpb25zIiwidm90ZUZpbHRlckZ1bmN0aW9ucyIsImFkZEZpbHRlciIsImFkZFZvdGVGaWx0ZXIiLCJhbGxvdyIsImFsaWFzZXMiLCJhdXRob3JzIiwiZG9tYWlucyIsImZpbmQiLCJpZGVudGljYWwiLCJraW5kcyIsInRlc3QiLCJkZW55IiwiYW5vbiIsInNpZ25lZCIsInVwc01pbiIsImx0ZSIsInVwc01heCIsImd0ZSIsImRvd25zTWluIiwiZG93bnNNYXgiLCJzY29yZU1pbiIsInNjb3JlTWF4IiwidGFncyIsImNtZHMiLCJ0YWdOYW1lIiwiY29udGVudEZpbHRlciIsImZuIiwidm90ZUZpbHRlciIsInRoaW5nRmlsdGVyIiwiZ2V0RmlsdGVyZWRJZHMiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9jYWxsZWUyIiwic29ydGVkUm93cyIsIl9yZWY0JGxpbWl0IiwibGltaXQiLCJfcmVmNCRjb3VudCIsIl9yZWY0JGFmdGVyIiwiZmlsdGVyRm4iLCJmaWx0ZXJlZCIsImZldGNoQmF0Y2giLCJfYXJnczIiLCJfY29udGV4dDIiLCJhZnRlciIsInNpemUiLCJpbkxpc3RpbmciLCJzZW50IiwiX3gzIiwic3BsaWNlIiwiX3gyIiwic3BlYyIsIm5lZWRzU2NvcmVzIiwibmVlZHNEYXRhIiwiX0xpc3RpbmdTb3J0IiwiaXRlbXNGcm9tVGhpbmdTb3VscyIsIkxpc3RpbmdTb3J0IiwiaXRlbUZyb21Tb3VsIiwic29ydEl0ZW1zIiwiaXRlbXNGcm9tVGhpbmdTZXRzIiwibWVyZ2VSaWdodCIsInRvcGljU291cmNlIiwibGlzdGluZ1BhdGhzIiwic291cmNlcyIsImxpc3RpbmdzIiwicmVwbGllcyIsInN1Ym1pc3Npb25JZHMiLCJjdXJhdG9yIiwiY3VyYXRlIiwic291cmNlTmFtZXMiLCJkZWYiLCJ0b0lkcyIsInZvdGVTb3J0IiwiaXNJZFN0aWNreSIsImNvbnRhaW5zIiwib3BzIiwidGltZVNvcnQiLCJzb3J0cyIsIm5ldyIsIm11bHRpcGx5Iiwib2xkIiwiYWN0aXZlIiwibGFzdEFjdGl2ZSIsInRvcCIsImRpc2N1c3NlZCIsInNlY29uZHMiLCJvcmRlciIsIk1hdGgiLCJsb2cxMCIsIm1heCIsImFicyIsImhvdCIsInNpZ24iLCJiZXN0IiwidXBzIiwieiIsInNxcnQiLCJjb250cm92ZXJzaWFsIiwiZG93bnMiLCJtYWduaXR1ZGUiLCJiYWxhbmNlIiwicG93IiwidG9JdGVtIiwidG9JdGVtcyIsImZyb21UaGluZ1NldHMiLCJwaXBlIiwiX0d1bk5vZGUiLCJ1cGRhdGVMaXN0aW5nIiwib3JjIiwibmV3U2NvcGUiLCJ3cml0ZSIsIl94NCIsIm9uUHV0IiwidXBkYXRlZFNvdWwiLCJ1cGRhdGVkSWRzIiwiaXNTdGlja3kiLCJlcXVhbHMiLCJnZXRBY2Nlc3NlcyIsImxpc3RlbiIsIl94NSIsIl94NiIsIl94NyIsIkxpc3RpbmdPcmFjbGUiLCJfZ3VuU3VwcHJlc3NvciIsInNjaGVtYSIsIm5ld2VzdCIsIl9zY2hlbWEiLCJzdWJzdHIiLCJzaWduZWRUaGluZ0RhdGFNYXRjaGVzIiwic2lnbmVkSWQiLCJnZXRJc1RoaW5nUmVsYXRlZEVkZ2UiLCJhanYiLCJub2RlVHlwZU5hbWUiLCJfcFNjaGVtYSIsIl9jUGF0aCIsInBhcmVudERhdGEiLCJwcm9wVGhpbmdJZCIsImNvbXBpbGUiLCJ0aGluZ0RhdGFIYXNoTWF0Y2hlcyIsInJlY29yZCIsIl8iLCJpc1ZvdGVWYWxpZCIsImFyZ29uMiIsInByZWZpeCIsIl9yZWY1JGFsZ29yaXRobSIsIl9yZWY1JGNvbmZpZyIsIkJ1ZmZlciIsImZyb20iLCJzYWx0IiwiaGFzaCIsInJhdyIsIm1hc2siLCJfcmVmNiRhbGdvcml0aG0iLCJFcnJvciIsImluaXRBanYiLCJhZGRLZXl3b3JkIiwidmFsaWRhdGUiLCJtb2RpZnlpbmciLCJzdXBwcmVzc29yIiwiY3JlYXRlU3VwcHJlc3NvciIsImluaXQiLCJndW5XaXJlSW5wdXQiLCJjb250ZXh0IiwibXNnIiwiX3RoaXMiLCJkaXNhYmxlVmFsaWRhdGlvbiIsInZhbGlkYXRlZCIsInRvIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsInN0YWNrIiwiVmFsaWRhdGlvbiIsIl9Ub3BpY0xpc3RpbmciLCJfRG9tYWluTGlzdGluZyIsIl9Db21tZW50TGlzdGluZyIsIl9TcGFjZUxpc3RpbmciLCJfSW5ib3hMaXN0aW5nIiwiX1Byb2ZpbGVMaXN0aW5nIiwidHlwZXMiLCJDb21tZW50TGlzdGluZyIsIkluYm94TGlzdGluZyIsIlByb2ZpbGVMaXN0aW5nIiwiTGlzdGluZ1R5cGUiLCJmcm9tUGF0aCIsIl9Ub2tlbml6ZXIiLCJvd25lcklkIiwic3BhY2VOYW1lIiwidG9rZW5pemVkIiwiVG9rZW5pemVyIiwidG9rZW5pemUiLCJnZXRWYWx1ZSIsImdldFZhbHVlcyIsImdldFZhbHVlQ2hhaW4iLCJnZXRQYWlycyIsIl9nZXRWYWx1ZUNoYWluMiIsIl9nZXRWYWx1ZUNoYWluMiQiLCJmcm9tUGFnZUF1dGhvciIsIl9nZXRWYWx1ZUNoYWluMiQyIiwiZnJvbVBhZ2VOYW1lIiwiZGlzcGxheU5hbWUiLCJ1bmlxdWVCeUNvbnRlbnQiLCJtb2RlcmF0b3JzIiwiaW5jbHVkZVJhbmtzIiwic3RpY2t5SWRzIiwic3VibWl0VG9waWNzIiwiY2hhdFRvcGljIiwidXNlRm9yQ29tbWVudHMiLCJkZWZhdWx0VGFiIiwiZGVmYXVsdFRhYlBhdGgiLCJmdW5jdGlvbnMiLCJyZXBsaWVzVG8iLCJ0b2tlbk1hcCIsImxpbmUiLCJ0b2tlbnMiLCJhc3NvY1BhdGgiLCJjaGVjayIsImtleXNJbiIsImdldExhc3RWYWx1ZSIsInBhaXJzIiwiX0xpc3RpbmdTcGVjIiwic291cmNlV2l0aERlZmF1bHRzIiwidGFiIiwiZ2V0Q29uZmlnIiwic3BhY2VDb25maWdQYWdlTmFtZSIsIlNwYWNlU3BlYyIsIl9QZWVyIiwiX0xpc3RpbmciLCJfVmFsaWRhdGlvbiIsIlBlZXIiLCJfQXV0aGVudGljYXRpb24iLCJsZWVjaCIsIm5vR3VuIiwibG9jYWxTdG9yYWdlIiwicGVyc2lzdCIsInJlc3QiLCJjZmciLCJyYWRpc2siLCJzdG9yZUZuIiwic3RvcmUiLCJhIiwicmV0cnkiLCJvbkxvZ2luIiwiQXV0aGVudGljYXRpb24iLCJzaWdudXAiLCJsb2dpbiIsImxvZ291dCIsInF1ZXJpZXMiLCJkaXNzb2MiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZGF5TnVtIiwiZ2V0VVRDRGF0ZSIsInVybFN0ciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJvayIsImZhaWwiLCJhY2siLCJsZWF2ZSIsImF1dGgiLCJpcyIsIl9vbkxvZ2luIiwiX0xpc3RpbmdRdWVyeSIsIl9MaXN0aW5nT3JhY2xlIiwiX0xpc3RpbmdUeXBlIiwiX1NwYWNlU3BlYyIsIkxpc3RpbmciLCJmcm9tU3BlYyIsIkxpc3RpbmdRdWVyeSIsInBhdGhzIiwiZ2V0U3BlYyIsImhhc0luZGV4ZXIiLCJjYWxjdWxhdGUiLCJfUGF0aCIsInN1Ym1pdFRvIiwicm91dGVQcm9wcyIsImdldFJvd3NGcm9tU291bHMiLCJfcmVmNCRsYXRlc3QiLCJvcmlnaW5hbERhdGEiLCJkaWZmRGF0YSIsIl9MaXN0aW5nTm9kZSRjYXRlZ29yaSIsIl9MaXN0aW5nTm9kZSRjYXRlZ29yaTIiLCJyZW1vdmVkSWRzIiwidm90ZUNvdW50c01hdGNoIiwidGhpbmdNYXRjaCIsImF1dGhvck1hdGNoIiwiZXhpc3RpbmdLZXlzIiwiU0VBQXV0aG9yIiwiZnJvbVBhZ2VJZCIsIndvcmsiLCJtZXRob2QiLCJwcmlvcml0eSIsIl9yZWYkc29ydCIsInVwZGF0ZWRBdXRob3JlZCIsInJlcGx5SWRzIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGlCQUFBQyxTQUFBLGlCQUFBQyxPQUNBQSxPQUFBRCxRQUFBRCxFQUFBRyxRQUFBLFNBQUFBLFFBQUEsYUFBQUEsUUFBQSxlQUFBQSxRQUFBLHVCQUFBQSxRQUFBLGdCQUFBQSxRQUFBLFVBQUFBLFFBQUEsa0JBQUFBLFFBQUEsV0FDQSxtQkFBQUMsZUFBQUMsSUFDQUQs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SUFBVW5ELEVBQVZtRCxFQUFVbkQsU0FBVTlFLEVBQXBCaUksRUFBb0JqSSxLQUFNMkcsRUFBMUJzQixFQUEwQnRCLEtBQTFCLE9BQ3RCeWpCLEVBQUFwZCxZQUFZVyxVQUNWRSxFQUNBUSxFQUFBaEMsT0FBT3pGLFFBQ1Asa0JBQ0EsV0FBQWxHLE9BQ1lvRSxHQURaLFFBQUFwRSxPQUVVVixHQUNSLHFCQUhGLFFBQUFVLE9BSVVpRyxJQUpWakcsT0FBQTRWLEVBS0s5VyxFQUFFaU4sSUFBSSxTQUFBNmQsR0FBRyxhQUFBNXBCLE9BQVc0cEIsRUFBWCxXQUFBNXBCLE9BQXdCb0UsRUFBeEIsS0FBQXBFLE9BQW9DNHBCLElBQU90a0IsS0FDdkRtTixLQUFLLFNBSUxvYSxHQUFVLEVBQUFobEIsRUFBQXFGLE9BQU0sU0FBQ0MsRUFBTzRKLEdBQVIsT0FDcEI5SixFQUFVRSxFQUFPNEosR0FBTzdNLEtBQUt3ZixFQUFBcGQsWUFBWUMsY0FHOUI2YSxFQUFpQjRGLEVBQUE1UyxLQUFLRSxVQUFVLENBQUVyVCxLQXRCbEMsOEJBc0J3QzNCLE9BQU0ySCxZQUFXNGYiLCJmaWxlIjoibm90YWJ1Zy1wZWVyLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJhbWRhXCIpLCByZXF1aXJlKFwiZ3VuLXNjb3BlXCIpLCByZXF1aXJlKFwib2JqZWN0LWhhc2hcIiksIHJlcXVpcmUoXCJndW4tc3VwcHJlc3Nvci1zZWFyXCIpLCByZXF1aXJlKFwicm91dGUtcGFyc2VyXCIpLCByZXF1aXJlKFwidXJpLWpzXCIpLCByZXF1aXJlKFwiZ3VuLXN1cHByZXNzb3JcIiksIHJlcXVpcmUoXCJhcmdvbjJcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJub3RhYnVnLXBlZXJcIiwgW1wicmFtZGFcIiwgXCJndW4tc2NvcGVcIiwgXCJvYmplY3QtaGFzaFwiLCBcImd1bi1zdXBwcmVzc29yLXNlYXJcIiwgXCJyb3V0ZS1wYXJzZXJcIiwgXCJ1cmktanNcIiwgXCJndW4tc3VwcHJlc3NvclwiLCBcImFyZ29uMlwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJub3RhYnVnLXBlZXJcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJyYW1kYVwiKSwgcmVxdWlyZShcImd1bi1zY29wZVwiKSwgcmVxdWlyZShcIm9iamVjdC1oYXNoXCIpLCByZXF1aXJlKFwiZ3VuLXN1cHByZXNzb3Itc2VhclwiKSwgcmVxdWlyZShcInJvdXRlLXBhcnNlclwiKSwgcmVxdWlyZShcInVyaS1qc1wiKSwgcmVxdWlyZShcImd1bi1zdXBwcmVzc29yXCIpLCByZXF1aXJlKFwiYXJnb24yXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJub3RhYnVnLXBlZXJcIl0gPSBmYWN0b3J5KHJvb3RbXCJyYW1kYVwiXSwgcm9vdFtcImd1bi1zY29wZVwiXSwgcm9vdFtcIm9iamVjdC1oYXNoXCJdLCByb290W1wiZ3VuLXN1cHByZXNzb3Itc2VhclwiXSwgcm9vdFtcInJvdXRlLXBhcnNlclwiXSwgcm9vdFtcInVyaS1qc1wiXSwgcm9vdFtcImd1bi1zdXBwcmVzc29yXCJdLCByb290W1wiYXJnb24yXCJdKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTZfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTdfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMThfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTlfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMjZfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMjdfXykge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyNCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXzsiLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCJyb3V0ZS1wYXJzZXJcIjtcbmltcG9ydCAqIGFzIHNlYSBmcm9tIFwiZ3VuLXN1cHByZXNzb3Itc2VhclwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5cbmNvbnN0IGRlZmluaXRpb25zID0ge1xuICAuLi5zZWEuQVVUSF9TQ0hFTUEsXG4gIHRvcGljTmFtZToge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgbWluTGVuZ3RoOiAxLFxuICAgIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9UT1BJQ19TSVpFXG4gIH0sXG5cbiAgVG9waWNEYXk6IHtcbiAgICB0aXRsZTogXCJUb3BpYyBEYXlcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBIHNpbmdsZSBkYXkgb2YgdGhpbmdzIGluIGEgdG9waWNcIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90b3BpY3MvOnRvcGljTmFtZS9kYXlzLzp5ZWFyLzptb250aC86ZGF5YCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdG9waWNOYW1lOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RvcGljTmFtZVwiIH0sXG4gICAgICAgIHllYXI6IHsgdHlwZTogXCJudW1iZXJcIiwgbWluaW11bTogMjAxOCwgbWF4aW11bTogMjEwMCB9LFxuICAgICAgICBtb250aDogeyB0eXBlOiBcIm51bWJlclwiLCBtaW5pbXVtOiAxLCBtYXhpbXVtOiAxMiB9LFxuICAgICAgICBkYXk6IHsgdHlwZTogXCJudW1iZXJcIiwgbWluaW11bTogMSwgbWF4aW11bTogMzEgfVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiBbXCJ0b3BpY05hbWVcIiwgXCJ5ZWFyXCIsIFwibW9udGhcIiwgXCJkYXlcIl1cbiAgICB9LFxuICAgIHByb3BzRnJvbVNvdWw6IHsgbmFtZTogXCJ0b3BpY05hbWVcIiB9LFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiRGVwcmVjYXRlZCBhcyB1bm5lY2Vzc2FyeVwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiXG4gICAgICB9XG4gICAgfSxcbiAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xuICAgICAgZWRnZU1hdGNoZXNLZXk6IHRydWUsXG4gICAgICBhbnlPZjogW1xuICAgICAgICB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9UaGluZ0VkZ2VcIiB9LFxuICAgICAgICB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9Ub3BpY0VkZ2VcIiB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuXG4gIFRvcGljOiB7XG4gICAgdGl0bGU6IFwiVG9waWNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBbGwgdGhpbmdzIGluIGEgdG9waWNcIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90b3BpY3MvOnRvcGljTmFtZWAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHRvcGljTmFtZTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90b3BpY05hbWVcIiB9XG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFtcInRvcGljTmFtZVwiXVxuICAgIH0sXG4gICAgcHJvcHNGcm9tU291bDogeyBuYW1lOiBcInRvcGljTmFtZVwiIH0sXG4gICAgcHJvcGVydGllczoge1xuICAgICAgbmFtZToge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJEZXByZWNhdGVkIGFzIHVubmVjZXNzYXJ5XCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XG4gICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgIGFueU9mOiBbXG4gICAgICAgIHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH0sXG4gICAgICAgIHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1RvcGljRWRnZVwiIH1cbiAgICAgIF1cbiAgICB9XG4gIH0sXG5cbiAgZG9tYWluTmFtZToge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgbWluTGVuZ3RoOiAxLFxuICAgIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9ET01BSU5fU0laRVxuICB9LFxuXG4gIERvbWFpbjoge1xuICAgIHRpdGxlOiBcIkRvbWFpblwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkFsbCB0aGluZ3MgaW4gYSBkb21haW5cIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS9kb21haW5zLzpkb21haW5OYW1lYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgZG9tYWluTmFtZTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9kb21haW5OYW1lXCIgfVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiBbXCJkb21haW5OYW1lXCJdXG4gICAgfSxcbiAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xuICAgICAgZWRnZU1hdGNoZXNLZXk6IHRydWUsXG4gICAgICBhbnlPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH1dXG4gICAgfVxuICB9LFxuXG4gIHVybDogeyB0eXBlOiBbXCJudWxsXCIsIFwic3RyaW5nXCJdLCBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfVVJMX1NJWkUgfSxcbiAgVVJMOiB7XG4gICAgdGl0bGU6IFwiVVJMXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWxsIHRoaW5ncyBmb3IgYSBnaXZlbiBVUkxcIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS91cmxzL1xcKnVybGAsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdXJsOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3VybFwiIH1cbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogW1widXJsXCJdXG4gICAgfSxcbiAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xuICAgICAgZWRnZU1hdGNoZXNLZXk6IHRydWUsXG4gICAgICBhbnlPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH1dXG4gICAgfVxuICB9LFxuXG4gIHRoaW5nSWQ6IHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9IQVNIX1NJWkVcbiAgfSxcblxuICB0aGluZ1NvdWw6IHtcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB0aGluZ0lkOiB7IFwiI3JlZlwiOiBcIiNkZWZpbml0aW9ucy90aGluZ0lkXCIgfVxuICAgIH1cbiAgfSxcblxuICBUaGluZ0FsbENvbW1lbnRzOiB7XG4gICAgdGl0bGU6IFwiVGhpbmcgQWxsIENvbW1lbnRzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWxsIGNvbW1lbnRzIGZvciBhIGdpdmVuIHN1Ym1pc3Npb25cIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90aGluZ3MvOnRoaW5nSWQvYWxsY29tbWVudHNgLFxuICAgICAgYWxsT2Y6IFt7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nU291bFwiIH1dXG4gICAgfSxcbiAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xuICAgICAgZWRnZU1hdGNoZXNLZXk6IHRydWUsXG4gICAgICBhbnlPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH1dXG4gICAgfVxuICB9LFxuXG4gIFRoaW5nQ29tbWVudHM6IHtcbiAgICB0aXRsZTogXCJUaGluZyBDb21tZW50c1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkRpcmVjdCByZXBsaWVzIHRvIGEgdGhpbmdcIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90aGluZ3MvOnRoaW5nSWQvY29tbWVudHNgLFxuICAgICAgYWxsT2Y6IFt7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nU291bFwiIH1dXG4gICAgfSxcbiAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xuICAgICAgZWRnZU1hdGNoZXNLZXk6IHRydWUsXG4gICAgICBhbnlPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH1dXG4gICAgfVxuICB9LFxuXG4gIHRpbWVzdGFtcDogeyB0eXBlOiBbXCJudW1iZXJcIiwgXCJzdHJpbmdcIl0gfSxcbiAgdGhpbmdLaW5kOiB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfVEhJTkdfS0lORF9TSVpFXG4gIH0sXG5cbiAgVGhpbmc6IHtcbiAgICB0aXRsZTogXCJUaGluZyBSZWZlcmVuY2VcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiVGhlc2UgYXJlIHN1Ym1pc3Npb25zLCBjb21tZW50cywgY2hhdCBtZXNzYWdlcyBhbmQgd2lraSBwYWdlc1wiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5ncy86dGhpbmdJZGAsXG4gICAgICBhbGxPZjogW3sgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdTb3VsXCIgfV1cbiAgICB9LFxuICAgIHByb3BzRnJvbVNvdWw6IHsgaWQ6IFwidGhpbmdJZFwiIH0sXG4gICAgcHJvcGVydGllczoge1xuICAgICAgaWQ6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3RoaW5nSWRcIiB9LFxuICAgICAga2luZDogeyBcIiNyZWZcIjogXCIjL2RlZmluaXRpb25zL3RoaW5nS2luZFwiIH0sXG4gICAgICB0aW1lc3RhbXA6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3RpbWVzdGFtcFwiIH0sXG4gICAgICBvcmlnaW5hbEhhc2g6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3RoaW5nSWRcIiB9LFxuICAgICAgZGF0YToge1xuICAgICAgICBvbmVPZjogW1xuICAgICAgICAgIHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRGF0YUVkZ2VcIiB9LFxuICAgICAgICAgIHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRGF0YVNpZ25lZEVkZ2VcIiB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB0b3BpYzoge1xuICAgICAgICBhbnlPZjogW1xuICAgICAgICAgIHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1RvcGljRWRnZVwiIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU29tZSBvbGQgdGhpbmdzIGhhZCBnZW5lcmljIHRvcGljIHNvdWxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICBcIiNcIjogeyB0eXBlOiBcInN0cmluZ1wiLCBtYXhMZW5ndGg6IDQyIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1aXJlZDogW1wiI1wiXVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGRvbWFpbjogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvRG9tYWluRWRnZVwiIH0sXG4gICAgICB1cmw6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1VSTEVkZ2VcIiB9LFxuICAgICAgY29tbWVudHM6IHsgdGhpbmdSZWxhdGVkRWRnZTogXCJUaGluZ0NvbW1lbnRzXCIgfSxcbiAgICAgIGFsbGNvbW1lbnRzOiB7IHRoaW5nUmVsYXRlZEVkZ2U6IFwiVGhpbmdBbGxDb21tZW50c1wiIH0sXG4gICAgICB2b3Rlc3VwOiB7IHRoaW5nUmVsYXRlZEVkZ2U6IFwiVGhpbmdWb3Rlc1VwXCIgfSxcbiAgICAgIHZvdGVzZG93bjogeyB0aGluZ1JlbGF0ZWRFZGdlOiBcIlRoaW5nVm90ZXNEb3duXCIgfSxcbiAgICAgIG9wOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9UaGluZ0VkZ2VcIiB9LFxuICAgICAgcmVwbHlUbzogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVGhpbmdFZGdlXCIgfSxcbiAgICAgIGF1dGhvcjogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvU0VBQXV0aG9yRWRnZVwiIH1cbiAgICB9LFxuXG4gICAgYW55T2Y6IFtcbiAgICAgIHtcbiAgICAgICAgYWxsT2Y6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGluZ0hhc2hNYXRjaGVzU291bDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgYW55T2Y6IFtcbiAgICAgICAgICAgICAgeyBzaWduZWRUaGluZ0RhdGFNYXRjaGVzVGhpbmc6IHRydWUgfSxcbiAgICAgICAgICAgICAgeyB0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoOiB0cnVlIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7IGlzTGVnYWN5VGhpbmc6IHRydWUgfSxcbiAgICAgIHtcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJTZWxmIHZlcmlmeWluZyBjYW4gYmUgdXBkYXRlZCBpbiBpc29sYXRpb25cIixcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGlkOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy90aGluZ0lkXCIgfSxcbiAgICAgICAgICBjb21tZW50czogeyB0aGluZ1JlbGF0ZWRFZGdlOiBcIlRoaW5nQ29tbWVudHNcIiB9LFxuICAgICAgICAgIGFsbGNvbW1lbnRzOiB7IHRoaW5nUmVsYXRlZEVkZ2U6IFwiVGhpbmdBbGxDb21tZW50c1wiIH0sXG4gICAgICAgICAgdm90ZXN1cDogeyB0aGluZ1JlbGF0ZWRFZGdlOiBcIlRoaW5nVm90ZXNVcFwiIH0sXG4gICAgICAgICAgdm90ZXNkb3duOiB7IHRoaW5nUmVsYXRlZEVkZ2U6IFwiVGhpbmdWb3Rlc0Rvd25cIiB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG5cbiAgUHJvb2ZPZldvcmtWb3Rlczoge1xuICAgICRhc3luYzogdHJ1ZSxcbiAgICBrZXlzQXJlUHJvb2ZzT2ZXb3JrOiB7XG4gICAgICBhbGdvcml0aG06IFwiYXJnb24yZFwiLFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIGNvbXBsZXhpdHk6IDYsXG4gICAgICAgIGhhc2hMZW5ndGg6IDMyLFxuICAgICAgICB0aW1lQ29zdDogMSxcbiAgICAgICAgbWVtb3J5Q29zdDogMTAyNDAsXG4gICAgICAgIHBhcmFsbGVsaXNtOiAxXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIFRoaW5nVm90ZXNVcDoge1xuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5ncy86dGhpbmdJZC92b3Rlc3VwYCxcbiAgICAgIGFsbE9mOiBbeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90aGluZ1NvdWxcIiB9XVxuICAgIH0sXG4gICAgYWxsT2Y6IFt7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9Qcm9vZk9mV29ya1ZvdGVzXCIgfV1cbiAgfSxcblxuICBUaGluZ1ZvdGVzRG93bjoge1xuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5ncy86dGhpbmdJZC92b3Rlc2Rvd25gLFxuICAgICAgYWxsT2Y6IFt7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nU291bFwiIH1dXG4gICAgfSxcbiAgICBhbGxPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL1Byb29mT2ZXb3JrVm90ZXNcIiB9XVxuICB9LFxuXG4gIFRoaW5nRGF0YToge1xuICAgIHRpdGxlOiBcIlVuc2lnbmVkIFRoaW5nIERhdGFcIixcbiAgICBkZXNjcmlwdGlvbjogXCJUaGlzIGlzIHRoZSBhY3R1YWwgY29udGVudCBvZiBhIHRoaW5nXCIsXG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vdGhpbmdzLzp0aGluZ0lkL2RhdGFgLFxuICAgICAgYWxsT2Y6IFt7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nU291bFwiIH1dLFxuICAgICAgcmVxdWlyZWQ6IFtcInRoaW5nSWRcIl1cbiAgICB9LFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIGtpbmQ6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3RoaW5nS2luZFwiIH0sXG4gICAgICB0aXRsZToge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBtaW5MZW5ndGg6IDEsXG4gICAgICAgIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9USElOR19USVRMRV9TSVpFXG4gICAgICB9LFxuICAgICAgdG9waWM6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3RvcGljTmFtZVwiIH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHR5cGU6IFtcIm51bGxcIiwgXCJzdHJpbmdcIl0sXG4gICAgICAgIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9USElOR19CT0RZX1NJWkVcbiAgICAgIH0sXG4gICAgICBhdXRob3I6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3NlYUFsaWFzXCIgfSxcbiAgICAgIGF1dGhvcklkOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH0sXG4gICAgICBvcElkOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy90aGluZ0lkXCIgfSxcbiAgICAgIHJlcGx5VG9JZDogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvdGhpbmdJZFwiIH0sXG4gICAgICBkb21haW46IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL2RvbWFpbk5hbWVcIiB9LFxuICAgICAgdXJsOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy91cmxcIiB9LFxuICAgICAgdGltZXN0YW1wOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy90aW1lc3RhbXBcIiB9XG4gICAgfSxcbiAgICB0aGluZ0RhdGFIYXNoTWF0Y2hlc1NvdWw6IHRydWVcbiAgfSxcblxuICBUaGluZ0RhdGFTaWduZWQ6IHtcbiAgICB0aXRsZTogXCJTaWduZWQgVGhpbmcgRGF0YVwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJUaGlzIGlzIHRoZSBhY3R1YWwgY29udGVudCBvZiBhIHRoaW5nLCBjcnlwdG9ncmFwaGljYWxseSBzaWduZWRcIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90aGluZ3MvOnRoaW5nSWQvZGF0YX46YXV0aG9ySWQuYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdGhpbmdJZDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90aGluZ0lkXCIgfSxcbiAgICAgICAgYXV0aG9ySWQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9XG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFtcInRoaW5nSWRcIiwgXCJhdXRob3JJZFwiXVxuICAgIH0sXG4gICAgcHJvcGVydGllczoge1xuICAgICAga2luZDogeyBzZWE6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdLaW5kXCIgfSB9LFxuICAgICAgdGl0bGU6IHtcbiAgICAgICAgc2VhOiB7XG4gICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICBtaW5MZW5ndGg6IDEsXG4gICAgICAgICAgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX1RISU5HX1RJVExFX1NJWkVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvcGljOiB7IHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90b3BpY05hbWVcIiB9IH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHNlYToge1xuICAgICAgICAgIHR5cGU6IFtcIm51bGxcIiwgXCJzdHJpbmdcIl0sXG4gICAgICAgICAgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX1RISU5HX0JPRFlfU0laRVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYXV0aG9yOiB7XG4gICAgICAgIHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBbGlhc1wiIH1cbiAgICAgIH0sXG4gICAgICBhdXRob3JJZDogeyBzZWE6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9IH0sXG4gICAgICBvcElkOiB7IHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90aGluZ0lkXCIgfSB9LFxuICAgICAgcmVwbHlUb0lkOiB7IHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90aGluZ0lkXCIgfSB9LFxuICAgICAgZG9tYWluOiB7IHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9kb21haW5OYW1lXCIgfSB9LFxuICAgICAgdXJsOiB7IHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy91cmxcIiB9IH0sXG4gICAgICB0aW1lc3RhbXA6IHsgc2VhOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RpbWVzdGFtcFwiIH0gfVxuICAgIH1cbiAgfSxcblxuICBUaGluZ1ZvdGVDb3VudHM6IHtcbiAgICB0aXRsZTogXCJUaGluZyBWb3RlIENvdW50c1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkFnZ3JlZ2F0ZWQgY291bnRzIGZyb20gYSB0YWJ1bGF0b3JcIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90aGluZ3MvOnRoaW5nSWQvdm90ZWNvdW50c0B+OnRhYnVsYXRvci5gLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB0aGluZ0lkOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nSWRcIiB9LFxuICAgICAgICB0YWJ1bGF0b3I6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB1cDogeyBzZWE6IHsgdHlwZTogW1wibnVtYmVyXCIsIFwic3RyaW5nXCJdIH0gfSxcbiAgICAgIGRvd246IHsgc2VhOiB7IHR5cGU6IFtcIm51bWJlclwiLCBcInN0cmluZ1wiXSB9IH0sXG4gICAgICBjb21tZW50OiB7IHNlYTogeyB0eXBlOiBbXCJudW1iZXJcIiwgXCJzdHJpbmdcIl0gfSB9LFxuICAgICAgc2NvcmU6IHsgc2VhOiB7IHR5cGU6IFtcIm51bWJlclwiLCBcInN0cmluZ1wiXSB9IH0sXG4gICAgICBjb21tYW5kczogeyBzZWE6IHsgdHlwZTogW1wib2JqZWN0XCIsIFwic3RyaW5nXCJdIH0gfVxuICAgIH1cbiAgfSxcblxuICBMaXN0aW5nRGF0YToge1xuICAgICRhc3luYzogdHJ1ZSxcbiAgICB0aXRsZTogXCJMaXN0aW5nIE5vZGUgRGF0YVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlNoYXJlZCBkZXNjcmlwdGlvbiBvZiBsaXN0aW5nIHByb3BlcnRpZXNcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIGlkczoge1xuICAgICAgICBzZWE6IHsgdHlwZTogXCJzdHJpbmdcIiwgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX0xJU1RJTkdfSURTX1NJWkUgfVxuICAgICAgfSxcbiAgICAgIHNvdXJjZToge1xuICAgICAgICBzZWE6IHsgdHlwZTogXCJzdHJpbmdcIiwgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX0xJU1RJTkdfU09VUkNFX1NJWkUgfVxuICAgICAgfSxcblxuICAgICAgLy8gWFhYOiByZXN0IGFyZSBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHNvdXJjZVxuICAgICAgbmFtZToge1xuICAgICAgICBzZWE6IHsgdHlwZTogW1wic3RyaW5nXCIsIFwibnVsbFwiXSwgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX1RPUElDX1NJWkUgfVxuICAgICAgfSxcbiAgICAgIHN1Ym1pdFRvcGljOiB7XG4gICAgICAgIHNlYTogeyB0eXBlOiBcInN0cmluZ1wiLCBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfVE9QSUNfU0laRSB9XG4gICAgICB9LFxuICAgICAgdGFiczoge1xuICAgICAgICBzZWE6IHsgdHlwZTogXCJzdHJpbmdcIiwgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX0xJU1RJTkdfVEFCU19TSVpFIH1cbiAgICAgIH0sXG4gICAgICBjdXJhdG9yczoge1xuICAgICAgICBzZWE6IHsgdHlwZTogXCJzdHJpbmdcIiwgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX0xJU1RJTkdfU09VUkNFX1NJWkUgfVxuICAgICAgfSxcbiAgICAgIGNlbnNvcnM6IHtcbiAgICAgICAgc2VhOiB7IHR5cGU6IFwic3RyaW5nXCIsIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9MSVNUSU5HX1NPVVJDRV9TSVpFIH1cbiAgICAgIH0sXG4gICAgICB1c2VySWQ6IHsgc2VhOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfSB9LFxuICAgICAgb3BJZDogeyBzZWE6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdJZFwiIH0gfSxcbiAgICAgIGlzQ2hhdDogeyBzZWE6IHsgdHlwZTogW1wiYm9vbGVhblwiLCBcInN0cmluZ1wiXSB9IH1cbiAgICB9LFxuICAgIHBhdHRlcm5Qcm9wZXJ0aWVzOiB7XG4gICAgICBcIl5kKyRcIjogeyBzZWE6IHsgdHlwZTogXCJzdHJpbmdcIiB9IH1cbiAgICB9XG4gIH0sXG5cbiAgc29ydE5hbWU6IHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIGVudW06IFtcbiAgICAgIFwibmV3XCIsXG4gICAgICBcIm9sZFwiLFxuICAgICAgXCJhY3RpdmVcIixcbiAgICAgIFwidG9wXCIsXG4gICAgICBcImNvbW1lbnRzXCIsXG4gICAgICBcImRpc2N1c3NlZFwiLFxuICAgICAgXCJob3RcIixcbiAgICAgIFwiYmVzdFwiLFxuICAgICAgXCJjb250cm92ZXJzaWFsXCIsXG4gICAgICBcInJhbmRvbVwiLFxuICAgICAgXCJmaXJlaG9zZVwiLFxuICAgICAgXCJjaGF0XCJcbiAgICBdXG4gIH0sXG5cbiAgVG9waWNMaXN0aW5nOiB7XG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vdC86dG9waWMvOnNvcnRAfjppbmRleGVyLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHRvcGljOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RvcGljTmFtZVwiIH0sXG4gICAgICAgIHNvcnQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc29ydE5hbWVcIiB9LFxuICAgICAgICBpbmRleGVyOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWxsT2Y6IFt7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9MaXN0aW5nRGF0YVwiIH1dXG4gIH0sXG5cbiAgRG9tYWluTGlzdGluZzoge1xuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L2RvbWFpbi86ZG9tYWluLzpzb3J0QH46aW5kZXhlci5gLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBkb21haW46IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvZG9tYWluTmFtZVwiIH0sXG4gICAgICAgIHNvcnQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc29ydE5hbWVcIiB9LFxuICAgICAgICBpbmRleGVyOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWxsT2Y6IFt7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9MaXN0aW5nRGF0YVwiIH1dXG4gIH0sXG5cbiAgVGhpbmdDb21tZW50c0xpc3Rpbmc6IHtcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90aGluZ3MvOnRoaW5nSWQvY29tbWVudHMvOnNvcnRAfjppbmRleGVyLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHRoaW5nSWQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdJZFwiIH0sXG4gICAgICAgIHNvcnQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc29ydE5hbWVcIiB9LFxuICAgICAgICBpbmRleGVyOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWxsT2Y6IFt7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9MaXN0aW5nRGF0YVwiIH1dXG4gIH0sXG5cbiAgdXNlckxpc3RpbmdUeXBlOiB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBlbnVtOiBbXCJvdmVydmlld1wiLCBcInN1Ym1pdHRlZFwiLCBcImNvbW1lbnRzXCIsIFwiY29tbWFuZHNcIiwgXCJjb21tZW50ZWRcIl1cbiAgfSxcblxuICBBdXRob3JSZXBsaWVzTGlzdGluZzoge1xuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke1xuICAgICAgICBDb25zdGFudHMuUFJFRklYXG4gICAgICB9L3VzZXIvOmF1dGhvcklkL3JlcGxpZXMvOnR5cGUvOnNvcnRAfjppbmRleGVyLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGF1dGhvcklkOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfSxcbiAgICAgICAgc29ydDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zb3J0TmFtZVwiIH0sXG4gICAgICAgIGluZGV4ZXI6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9LFxuICAgICAgICB0eXBlOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3VzZXJMaXN0aW5nVHlwZVwiIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFsbE9mOiBbeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvTGlzdGluZ0RhdGFcIiB9XVxuICB9LFxuXG4gIEF1dGhvclByb2ZpbGVMaXN0aW5nOiB7XG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vdXNlci86YXV0aG9ySWQvOnR5cGUvOnNvcnRAfjppbmRleGVyLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGF1dGhvcklkOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfSxcbiAgICAgICAgc29ydDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zb3J0TmFtZVwiIH0sXG4gICAgICAgIGluZGV4ZXI6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9LFxuICAgICAgICB0eXBlOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3VzZXJMaXN0aW5nVHlwZVwiIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFsbE9mOiBbeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvTGlzdGluZ0RhdGFcIiB9XVxuICB9LFxuXG4gIFNwYWNlTGlzdGluZzoge1xuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke1xuICAgICAgICBDb25zdGFudHMuUFJFRklYXG4gICAgICB9L3VzZXIvOmF1dGhvcklkL3NwYWNlcy86bmFtZS86c29ydEB+OmluZGV4ZXIuYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0aG9ySWQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9LFxuICAgICAgICBzb3J0OiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NvcnROYW1lXCIgfSxcbiAgICAgICAgaW5kZXhlcjogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH0sXG4gICAgICAgIG5hbWU6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdG9waWNOYW1lXCIgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWxsT2Y6IFt7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9MaXN0aW5nRGF0YVwiIH1dXG4gIH0sXG5cbiAgQXV0aG9yQ29tbWVudHM6IHtcbiAgICB0aXRsZTogXCJBdXRob3IncyBDb21tZW50c1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkFsbCBvZiBhbiBhdXRob3JzIGNvbW1lbnRzIHNob3VsZCBiZSBsaW5rZWQgaGVyZVwiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L2NvbW1lbnRzfjphdXRob3JJZC5gLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBhdXRob3JJZDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH1cbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogW1wiYXV0aG9ySWRcIl1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XG4gICAgICBzZWE6IHtcbiAgICAgICAgZWRnZU1hdGNoZXNLZXk6IHRydWUsXG4gICAgICAgIGFueU9mOiBbeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9UaGluZ0VkZ2VcIiB9XVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBBdXRob3JTdWJtaXNzaW9uczoge1xuICAgIHRpdGxlOiBcIkF1dGhvcidzIFN1Ym1pc3Npb25zXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWxsIG9mIGFuIGF1dGhvcidzIHN1Ym1pc3Npb25zIHNob3VsZCBiZSBsaW5rZWQgaGVyZVwiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3N1Ym1pc3Npb25zfjphdXRob3JJZC5gLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBhdXRob3JJZDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH1cbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogW1wiYXV0aG9ySWRcIl1cbiAgICB9XG4gIH0sXG5cbiAgQXV0aG9yVGhpbmdzOiB7XG4gICAgdGl0bGU6IFwiQXV0aG9yJ3MgVGhpbmdzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWxsIG9mIGFuIGF1dGhvcidzIHRoaW5ncyBzaG91bGQgYmUgbGlua2VkIGhlcmVcIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90aGluZ3N+OmF1dGhvcklkLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGF1dGhvcklkOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiBbXCJhdXRob3JJZFwiXVxuICAgIH0sXG4gICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHtcbiAgICAgIHNlYToge1xuICAgICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgICAgYW55T2Y6IFt7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH1dXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIEF1dGhvclBhZ2VzOiB7XG4gICAgdGl0bGU6IFwiQXV0aG9yIFBhZ2UgTWFwXCIsXG4gICAgZGVzY3JpcHRpb246IFwiTWFwcGluZyBvZiBwYWdlIG5hbWVzIHRvIHRoaW5nc1wiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3BhZ2VzfjphdXRob3JJZC5gLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBhdXRob3JJZDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH1cbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogW1wiYXV0aG9ySWRcIl1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XG4gICAgICBzZWE6IHtcbiAgICAgICAgZWRnZU1hdGNoZXNLZXk6IHRydWUsXG4gICAgICAgIGFueU9mOiBbeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9UaGluZ0VkZ2VcIiB9XVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuY29uc3Qgcm91dGVzID0gUi5rZXlzKGRlZmluaXRpb25zKS5yZWR1Y2UoKHJlc3VsdCwgbmFtZSkgPT4ge1xuICBjb25zdCBwYXR0ZXJuID0gUi5wYXRoKFtuYW1lLCBcInNvdWxcIiwgXCJwYXR0ZXJuXCJdLCBkZWZpbml0aW9ucyk7XG5cbiAgaWYgKCFwYXR0ZXJuKSByZXR1cm4gcmVzdWx0O1xuICByZXR1cm4gUi5hc3NvYyhuYW1lLCBuZXcgUm91dGUocGF0dGVybiksIHJlc3VsdCk7XG59KTtcblxuY29uc3QgZGVmc1dpdGhSb3V0ZXMgPSBSLmNvbXBvc2UoXG4gIFIucmVkdWNlKFxuICAgIChyZXMsIFtuYW1lLCByb3V0ZV0pID0+XG4gICAgICBSLmFzc29jKG5hbWUsIFIuYXNzb2MoXCJyb3V0ZVwiLCByb3V0ZSwgUi5wcm9wKG5hbWUsIGRlZmluaXRpb25zKSksIHJlcyksXG4gICAge31cbiAgKSxcbiAgUi50b1BhaXJzXG4pKHJvdXRlcyk7XG5cbmV4cG9ydCBjb25zdCBTY2hlbWEgPSB7XG4gIC4uLmRlZnNXaXRoUm91dGVzLFxuICBkZWZpbml0aW9ucyxcbiAgcm91dGVzXG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IFByb21pc2UgfSBmcm9tIFwiZ3VuLXNjb3BlXCI7XG5pbXBvcnQgb2JqSGFzaCBmcm9tIFwib2JqZWN0LWhhc2hcIjtcbmltcG9ydCB7IHBhcnNlIGFzIHBhcnNlVVJJIH0gZnJvbSBcInVyaS1qc1wiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4uL1NjaGVtYVwiO1xuaW1wb3J0IHsgVGhpbmdTZXQgfSBmcm9tIFwiLi9UaGluZ1NldFwiO1xuXG5leHBvcnQgeyBUaGluZ1NldCB9IGZyb20gXCIuL1RoaW5nU2V0XCI7XG5leHBvcnQgeyBUaGluZ0RhdGFOb2RlIH0gZnJvbSBcIi4vVGhpbmdEYXRhTm9kZVwiO1xuXG5jb25zdCBwdXQgPSBSLmN1cnJ5KChwZWVyLCBkYXRhKSA9PiB7XG4gIGRhdGEudGltZXN0YW1wID0gZGF0YS50aW1lc3RhbXAgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgY29uc3Qgb3JpZ2luYWxIYXNoID0gb2JqSGFzaChkYXRhKTtcbiAgY29uc3QgeyB0aW1lc3RhbXAsIGtpbmQsIHRvcGljLCBhdXRob3JJZCwgb3BJZCwgcmVwbHlUb0lkIH0gPSBkYXRhO1xuICBjb25zdCB0aGluZ0lkID0gb2JqSGFzaCh7XG4gICAgdGltZXN0YW1wLFxuICAgIGtpbmQsXG4gICAgdG9waWMsXG4gICAgYXV0aG9ySWQsXG4gICAgb3BJZCxcbiAgICByZXBseVRvSWQsXG4gICAgb3JpZ2luYWxIYXNoXG4gIH0pO1xuXG4gIGNvbnN0IG5vZGUgPSBwZWVyLmd1bi5nZXQoU2NoZW1hLlRoaW5nLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkIH0pKTtcbiAgY29uc3QgZGF0YVNvdWwgPSBhdXRob3JJZFxuICAgID8gU2NoZW1hLlRoaW5nRGF0YVNpZ25lZC5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCwgYXV0aG9ySWQgfSlcbiAgICA6IFNjaGVtYS5UaGluZ0RhdGEucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQ6IG9yaWdpbmFsSGFzaCB9KTtcblxuICBjb25zdCBtZXRhRGF0YSA9IHtcbiAgICBpZDogdGhpbmdJZCxcbiAgICB0aW1lc3RhbXAsXG4gICAga2luZCxcbiAgICBvcmlnaW5hbEhhc2gsXG4gICAgZGF0YTogeyBcIiNcIjogZGF0YVNvdWwgfSxcbiAgICB2b3Rlc3VwOiB7IFwiI1wiOiBTY2hlbWEuVGhpbmdWb3Rlc1VwLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkIH0pIH0sXG4gICAgdm90ZXNkb3duOiB7IFwiI1wiOiBTY2hlbWEuVGhpbmdWb3Rlc0Rvd24ucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkgfSxcbiAgICBhbGxjb21tZW50czogeyBcIiNcIjogU2NoZW1hLlRoaW5nQWxsQ29tbWVudHMucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkgfSxcbiAgICBjb21tZW50czogeyBcIiNcIjogU2NoZW1hLlRoaW5nQ29tbWVudHMucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkgfVxuICB9O1xuXG4gIGlmICh0b3BpYylcbiAgICBtZXRhRGF0YS50b3BpYyA9IHsgXCIjXCI6IFNjaGVtYS5Ub3BpYy5yb3V0ZS5yZXZlcnNlKHsgdG9waWNOYW1lOiB0b3BpYyB9KSB9O1xuICBpZiAoYXV0aG9ySWQpIG1ldGFEYXRhLmF1dGhvciA9IHsgXCIjXCI6IGB+JHthdXRob3JJZH1gIH07XG4gIGlmIChvcElkKVxuICAgIG1ldGFEYXRhLm9wID0geyBcIiNcIjogU2NoZW1hLlRoaW5nLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkOiBvcElkIH0pIH07XG4gIGlmIChyZXBseVRvSWQpXG4gICAgbWV0YURhdGEucmVwbHlUbyA9IHtcbiAgICAgIFwiI1wiOiBTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQ6IHJlcGx5VG9JZCB9KVxuICAgIH07XG5cbiAgcGVlci5ndW4uZ2V0KGRhdGFTb3VsKS5wdXQoZGF0YSk7XG4gIG5vZGUucHV0KG1ldGFEYXRhKTtcbiAgcGVlci5pbmRleCh0aGluZ0lkLCBkYXRhKTtcbiAgcmV0dXJuIG5vZGU7XG59KTtcblxuY29uc3Qgc3VibWl0ID0gUi5jdXJyeSgocGVlciwgZGF0YSkgPT4ge1xuICBjb25zdCB0aW1lc3RhbXAgPSBkYXRhLnRpbWVzdGFtcCB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgY29uc3QgdXNlciA9IHBlZXIuaXNMb2dnZWRJbigpO1xuXG4gIGlmIChkYXRhLnRvcGljKSBkYXRhLnRvcGljID0gZGF0YS50b3BpYy50b0xvd2VyQ2FzZSgpLnRyaW0oKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAoZGF0YS5kb21haW4pIGRhdGEuZG9tYWluID0gZGF0YS5kb21haW4udG9Mb3dlckNhc2UoKS50cmltKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKHVzZXIpIHtcbiAgICBkYXRhLmF1dGhvciA9IHVzZXIuYWxpYXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBkYXRhLmF1dGhvcklkID0gdXNlci5wdWI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIGNvbnN0IHRoaW5nID0gcHV0KHBlZXIsIHsgLi4uZGF0YSwgdGltZXN0YW1wLCBraW5kOiBcInN1Ym1pc3Npb25cIiB9KTtcblxuICBpZiAodXNlcikge1xuICAgIGNvbnN0IHRoaW5nc1NvdWwgPSBTY2hlbWEuQXV0aG9yVGhpbmdzLnJvdXRlLnJldmVyc2Uoe1xuICAgICAgYXV0aG9ySWQ6IHVzZXIucHViXG4gICAgfSk7XG4gICAgY29uc3Qgc3VibWlzc2lvbnNTb3VsID0gU2NoZW1hLkF1dGhvclN1Ym1pc3Npb25zLnJvdXRlLnJldmVyc2Uoe1xuICAgICAgYXV0aG9ySWQ6IHVzZXIucHViXG4gICAgfSk7XG4gICAgY29uc3QgdGhpbmdzID0gcGVlci5ndW4uZ2V0KHRoaW5nc1NvdWwpO1xuICAgIGNvbnN0IHN1Ym1pc3Npb25zID0gcGVlci5ndW4uZ2V0KHN1Ym1pc3Npb25zU291bCk7XG5cbiAgICBwZWVyLmd1blxuICAgICAgLnVzZXIoKVxuICAgICAgLmdldChcInRoaW5nc1wiKVxuICAgICAgLnB1dCh0aGluZ3MpO1xuICAgIHBlZXIuZ3VuXG4gICAgICAudXNlcigpXG4gICAgICAuZ2V0KFwic3VibWlzc2lvbnNcIilcbiAgICAgIC5wdXQoc3VibWlzc2lvbnMpO1xuICAgIHRoaW5ncy5zZXQodGhpbmcpO1xuICAgIHN1Ym1pc3Npb25zLnNldCh0aGluZyk7XG4gIH1cblxuICByZXR1cm4gdGhpbmc7XG59KTtcblxuY29uc3QgY29tbWVudCA9IFIuY3VycnkoKHBlZXIsIGRhdGEpID0+IHtcbiAgY29uc3QgdXNlciA9IHBlZXIuaXNMb2dnZWRJbigpO1xuXG4gIGlmIChkYXRhLnRvcGljKSBkYXRhLnRvcGljID0gZGF0YS50b3BpYy50b0xvd2VyQ2FzZSgpLnRyaW0oKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAodXNlcikge1xuICAgIGRhdGEuYXV0aG9yID0gdXNlci5hbGlhczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGRhdGEuYXV0aG9ySWQgPSB1c2VyLnB1YjsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9XG5cbiAgY29uc3QgdGhpbmcgPSBwdXQocGVlciwgeyAuLi5kYXRhLCBraW5kOiBcImNvbW1lbnRcIiB9KTtcblxuICBpZiAodXNlcikge1xuICAgIGNvbnN0IHRoaW5nc1NvdWwgPSBTY2hlbWEuQXV0aG9yVGhpbmdzLnJvdXRlLnJldmVyc2Uoe1xuICAgICAgYXV0aG9ySWQ6IHVzZXIucHViXG4gICAgfSk7XG4gICAgY29uc3QgY29tbWVudHNTb3VsID0gU2NoZW1hLkF1dGhvckNvbW1lbnRzLnJvdXRlLnJldmVyc2Uoe1xuICAgICAgYXV0aG9ySWQ6IHVzZXIucHViXG4gICAgfSk7XG4gICAgY29uc3QgdGhpbmdzID0gcGVlci5ndW4uZ2V0KHRoaW5nc1NvdWwpO1xuICAgIGNvbnN0IGNvbW1lbnRzID0gcGVlci5ndW4uZ2V0KGNvbW1lbnRzU291bCk7XG5cbiAgICBwZWVyLmd1blxuICAgICAgLnVzZXIoKVxuICAgICAgLmdldChcInRoaW5nc1wiKVxuICAgICAgLnB1dCh0aGluZ3MpO1xuICAgIHBlZXIuZ3VuXG4gICAgICAudXNlcigpXG4gICAgICAuZ2V0KFwiY29tbWVudHNcIilcbiAgICAgIC5wdXQoY29tbWVudHMpO1xuICAgIHRoaW5ncy5zZXQodGhpbmcpO1xuICAgIGNvbW1lbnRzLnNldCh0aGluZyk7XG4gIH1cblxuICAvLyBwZWVyLmd1bi51c2VyKCkuZ2V0KFwiY29tbWVudHNcIikucHV0KHBlZXIuZ3VuLnVzZXIoKS5nZXQoXCJjb21tZW50c1wiKSk7XG5cbiAgcmV0dXJuIHRoaW5nO1xufSk7XG5cbmNvbnN0IGNoYXQgPSBSLmN1cnJ5KChwZWVyLCBkYXRhKSA9PiB7XG4gIGNvbnN0IHVzZXIgPSBwZWVyLmlzTG9nZ2VkSW4oKTtcblxuICBpZiAoZGF0YS50b3BpYykgZGF0YS50b3BpYyA9IGRhdGEudG9waWMudG9Mb3dlckNhc2UoKS50cmltKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKHVzZXIpIHtcbiAgICBkYXRhLmF1dGhvciA9IHVzZXIuYWxpYXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBkYXRhLmF1dGhvcklkID0gdXNlci5wdWI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIGNvbnN0IHRoaW5nID0gcHV0KHBlZXIsIHsgLi4uZGF0YSwga2luZDogXCJjaGF0bXNnXCIgfSk7XG5cbiAgaWYgKHVzZXIpIHtcbiAgICBjb25zdCB0aGluZ3NTb3VsID0gU2NoZW1hLkF1dGhvclRoaW5ncy5yb3V0ZS5yZXZlcnNlKHtcbiAgICAgIGF1dGhvcklkOiB1c2VyLnB1YlxuICAgIH0pO1xuICAgIGNvbnN0IHRoaW5ncyA9IHBlZXIuZ3VuLmdldCh0aGluZ3NTb3VsKTtcblxuICAgIHBlZXIuZ3VuXG4gICAgICAudXNlcigpXG4gICAgICAuZ2V0KFwidGhpbmdzXCIpXG4gICAgICAucHV0KHRoaW5ncyk7XG4gICAgdGhpbmdzLnNldCh0aGluZyk7XG4gIH1cblxuICByZXR1cm4gdGhpbmc7XG59KTtcblxuY29uc3Qgd3JpdGVQYWdlID0gUi5jdXJyeSgocGVlciwgbmFtZSwgYm9keSkgPT4ge1xuICBjb25zdCB1c2VyID0gcGVlci5pc0xvZ2dlZEluKCk7XG5cbiAgaWYgKCF1c2VyKSByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJub3QgbG9nZ2VkIGluXCIpO1xuICBsZXQgdGhpbmc7XG4gIGNvbnN0IHBhZ2VzU291bCA9IFNjaGVtYS5BdXRob3JQYWdlcy5yb3V0ZS5yZXZlcnNlKHsgYXV0aG9ySWQ6IHVzZXIucHViIH0pO1xuICBjb25zdCBjaGFpbiA9IHBlZXIuZ3VuLmdldChwYWdlc1NvdWwpLmdldChuYW1lKTtcblxuICByZXR1cm4gY2hhaW4udGhlbihyZXMgPT4ge1xuICAgIGlmIChyZXMgJiYgcmVzLmRhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwicmVzXCIsIHJlcyk7XG4gICAgICBjaGFpblxuICAgICAgICAuZ2V0KFwiZGF0YVwiKVxuICAgICAgICAuZ2V0KFwiYm9keVwiKVxuICAgICAgICAucHV0KGJvZHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBib2R5LFxuICAgICAgICB0aXRsZTogbmFtZSxcbiAgICAgICAga2luZDogXCJ3aWtpcGFnZVwiLFxuICAgICAgICBhdXRob3I6IHVzZXIuYWxpYXMsXG4gICAgICAgIGF1dGhvcklkOiB1c2VyLnB1YlxuICAgICAgfTtcblxuICAgICAgY29uc29sZS5sb2coXCJwYWdlIGRhdGFcIiwgZGF0YSk7XG4gICAgICB0aGluZyA9IHB1dChwZWVyLCBkYXRhKTtcbiAgICAgIGNoYWluLnB1dCh0aGluZyk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5jb25zdCB2b3RlID0gUi5jdXJyeSgocGVlciwgaWQsIGtpbmQsIG5vbmNlKSA9PiB7XG4gIGNvbnN0IHZvdGVzID0gcGVlci5ndW4uZ2V0KFxuICAgIFNjaGVtYVtraW5kID09PSBcInVwXCIgPyBcIlRoaW5nVm90ZXNVcFwiIDogXCJUaGluZ1ZvdGVzRG93blwiXS5yb3V0ZS5yZXZlcnNlKHtcbiAgICAgIHRoaW5nSWQ6IGlkXG4gICAgfSlcbiAgKTtcblxuICByZXR1cm4gdm90ZXMuZ2V0KG5vbmNlKS5wdXQoXCIxXCIpO1xufSk7XG5cbmNvbnN0IHRvcGljUHJlZml4ZXMgPSB7XG4gIGNoYXRtc2c6IFwiY2hhdDpcIixcbiAgY29tbWVudDogXCJjb21tZW50czpcIlxufTtcblxuY29uc3QgaW5kZXggPSBSLmN1cnJ5KChwZWVyLCB0aGluZ0lkLCBkYXRhKSA9PiB7XG4gIGlmICghZGF0YS50b3BpYyAmJiAhZGF0YS5vcElkKSByZXR1cm47XG5cbiAgaWYgKGRhdGEub3BJZCAmJiAhZGF0YS50b3BpYykge1xuICAgIHBlZXIuZ3VuXG4gICAgICAuZ2V0KFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZDogZGF0YS5vcElkIH0pKVxuICAgICAgLmdldChcImRhdGFcIilcbiAgICAgIC5vbihmdW5jdGlvbiByZWN2KHRkKSB7XG4gICAgICAgIGlmICghdGQpIHJldHVybjtcbiAgICAgICAgaW5kZXgocGVlciwgdGhpbmdJZCwgeyAuLi5kYXRhLCB0b3BpYzogdGQudG9waWMgfHwgXCJhbGxcIiB9KTtcbiAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHRoaW5nID0gcGVlci5ndW4uZ2V0KFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCB9KSk7XG4gIGNvbnN0IGRheVN0ciA9IFRoaW5nU2V0LmRheVN0cihkYXRhLnRpbWVzdGFtcCk7XG4gIGNvbnN0IFt5ZWFyLCBtb250aCwgZGF5XSA9IGRheVN0ci5zcGxpdChcIi9cIik7XG4gIGNvbnN0IHRvcGljUHJlZml4ID0gdG9waWNQcmVmaXhlc1tkYXRhLmtpbmRdIHx8IFwiXCI7XG4gIGNvbnN0IGJhc2VUb3BpY05hbWUgPSBkYXRhLnRvcGljLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICBjb25zdCB0b3BpY05hbWUgPSB0b3BpY1ByZWZpeCArIGJhc2VUb3BpY05hbWU7XG4gIGNvbnN0IHRvcGljID0gcGVlci5ndW4uZ2V0KFNjaGVtYS5Ub3BpYy5yb3V0ZS5yZXZlcnNlKHsgdG9waWNOYW1lIH0pKTtcbiAgY29uc3QgdG9waWNEYXkgPSBwZWVyLmd1bi5nZXQoXG4gICAgU2NoZW1hLlRvcGljRGF5LnJvdXRlLnJldmVyc2UoeyB0b3BpY05hbWUsIHllYXIsIG1vbnRoLCBkYXkgfSlcbiAgKTtcblxuICBpZiAoIWRhdGEuc2tpcEFsbCAmJiBkYXRhLnRvcGljICE9PSBcImFsbFwiKSB7XG4gICAgY29uc3QgYWxsbmFtZSA9IGAke3RvcGljUHJlZml4fWFsbGA7XG4gICAgY29uc3QgYWxsVG9waWMgPSBwZWVyLmd1bi5nZXQoXG4gICAgICBTY2hlbWEuVG9waWMucm91dGUucmV2ZXJzZSh7IHRvcGljTmFtZTogYWxsbmFtZSB9KVxuICAgICk7XG4gICAgY29uc3QgYWxsVG9waWNEYXkgPSBwZWVyLmd1bi5nZXQoXG4gICAgICBTY2hlbWEuVG9waWNEYXkucm91dGUucmV2ZXJzZSh7XG4gICAgICAgIHRvcGljTmFtZTogYWxsbmFtZSxcbiAgICAgICAgeWVhcixcbiAgICAgICAgbW9udGgsXG4gICAgICAgIGRheVxuICAgICAgfSlcbiAgICApO1xuXG4gICAgYWxsVG9waWMuc2V0KHRoaW5nKTtcbiAgICBhbGxUb3BpY0RheS5zZXQodGhpbmcpO1xuICB9XG5cbiAgaWYgKGRhdGEua2luZCA9PT0gXCJzdWJtaXNzaW9uXCIpIHtcbiAgICBjb25zdCB1cmxJbmZvID0gZGF0YS51cmwgPyBwYXJzZVVSSShkYXRhLnVybCkgOiB7fTtcbiAgICBjb25zdCBkb21haW5OYW1lID0gKGRhdGEudXJsXG4gICAgICA/ICh1cmxJbmZvLmhvc3QgfHwgdXJsSW5mby5zY2hlbWUgfHwgXCJcIikucmVwbGFjZSgvXnd3d1xcLi8sIFwiXCIpXG4gICAgICA6IGBzZWxmLiR7ZGF0YS50b3BpY31gXG4gICAgKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGRvbWFpbiA9IHBlZXIuZ3VuLmdldChTY2hlbWEuRG9tYWluLnJvdXRlLnJldmVyc2UoeyBkb21haW5OYW1lIH0pKTtcblxuICAgIGRvbWFpbi5zZXQodGhpbmcpO1xuXG4gICAgaWYgKGRhdGEudXJsKSB7XG4gICAgICBjb25zdCB1cmxOb2RlID0gcGVlci5ndW4uZ2V0KFNjaGVtYS5VUkwucm91dGUucmV2ZXJzZSh7IHVybDogZGF0YS51cmwgfSkpO1xuXG4gICAgICAvLyB0aGluZy5nZXQoXCJ1cmxcIikucHV0KHVybE5vZGUpO1xuICAgICAgdXJsTm9kZS5zZXQodGhpbmcpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLm9wSWQpIHtcbiAgICBjb25zdCBhbGxjb21tZW50cyA9IHBlZXIuZ3VuLmdldChcbiAgICAgIFNjaGVtYS5UaGluZ0FsbENvbW1lbnRzLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkOiBkYXRhLm9wSWQgfSlcbiAgICApO1xuXG4gICAgYWxsY29tbWVudHMuc2V0KHRoaW5nKTtcbiAgfVxuXG4gIGlmIChkYXRhLnJlcGx5VG9JZCB8fCBkYXRhLm9wSWQpIHtcbiAgICBjb25zdCBjb21tZW50cyA9IHBlZXIuZ3VuLmdldChcbiAgICAgIFNjaGVtYS5UaGluZ0NvbW1lbnRzLnJvdXRlLnJldmVyc2Uoe1xuICAgICAgICB0aGluZ0lkOiBkYXRhLnJlcGx5VG9JZCB8fCBkYXRhLm9wSWRcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGNvbW1lbnRzLnNldCh0aGluZyk7XG4gIH1cblxuICB0b3BpYy5zZXQodGhpbmcpO1xuICB0b3BpY0RheS5zZXQodGhpbmcpO1xufSk7XG5cbmV4cG9ydCBjb25zdCBUaGluZyA9IHtcbiAgcHV0LFxuICBzdWJtaXQsXG4gIGNvbW1lbnQsXG4gIGNoYXQsXG4gIHdyaXRlUGFnZSxcbiAgdm90ZSxcbiAgaW5kZXhcbn07XG4iLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBDb25maWcgPSB7XG4gIHRhYnVsYXRvcjogQ29uc3RhbnRzLkRFVl9JTkRFWEVSLFxuICBpbmRleGVyOiBDb25zdGFudHMuREVWX0lOREVYRVIsXG4gIG93bmVyOiBDb25zdGFudHMuREVWX0lOREVYRVIsXG4gIHVwZGF0ZTogUi5jb21wb3NlKFxuICAgIFIubWFwKChba2V5LCB2YWxdKSA9PiAoQ29uZmlnW2tleV0gPSB2YWwpKSxcbiAgICBSLnRvUGFpcnNcbiAgKVxufTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIi4uL1F1ZXJ5XCI7XG5pbXBvcnQgeyBUaGluZ0RhdGFOb2RlIH0gZnJvbSBcIi4uL1RoaW5nXCI7XG5pbXBvcnQgeyBMaXN0aW5nRGVmaW5pdGlvbiB9IGZyb20gXCIuL0xpc3RpbmdEZWZpbml0aW9uXCI7XG5pbXBvcnQgeyBMaXN0aW5nRGF0YVNvdXJjZSB9IGZyb20gXCIuL0xpc3RpbmdEYXRhU291cmNlXCI7XG5pbXBvcnQgeyBMaXN0aW5nRmlsdGVyIH0gZnJvbSBcIi4vTGlzdGluZ0ZpbHRlclwiO1xuXG5jb25zdCBmcm9tU291cmNlID0gUi5jb21wb3NlKFxuICBSLmFwcGx5KFIubWVyZ2VMZWZ0KSxcbiAgUi5hcChbTGlzdGluZ0ZpbHRlci5mcm9tRGVmaW5pdGlvbiwgUi5pZGVudGl0eV0pLFxuICBSLm9mLFxuICBSLmFwcGx5KFIuYXNzb2MoXCJkYXRhU291cmNlXCIpKSxcbiAgUi5hcChbTGlzdGluZ0RhdGFTb3VyY2UuZnJvbURlZmluaXRpb24sIFIuaWRlbnRpdHldKSxcbiAgUi5vZixcbiAgTGlzdGluZ0RlZmluaXRpb24uZnJvbVNvdXJjZVxuKTtcblxuY29uc3QgZ2V0U291cmNlID0gcXVlcnkoKHNjb3BlLCBhdXRob3JJZCwgbmFtZSwgZXh0cmEgPSBcIlwiKSA9PlxuICBRdWVyeS53aWtpUGFnZShzY29wZSwgYXV0aG9ySWQsIG5hbWUpXG4gICAgLnRoZW4oUi5jb21wb3NlKFxuICAgICAgYm9keSA9PiBgJHtib2R5fVxuIyBhZGRlZCBieSBpbmRleGVyXG4ke2V4dHJhIHx8IFwiXCJ9XG5zb3VyY2VkIGZyb20gcGFnZSAke2F1dGhvcklkfSAke25hbWV9XG5gLFxuICAgICAgVGhpbmdEYXRhTm9kZS5ib2R5XG4gICAgKSlcbik7XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nU3BlYyA9IHsgZnJvbVNvdXJjZSwgZ2V0U291cmNlIH07XG4iLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgcXVlcnkgfSBmcm9tIFwiZ3VuLXNjb3BlXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vQ29uZmlnXCI7XG5cbmNvbnN0IFtQT1NfSURYLCBQT1NfSUQsIFBPU19WQUxdID0gWzAsIDEsIDIsIDNdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5jb25zdCByb3dzVG9JZHMgPSBSLm1hcChSLnByb3AoUE9TX0lEKSk7XG5jb25zdCByb3dzVG9JdGVtcyA9IFIubWFwKFIuc2xpY2UoMSwgMykpO1xuY29uc3Qgc291cmNlID0gUi5wcm9wT3IoXCJcIiwgXCJzb3VyY2VcIik7XG5jb25zdCBzb3VsRnJvbVBhdGggPSBSLmN1cnJ5KChpbmRleGVyLCBwYXRoKSA9PiBgJHtDb25zdGFudHMuUFJFRklYfSR7cGF0aH1AfiR7aW5kZXhlcn0uYCk7XG5cbmNvbnN0IGdldFJvdyA9IFIuY3VycnkoKG5vZGUsIGlkeCkgPT5cbiAgUi5jb21wb3NlKFxuICAgIFIuaWZFbHNlKFIucHJvcChcImxlbmd0aFwiKSwgUi5pbnNlcnQoMCwgcGFyc2VJbnQoaWR4LCAxMCkpLCBSLmFsd2F5cyhudWxsKSksXG4gICAgcm93ID0+IHtcbiAgICAgIHJvd1sxXSA9IHBhcnNlRmxvYXQocm93WzFdKTtcbiAgICAgIHJldHVybiByb3c7XG4gICAgfSxcbiAgICBSLm1hcChSLnRyaW0pLFxuICAgIFIuc3BsaXQoXCIsXCIpLFxuICAgIFIucHJvcE9yKFwiXCIsIGAke2lkeH1gKVxuICApKG5vZGUpXG4pO1xuXG5jb25zdCBpdGVtS2V5cyA9IFIuY29tcG9zZShcbiAgUi5maWx0ZXIoXG4gICAgUi5jb21wb3NlKFxuICAgICAgdmFsID0+ICEhKHZhbCA9PT0gMCB8fCB2YWwpLFxuICAgICAgcGFyc2VJbnRcbiAgICApXG4gICksXG4gIFIua2V5c1xuKTtcblxuY29uc3Qgcm93cyA9IG5vZGUgPT5cbiAgUi5jb21wb3NlKFxuICAgIFIubWFwKGdldFJvdyhub2RlKSksXG4gICAgaXRlbUtleXNcbiAgKShub2RlKTtcblxuY29uc3QgaWRzID0gUi5jb21wb3NlKHJvd3NUb0lkcywgcm93cyk7XG5cbmNvbnN0IHNvcnRSb3dzID0gUi5zb3J0V2l0aChbXG4gIFIuYXNjZW5kKFxuICAgIFIuY29tcG9zZShcbiAgICAgIFIuY29uZChbXG4gICAgICAgIFtSLmlzTmlsLCBSLmFsd2F5cyhJbmZpbml0eSldLFxuICAgICAgICBbUi5ULCBwYXJzZUZsb2F0XVxuICAgICAgXSksXG4gICAgICBSLnByb3AoUE9TX1ZBTClcbiAgICApXG4gIClcbl0pO1xuXG5jb25zdCBzb3J0ZWRJZHMgPSBSLmNvbXBvc2UoXG4gIFIubWFwKFIucHJvcChQT1NfSUQpKSxcbiAgc29ydFJvd3MsXG4gIFIuZmlsdGVyKFIuaWRlbnRpdHkpLFxuICByb3dzXG4pO1xuXG5jb25zdCBkaWZmID0gYXN5bmMgKFxuICBub2RlLFxuICB1cGRhdGVkSXRlbXMgPSBbXSxcbiAgcmVtb3ZlSWRzID0gW10sXG4gIHsgbWF4U2l6ZSA9IDEwMDAgfSA9IHt9XG4pID0+IHtcbiAgY29uc3QgcmVtb3ZlZCA9IFIuaW5kZXhCeShSLmlkZW50aXR5LCByZW1vdmVJZHMpO1xuICBjb25zdCBieUlkID0ge307XG4gIGNvbnN0IGNoYW5nZXMgPSB7fTtcbiAgY29uc3Qgcm93cyA9IFtdO1xuICBjb25zdCB1cGRhdGVkID0ge307XG4gIGxldCB0b1JlcGxhY2UgPSBbXTtcbiAgbGV0IG1heElkeCA9IDA7XG4gIGxldCBrZXk7XG5cbiAgZm9yIChrZXkgaW4gbm9kZSB8fCB7fSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlSW50KGtleSwgMTApO1xuXG4gICAgaWYgKCEocGFyc2VkIHx8IHBhcnNlZCA9PT0gMCkpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHJvdyA9IGdldFJvdyhub2RlLCBrZXkpIHx8IFtwYXJzZWQsIG51bGwsIG51bGxdO1xuICAgIGNvbnN0IFtpZHgsIGlkID0gbnVsbCwgcmF3VmFsdWUgPSBudWxsXSA9IHJvdzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgcm93W1BPU19WQUxdID0gcmF3VmFsdWUgPT09IG51bGwgPyBudWxsIDogcGFyc2VGbG9hdChyYXdWYWx1ZSk7XG4gICAgaWYgKGlkICYmIHJlbW92ZWRbaWRdKSByb3dbUE9TX0lEXSA9IHJvd1tQT1NfVkFMXSA9IG51bGw7XG4gICAgaWYgKGlkKSBieUlkW2lkXSA9IHJvdztcbiAgICBpZiAocm93W1BPU19JRF0pIHtcbiAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b1JlcGxhY2UucHVzaChyb3cpO1xuICAgIH1cbiAgICBpZiAoaWR4ID4gbWF4SWR4KSBtYXhJZHggPSBpZHg7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHVwZGF0ZWRJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IFtpZCwgdmFsdWVdID0gdXBkYXRlZEl0ZW1zW2ldIHx8IFtudWxsLCBudWxsXTtcblxuICAgIGlmICghaWQpIGNvbnRpbnVlO1xuICAgIGNvbnN0IGV4aXN0aW5nID0gYnlJZFtpZF07XG5cbiAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgIGlmIChleGlzdGluZ1tQT1NfVkFMXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgZXhpc3RpbmdbUE9TX1ZBTF0gPSB2YWx1ZTtcbiAgICAgICAgdXBkYXRlZFtpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByb3cgPSBbbnVsbCwgaWQsIHZhbHVlXTtcblxuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgYWxsU29ydGVkID0gc29ydFJvd3Mocm93cyk7XG4gIGNvbnN0IHNvcnRlZCA9IG1heFNpemUgPyBhbGxTb3J0ZWQuc2xpY2UoMCwgbWF4U2l6ZSkgOiBhbGxTb3J0ZWQ7XG4gIGNvbnN0IG1pc3NpbmcgPSBtYXhTaXplID8gYWxsU29ydGVkLnNsaWNlKG1heFNpemUsIGFsbFNvcnRlZC5sZW5ndGgpIDogW107XG4gIGNvbnN0IGFkZGVkID0gUi5maWx0ZXIocm93ID0+IHJvd1tQT1NfSURYXSA9PT0gbnVsbCwgc29ydGVkKTtcblxuICB0b1JlcGxhY2UgPSB0b1JlcGxhY2VcbiAgICAuY29uY2F0KFIuZmlsdGVyKHJvdyA9PiByb3dbUE9TX0lEWF0gIT09IG51bGwsIG1pc3NpbmcpKVxuICAgIC5yZXZlcnNlKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3J0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpZCA9IHNvcnRlZFtpXVtQT1NfSURdO1xuICAgIGNvbnN0IGlkeCA9IHNvcnRlZFtpXVtQT1NfSURYXTtcbiAgICBjb25zdCB2YWwgPSBzb3J0ZWRbaV1bUE9TX1ZBTF07XG5cbiAgICBpZiAoaWR4ICE9PSBudWxsICYmIHVwZGF0ZWRbaWRdKSBjaGFuZ2VzW2Ake2lkeH1gXSA9IFtpZCwgdmFsXS5qb2luKFwiLFwiKTtcbiAgfVxuXG4gIGNvbnN0IGluc2VydGVkID0gW107XG5cbiAgd2hpbGUgKGFkZGVkLmxlbmd0aCkge1xuICAgIGNvbnN0IHJvdyA9IGFkZGVkLnBvcCgpO1xuICAgIGNvbnN0IHJlcGxhY2VkID0gdG9SZXBsYWNlLnBvcCgpO1xuICAgIGxldCBbaWR4XSA9IHJlcGxhY2VkIHx8IFtudWxsXTtcblxuICAgIGlmIChpZHggPT09IG51bGwpIHtcbiAgICAgIGlkeCA9IHBhcnNlSW50KG1heElkeCwgMTApICsgaW5zZXJ0ZWQubGVuZ3RoICsgMTtcbiAgICAgIGluc2VydGVkLnB1c2goaWR4KTtcbiAgICB9XG5cbiAgICBjaGFuZ2VzW2Ake2lkeH1gXSA9IFtyb3dbUE9TX0lEXSwgcm93W1BPU19WQUxdXS5qb2luKFwiLFwiKTtcbiAgfVxuXG4gIHdoaWxlICh0b1JlcGxhY2UubGVuZ3RoKSB7XG4gICAgY29uc3Qgcm93ID0gdG9SZXBsYWNlLnBvcCgpO1xuXG4gICAgaWYgKHJvdyAmJiAhcm93W1BPU19JRF0pIHtcbiAgICAgIGNvbnN0IGlkeCA9IGAke3Jvd1tQT1NfSURYXX1gO1xuXG4gICAgICBpZiAobm9kZVtpZHhdICE9PSBudWxsKSB7XG4gICAgICAgIGNoYW5nZXNbaWR4XSA9IG51bGw7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibnVsbGluZ1wiLCBpZHgsIG5vZGVbaWR4XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFIua2V5cyhjaGFuZ2VzKS5sZW5ndGggPyBjaGFuZ2VzIDogbnVsbDtcbn07XG5cbmNvbnN0IGNhdGVnb3JpemVEaWZmID0gKGRpZmYsIG9yaWdpbmFsKSA9PiB7XG4gIGNvbnN0IGFsbEtleXMgPSBpdGVtS2V5cyhSLm1lcmdlTGVmdChkaWZmLCBvcmlnaW5hbCkpO1xuICBjb25zdCBhZGRlZCA9IFtdO1xuICBjb25zdCByZW1vdmVkID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gYWxsS2V5c1tpXTtcbiAgICBjb25zdCBbX2RpZmZJZHgsIGRpZmZJZF0gPSBnZXRSb3coZGlmZiwga2V5KSB8fCBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGNvbnN0IFtfb3JpZ0lkeCwgb3JpZ0lkXSA9IGdldFJvdyhvcmlnaW5hbCwga2V5KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaWYgKGRpZmZJZCAhPT0gb3JpZ0lkKSB7XG4gICAgICBpZiAoZGlmZklkKSBhZGRlZC5wdXNoKGRpZmZJZCk7XG4gICAgICBpZiAob3JpZ0lkKSByZW1vdmVkLnB1c2gob3JpZ0lkKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW2FkZGVkLCByZW1vdmVkXTtcbn07XG5cbmNvbnN0IHVuaW9uUm93cyA9IFIuY29tcG9zZShcbiAgUi51bmlxQnkoUi5wcm9wKFBPU19JRCkpLFxuICBzb3J0Um93cyxcbiAgUi5yZWR1Y2UoUi5jb25jYXQsIFtdKSxcbiAgUi5tYXAocm93cylcbik7XG5cbmNvbnN0IHJvd3NGcm9tU291bHMgPSBxdWVyeSgoc2NvcGUsIHNvdWxzKSA9PlxuICBQcm9taXNlLmFsbChSLm1hcChzY29wZS5nZXQsIHNvdWxzKSkudGhlbih1bmlvblJvd3MpXG4pO1xuXG5jb25zdCByZWFkID0gcXVlcnkoKHNjb3BlLCBwYXRoLCBvcHRzKSA9PiB7XG4gIGNvbnN0IHsgaW5kZXhlciA9IENvbmZpZy5pbmRleGVyIH0gPSBvcHRzIHx8IHt9O1xuXG4gIHJldHVybiByb3dzRnJvbVNvdWxzKHNjb3BlLCBbc291bEZyb21QYXRoKGluZGV4ZXIsIHBhdGgpXSkudGhlbihyb3dzVG9JZHMpO1xufSwgXCJsaXN0aW5nUm93c1wiKTtcblxuZXhwb3J0IGNvbnN0IExpc3RpbmdOb2RlID0ge1xuICBQT1NfSURYLFxuICBQT1NfSUQsXG4gIFBPU19WQUwsXG4gIHNvdXJjZSxcbiAgZ2V0Um93LFxuICBpdGVtS2V5cyxcbiAgcm93cyxcbiAgaWRzLFxuICByb3dzVG9JZHMsXG4gIHJvd3NUb0l0ZW1zLFxuICBzb3J0Um93cyxcbiAgc29ydGVkSWRzLFxuICBzb3VsRnJvbVBhdGgsXG4gIHJvd3NGcm9tU291bHMsXG4gIHJlYWQsXG4gIGRpZmYsXG4gIGNhdGVnb3JpemVEaWZmLFxuICB1bmlvblJvd3Ncbn07XG4iLCJjb25zdCBDT01NQU5EX1JFID0gL14gezR9fi87XG5jb25zdCBQUkVGSVggPSBcIm5hYlwiO1xuY29uc3QgU09VTF9ERUxJTUVURVIgPSBcInx+fnxcIjtcblxuY29uc3QgTElTVElOR19TSVpFID0gMTAwMDtcblxuY29uc3QgTUFYX0hBU0hfU0laRSA9IDY0O1xuY29uc3QgTUFYX1BPV19OT05DRV9TSVpFID0gNjQ7XG5jb25zdCBNQVhfVE9QSUNfU0laRSA9IDQyO1xuY29uc3QgTUFYX0FVVEhPUl9BTElBU19TSVpFID0gMjU2O1xuY29uc3QgTUFYX0FVVEhPUl9JRF9TSVpFID0gMTI4OyAvLyA/Pz9cbmNvbnN0IE1BWF9VUkxfU0laRSA9IDIwNDg7XG5jb25zdCBNQVhfRE9NQUlOX1NJWkUgPSAyNTY7XG5jb25zdCBNQVhfVEhJTkdfS0lORF9TSVpFID0gMTY7XG5jb25zdCBNQVhfVEhJTkdfVElUTEVfU0laRSA9IDMwMDtcbmNvbnN0IE1BWF9USElOR19CT0RZX1NJWkUgPSA1MDAwMDtcblxuY29uc3QgTUFYX0xJU1RJTkdfSURTX1NJWkUgPSA1MDAwMDtcbmNvbnN0IE1BWF9MSVNUSU5HX1NPVVJDRV9TSVpFID0gNTAwMDA7XG5jb25zdCBNQVhfTElTVElOR19UQUJTX1NJWkUgPSA1MDAwO1xuXG5jb25zdCBNQVhfTElTVElOR19TT1VMX1BSRUZJWF9TSVpFID0gTUFYX1RPUElDX1NJWkU7XG5jb25zdCBNQVhfTElTVElOR19TT1VMX0lERU5USUZJRVJfU0laRSA9IE1BWF9BVVRIT1JfSURfU0laRTtcbmNvbnN0IE1BWF9MSVNUSU5HX1NPVUxfU09SVF9TSVpFID0gMTY7XG5jb25zdCBNQVhfTElTVElOR19TT1VMX1RZUEVfU0laRSA9IE1BWF9UT1BJQ19TSVpFO1xuY29uc3QgTUFYX0xJU1RJTkdfU09VTF9LSU5EX1NJWkUgPSAxNjtcblxuY29uc3QgREVGQVVMVF9JTkRFWEVSID0gXCJDRXlLckRkMXh5UFhwV1NWMDBNZ3ZuWlkyVkpMSFhnekN2aE1lRHdLVFlBLnlqU3EwRHlYenpoQl9aWHJfRHpmSmdpajN0WFUwLTN0MFE1YkpBdFpwajhcIjtcbmNvbnN0IERFVl9JTkRFWEVSID0gXCJsMm5TZWRsU2x2b21UcUNZaG1QbkFOb1FMWGU0c2o1clIyT3JDN1lxUHBVLnppbWFXd2RsZnlUclZJVGd3V29EVmRiSlFLUmVPVHFWNXpOalRSYy15UUFcIjtcblxuZXhwb3J0IGNvbnN0IENvbnN0YW50cyA9IHtcbiAgQ09NTUFORF9SRSxcbiAgUFJFRklYLFxuICBTT1VMX0RFTElNRVRFUixcbiAgTElTVElOR19TSVpFLFxuICBNQVhfSEFTSF9TSVpFLFxuICBNQVhfUE9XX05PTkNFX1NJWkUsXG4gIE1BWF9UT1BJQ19TSVpFLFxuICBNQVhfQVVUSE9SX0FMSUFTX1NJWkUsXG4gIE1BWF9BVVRIT1JfSURfU0laRSxcbiAgTUFYX1VSTF9TSVpFLFxuICBNQVhfRE9NQUlOX1NJWkUsXG4gIE1BWF9USElOR19LSU5EX1NJWkUsXG4gIE1BWF9USElOR19USVRMRV9TSVpFLFxuICBNQVhfVEhJTkdfQk9EWV9TSVpFLFxuICBNQVhfTElTVElOR19JRFNfU0laRSxcbiAgTUFYX0xJU1RJTkdfU09VUkNFX1NJWkUsXG4gIE1BWF9MSVNUSU5HX1RBQlNfU0laRSxcbiAgTUFYX0xJU1RJTkdfU09VTF9QUkVGSVhfU0laRSxcbiAgTUFYX0xJU1RJTkdfU09VTF9JREVOVElGSUVSX1NJWkUsXG4gIE1BWF9MSVNUSU5HX1NPVUxfU09SVF9TSVpFLFxuICBNQVhfTElTVElOR19TT1VMX1RZUEVfU0laRSxcbiAgTUFYX0xJU1RJTkdfU09VTF9LSU5EX1NJWkUsXG4gIERFRkFVTFRfSU5ERVhFUixcbiAgREVWX0lOREVYRVJcbn07XG4iLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgc2NvcGUgYXMgbWFrZVNjb3BlLCBxdWVyeSwgYWxsLCByZXNvbHZlIH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi9TY2hlbWFcIjtcbmltcG9ydCB7IFRoaW5nU2V0IH0gZnJvbSBcIi4vVGhpbmdcIjtcbmltcG9ydCB7IExpc3RpbmdOb2RlIH0gZnJvbSBcIi4vTGlzdGluZy9MaXN0aW5nTm9kZVwiO1xuXG5jb25zdCBlbXB0eVByb21pc2UgPSByZXNvbHZlKG51bGwpO1xuY29uc3QgdW5pb25BcnJheXMgPSBSLnJlZHVjZShSLnVuaW9uLCBbXSk7XG5cbmNvbnN0IHRvcGljU291bHMgPSBwYXJhbXMgPT4ge1xuICBjb25zdCB7IHRvcGljcyA9IFtcImFsbFwiXSB9ID0gcGFyYW1zIHx8IHt9O1xuICBjb25zdCBkYXlzID0gUi5wcm9wT3IoMzY1LCBcImRheXNcIiwgcGFyYW1zKSB8fCAzNjU7XG4gIGNvbnN0IGRheVN0cmluZ3MgPSBbXTtcbiAgY29uc3Qgb25lRGF5ID0gMTAwMCAqIDYwICogNjAgKiAyNDtcbiAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIG9uZURheSAqIHBhcnNlSW50KGRheXMsIDEwKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8PSBkYXlzICsgMTsgaSsrKVxuICAgIGRheVN0cmluZ3MucHVzaChUaGluZ1NldC5kYXlTdHIoc3RhcnQgKyBpICogb25lRGF5KSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhcbiAgICB0b3BpY3MucmVkdWNlKFxuICAgICAgKHJlc3VsdCwgdG9waWNOYW1lKSA9PlxuICAgICAgICBkYXlTdHJpbmdzLnJlZHVjZSgocmVzLCBkcykgPT4ge1xuICAgICAgICAgIHJlc1tgJHtDb25zdGFudHMuUFJFRklYfS90b3BpY3MvJHt0b3BpY05hbWV9L2RheXMvJHtkc31gXSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSwgcmVzdWx0KSxcbiAgICAgIHt9XG4gICAgKVxuICApO1xufTtcblxuY29uc3Qgc2luZ2xlVG9waWMgPSBxdWVyeSgoc2NvcGUsIHBhcmFtcykgPT4ge1xuICBjb25zdCB0U291bHMgPSB0b3BpY1NvdWxzKHsgLi4ucGFyYW1zLCB0b3BpY3M6IFtwYXJhbXMudG9waWNdIH0pO1xuICBsZXQgc291bHMgPSBbXTtcbiAgbGV0IGl0ZW1NYXggPSBDb25zdGFudHMuTElTVElOR19TSVpFO1xuXG4gIGlmIChwYXJhbXMuc29ydCA9PT0gXCJuZXdcIikge1xuICAgIGl0ZW1NYXggPSBDb25zdGFudHMuTElTVElOR19TSVpFO1xuICB9IGVsc2Uge1xuICAgIGlmIChwYXJhbXMuc29ydCA9PT0gXCJ0b3BcIikgaXRlbU1heCA9IGl0ZW1NYXggKiAzO1xuICAgIGlmIChwYXJhbXMudG9waWMgPT09IFwiYWxsXCIpIGl0ZW1NYXggPSBpdGVtTWF4ICogMztcbiAgfVxuXG4gIGNvbnN0IGZldGNoTW9yZSA9ICgpID0+IHtcbiAgICBjb25zdCB0b3BpY1NvdWwgPSB0U291bHMucG9wKCk7XG5cbiAgICBpZiAoc291bHMubGVuZ3RoID4gaXRlbU1heCB8fCAhdG9waWNTb3VsKSByZXR1cm4gcmVzb2x2ZShzb3Vscyk7XG4gICAgcmV0dXJuIHNjb3BlXG4gICAgICAuZ2V0KHRvcGljU291bClcbiAgICAgIC5zb3VscygpXG4gICAgICAudGhlbihtb3JlID0+IHtcbiAgICAgICAgc291bHMgPSBbLi4uc291bHMsIC4uLm1vcmVdO1xuICAgICAgICByZXR1cm4gZmV0Y2hNb3JlKCk7XG4gICAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gZmV0Y2hNb3JlKCk7XG59KTtcblxuY29uc3Qgc2luZ2xlRG9tYWluID0gcXVlcnkoKHNjb3BlLCB7IGRvbWFpbiB9KSA9PlxuICBzY29wZS5nZXQoU2NoZW1hLkRvbWFpbi5yb3V0ZS5yZXZlcnNlKHsgZG9tYWluTmFtZTogZG9tYWluIH0pKS5zb3VscygpXG4pO1xuXG5jb25zdCBzaW5nbGVBdXRob3IgPSBxdWVyeSgoc2NvcGUsIHBhcmFtcykgPT5cbiAgYWxsKFtcbiAgICBwYXJhbXMudHlwZSAmJiBwYXJhbXMudHlwZSAhPT0gXCJzdWJtaXR0ZWRcIiAmJiBwYXJhbXMudHlwZSAhPT0gXCJvdmVydmlld1wiXG4gICAgICA/IHJlc29sdmUoW10pXG4gICAgICA6IHNjb3BlXG4gICAgICAgICAgLmdldChwYXJhbXMuYXV0aG9ySWQpXG4gICAgICAgICAgLmdldChcInN1Ym1pc3Npb25zXCIpXG4gICAgICAgICAgLnNvdWxzKCksXG4gICAgcGFyYW1zLnR5cGUgJiZcbiAgICBwYXJhbXMudHlwZSAhPT0gXCJjb21tZW50c1wiICYmXG4gICAgcGFyYW1zLnR5cGUgIT09IFwib3ZlcnZpZXdcIiAmJlxuICAgIHBhcmFtcy50eXBlICE9PSBcImNvbW1hbmRzXCJcbiAgICAgID8gcmVzb2x2ZShbXSlcbiAgICAgIDogc2NvcGVcbiAgICAgICAgICAuZ2V0KHBhcmFtcy5hdXRob3JJZClcbiAgICAgICAgICAuZ2V0KFwiY29tbWVudHNcIilcbiAgICAgICAgICAuc291bHMoKVxuICBdKS50aGVuKChbc3VibWlzc2lvbnMsIGNvbW1lbnRzXSkgPT4gdW5pb25BcnJheXMoW3N1Ym1pc3Npb25zLCBjb21tZW50c10pKVxuKTtcblxuY29uc3QgbGlzdGluZ0lkcyA9IHF1ZXJ5KFxuICAoc2NvcGUsIHNvdWwpID0+IHNjb3BlLmdldChzb3VsKS50aGVuKExpc3RpbmdOb2RlLnNvcnRlZElkcyksXG4gIFwibGlzdGluZ0lkc1wiXG4pO1xuXG5jb25zdCBzaW5nbGVMaXN0aW5nID0gcXVlcnkoKHNjb3BlLCB7IGxpc3RpbmcsIHNvcnQsIGluZGV4ZXIgfSkgPT5cbiAgbGlzdGluZ0lkcyhzY29wZSwgYCR7Q29uc3RhbnRzLlBSRUZJWH0ke2xpc3Rpbmd9LyR7c29ydH1AfiR7aW5kZXhlcn0uYCkudGhlbihcbiAgICBSLmNvbXBvc2UoXG4gICAgICBSLm1hcCh0aGluZ0lkID0+IFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCB9KSksXG4gICAgICBSLmZpbHRlcihSLmlkZW50aXR5KVxuICAgIClcbiAgKVxuKTtcblxuY29uc3QgcmVwbGllc1RvQXV0aG9yID0gcXVlcnkoXG4gIChzY29wZSwgeyByZXBsaWVzVG9BdXRob3JJZCwgdHlwZSA9IFwib3ZlcnZpZXdcIiwgLi4ucGFyYW1zIH0pID0+XG4gICAgc2luZ2xlTGlzdGluZyhzY29wZSwge1xuICAgICAgbGlzdGluZzogYC91c2VyLyR7cmVwbGllc1RvQXV0aG9ySWR9LyR7dHlwZX1gLFxuICAgICAgc29ydDogXCJuZXdcIixcbiAgICAgIC4uLnBhcmFtc1xuICAgIH0pLnRoZW4oYXV0aG9yZWRTb3VscyA9PlxuICAgICAgYWxsKFxuICAgICAgICBhdXRob3JlZFNvdWxzLm1hcChhdXRob3JlZFNvdWwgPT5cbiAgICAgICAgICBzY29wZS5nZXQoYCR7YXV0aG9yZWRTb3VsfS9jb21tZW50c2ApLnNvdWxzKClcbiAgICAgICAgKVxuICAgICAgKS50aGVuKHVuaW9uQXJyYXlzKVxuICAgIClcbik7XG5cbmNvbnN0IHNpbmdsZVN1Ym1pc3Npb24gPSBxdWVyeSgoc2NvcGUsIHBhcmFtcykgPT5cbiAgc2NvcGVcbiAgICAuZ2V0KFxuICAgICAgU2NoZW1hLlRoaW5nQWxsQ29tbWVudHMucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQ6IHBhcmFtcy5zdWJtaXNzaW9uSWQgfSlcbiAgICApXG4gICAgLnNvdWxzKFxuICAgICAgUi5wcmVwZW5kKFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZDogcGFyYW1zLnN1Ym1pc3Npb25JZCB9KSlcbiAgICApXG4pO1xuXG5jb25zdCB0aGluZyA9IHF1ZXJ5KChzY29wZSwgdGhpbmdTb3VsKSA9PlxuICBzY29wZS5nZXQodGhpbmdTb3VsKS50aGVuKG1ldGEgPT4ge1xuICAgIGlmICghbWV0YSB8fCAhbWV0YS5pZCkgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgcmVzdWx0ID0geyBpZDogbWV0YS5pZCwgdGltZXN0YW1wOiBwYXJzZUZsb2F0KG1ldGEudGltZXN0YW1wLCAxMCkgfTtcbiAgICBjb25zdCByZXBseVRvU291bCA9IFIucGF0aChbXCJyZXBseVRvXCIsIFwiI1wiXSwgbWV0YSk7XG4gICAgY29uc3Qgb3BTb3VsID0gUi5wYXRoKFtcIm9wXCIsIFwiI1wiXSwgbWV0YSk7XG4gICAgY29uc3Qgb3BJZCA9IG9wU291bCA/IFNjaGVtYS5UaGluZy5yb3V0ZS5tYXRjaChvcFNvdWwpLnRoaW5naWQgOiBudWxsO1xuICAgIGNvbnN0IHJlcGx5VG9JZCA9IHJlcGx5VG9Tb3VsXG4gICAgICA/IFNjaGVtYS5UaGluZy5yb3V0ZS5tYXRjaChyZXBseVRvU291bCkudGhpbmdpZFxuICAgICAgOiBudWxsO1xuXG4gICAgaWYgKG9wSWQpIHJlc3VsdC5vcElkID0gb3BJZDtcbiAgICBpZiAocmVwbHlUb0lkKSByZXN1bHQucmVwbHlUb0lkID0gcmVwbHlUb0lkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pXG4pO1xuXG5jb25zdCB0aGluZ1ZvdGVDb3VudCA9IHZvdGVUeXBlID0+XG4gIHF1ZXJ5KChzY29wZSwgdGhpbmdTb3VsKSA9PlxuICAgIHNjb3BlXG4gICAgICAuZ2V0KHRoaW5nU291bClcbiAgICAgIC5nZXQodm90ZVR5cGUpXG4gICAgICAuY291bnQoKVxuICApO1xuXG5jb25zdCB0aGluZ1ZvdGVzVXAgPSB0aGluZ1ZvdGVDb3VudChcInZvdGVzdXBcIik7XG5jb25zdCB0aGluZ1ZvdGVzRG93biA9IHRoaW5nVm90ZUNvdW50KFwidm90ZXNkb3duXCIpO1xuY29uc3QgdGhpbmdBbGxDb21tZW50c0NvdW50ID0gcXVlcnkoKHNjb3BlLCB0aGluZ1NvdWwpID0+XG4gIHNjb3BlLmdldChgJHt0aGluZ1NvdWx9L2FsbGNvbW1lbnRzYCkuY291bnQoKVxuKTtcblxuY29uc3QgY29tcHV0ZVRoaW5nU2NvcmVzID0gcXVlcnkoKHNjb3BlLCB0aGluZ1NvdWwpID0+XG4gIGFsbChbXG4gICAgdGhpbmdWb3Rlc1VwKHNjb3BlLCB0aGluZ1NvdWwpLFxuICAgIHRoaW5nVm90ZXNEb3duKHNjb3BlLCB0aGluZ1NvdWwpLFxuICAgIHRoaW5nQWxsQ29tbWVudHNDb3VudChzY29wZSwgdGhpbmdTb3VsKVxuICBdKS50aGVuKChbdXAsIGRvd24sIGNvbW1lbnRdKSA9PiAoeyB1cCwgZG93biwgY29tbWVudCwgc2NvcmU6IHVwIC0gZG93biB9KSlcbik7XG5cbmNvbnN0IHRoaW5nTWV0YSA9IHF1ZXJ5KFxuICAoc2NvcGUsIHsgdGhpbmdTb3VsLCB0YWJ1bGF0b3IsIGRhdGEgPSBmYWxzZSwgc2NvcmVzID0gZmFsc2UgfSkgPT4ge1xuICAgIGlmICghdGhpbmdTb3VsKSByZXR1cm4gcmVzb2x2ZShudWxsKTtcbiAgICByZXR1cm4gYWxsKFtcbiAgICAgIHRoaW5nKHNjb3BlLCB0aGluZ1NvdWwpLFxuICAgICAgc2NvcmVzXG4gICAgICAgID8gdGFidWxhdG9yXG4gICAgICAgICAgPyBzY29wZS5nZXQoYCR7dGhpbmdTb3VsfS92b3RlY291bnRzQH4ke3RhYnVsYXRvcn0uYCkudGhlbigpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICA6IGNvbXB1dGVUaGluZ1Njb3JlcyhzY29wZSwgdGhpbmdTb3VsKS50aGVuKClcbiAgICAgICAgOiByZXNvbHZlKCksXG4gICAgICBkYXRhXG4gICAgICAgID8gc2NvcGVcbiAgICAgICAgICAgIC5nZXQodGhpbmdTb3VsKVxuICAgICAgICAgICAgLmdldChcImRhdGFcIilcbiAgICAgICAgICAgIC50aGVuKClcbiAgICAgICAgOiByZXNvbHZlKClcbiAgICBdKS50aGVuKChbbWV0YSwgdm90ZXMsIGRhdGFdKSA9PiB7XG4gICAgICBpZiAoIW1ldGEgfHwgIW1ldGEuaWQpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHsgLi4ubWV0YSwgdm90ZXMsIGRhdGEgfTtcbiAgICB9KTtcbiAgfVxuKTtcblxuY29uc3QgbXVsdGlUaGluZ01ldGEgPSBxdWVyeSgoc2NvcGUsIHBhcmFtcykgPT5cbiAgYWxsKFxuICAgIFIucmVkdWNlKFxuICAgICAgKHByb21pc2VzLCB0aGluZ1NvdWwpID0+IHtcbiAgICAgICAgaWYgKCF0aGluZ1NvdWwpIHJldHVybiBwcm9taXNlcztcbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGluZ01ldGEoc2NvcGUsIHsgLi4ucGFyYW1zLCB0aGluZ1NvdWwgfSkpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZXM7XG4gICAgICB9LFxuICAgICAgW10sXG4gICAgICBSLnByb3BPcihbXSwgXCJ0aGluZ1NvdWxzXCIsIHBhcmFtcylcbiAgICApXG4gIClcbik7XG5cbmNvbnN0IG11bHRpUXVlcnkgPSAoc2luZ2xlUXVlcnksIHBsdXJhbCwgc2luZ2xlLCBjb2xsYXRlID0gdW5pb25BcnJheXMpID0+XG4gIHF1ZXJ5KChzY29wZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgaXRlbXMgPSBSLnByb3AocGx1cmFsLCBwYXJhbXMpO1xuXG4gICAgaWYgKFIuaXNOaWwoaXRlbXMpKSByZXR1cm4gZW1wdHlQcm9taXNlO1xuICAgIHJldHVybiBhbGwoXG4gICAgICBSLm1hcChcbiAgICAgICAgdmFsID0+IHNpbmdsZVF1ZXJ5KHNjb3BlLCB7IC4uLnBhcmFtcywgW3NpbmdsZV06IHZhbCB9KSxcbiAgICAgICAgUi5wcm9wT3IoW10sIHBsdXJhbCwgcGFyYW1zKVxuICAgICAgKVxuICAgICkudGhlbihjb2xsYXRlKTtcbiAgfSk7XG5cbmNvbnN0IG11bHRpVG9waWMgPSBtdWx0aVF1ZXJ5KHNpbmdsZVRvcGljLCBcInRvcGljc1wiLCBcInRvcGljXCIpO1xuY29uc3QgbXVsdGlEb21haW4gPSBtdWx0aVF1ZXJ5KHNpbmdsZURvbWFpbiwgXCJkb21haW5zXCIsIFwiZG9tYWluXCIpO1xuY29uc3QgbXVsdGlBdXRob3IgPSBtdWx0aVF1ZXJ5KHNpbmdsZUF1dGhvciwgXCJhdXRob3JJZHNcIiwgXCJhdXRob3JJZFwiKTtcbmNvbnN0IG11bHRpU3VibWlzc2lvbiA9IG11bHRpUXVlcnkoXG4gIHNpbmdsZVN1Ym1pc3Npb24sXG4gIFwic3VibWlzc2lvbklkc1wiLFxuICBcInN1Ym1pc3Npb25JZFwiXG4pO1xuXG5jb25zdCB0aGluZ0RhdGFGcm9tU291bHMgPSBzY29wZSA9PiBzb3VscyA9PlxuICBhbGwoXG4gICAgc291bHNcbiAgICAgIC5maWx0ZXIoeCA9PiAhIXgpXG4gICAgICAubWFwKHNvdWwgPT5cbiAgICAgICAgc2NvcGVcbiAgICAgICAgICAuZ2V0KHNvdWwpXG4gICAgICAgICAgLmdldChcImRhdGFcIilcbiAgICAgICAgICAudGhlbih4ID0+IHgpXG4gICAgICApXG4gICk7XG5cbmNvbnN0IGN1cmF0ZWQgPSBxdWVyeSgoc2NvcGUsIGF1dGhvcklkcywgc3VibWlzc2lvbk9ubHkgPSBmYWxzZSkgPT5cbiAgYWxsKFtcbiAgICBtdWx0aUF1dGhvcihzY29wZSwge1xuICAgICAgdHlwZTogXCJjb21tZW50c1wiLFxuICAgICAgYXV0aG9ySWRzXG4gICAgfSlcbiAgICAgIC50aGVuKHRoaW5nRGF0YUZyb21Tb3VscyhzY29wZSkpXG4gICAgICAudGhlbihcbiAgICAgICAgUi5jb21wb3NlKFxuICAgICAgICAgIFIubWFwKHN1Ym1pc3Npb25Pbmx5ID8gUi5wcm9wKFwib3BJZFwiKSA6IFIucHJvcChcInJlcGx5VG9JZFwiKSksXG4gICAgICAgICAgUi5maWx0ZXIoUi5wcm9wKFwicmVwbHlUb0lkXCIpKVxuICAgICAgICApXG4gICAgICApLFxuICAgIG11bHRpQXV0aG9yKHNjb3BlLCB7XG4gICAgICB0eXBlOiBcInN1Ym1pdHRlZFwiLFxuICAgICAgYXV0aG9ySWRzXG4gICAgfSkudGhlbihSLm1hcChzb3VsID0+IFNjaGVtYS5UaGluZy5yb3V0ZS5tYXRjaChzb3VsKS50aGluZ0lkKSlcbiAgXSkudGhlbigoW2lkczEsIGlkczJdKSA9PiBSLnVuaXEoWy4uLmlkczEsIC4uLmlkczJdKSlcbik7XG5cbmNvbnN0IHRoaW5nU2NvcmVzID0gcXVlcnkoXG4gIChzY29wZSwgdGFidWxhdG9yLCB0aGluZ0lkKSA9PlxuICAgIHRhYnVsYXRvciAmJiB0aGluZ0lkXG4gICAgICA/IHNjb3BlXG4gICAgICAgICAgLmdldChTY2hlbWEuVGhpbmdWb3RlQ291bnRzLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkLCB0YWJ1bGF0b3IgfSkpXG4gICAgICAgICAgLnRoZW4oKVxuICAgICAgOiByZXNvbHZlKCksXG4gIFwidGhpbmdTY29yZXNcIlxuKTtcblxuY29uc3QgdGhpbmdSZXBsaWVzID0gcXVlcnkoKHNjb3BlLCB0aGluZ0lkKSA9PlxuICBzY29wZS5nZXQoU2NoZW1hLlRoaW5nQ29tbWVudHMucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkpLnRoZW4oKVxuKTtcblxuY29uc3QgdGhpbmdEYXRhID0gcXVlcnkoXG4gIChzY29wZSwgdGhpbmdJZCkgPT5cbiAgICB0aGluZ0lkXG4gICAgICA/IHNjb3BlLmdldChTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkpLmdldChcImRhdGFcIilcbiAgICAgIDogcmVzb2x2ZShudWxsKSxcbiAgXCJ0aGluZ0RhdGFcIlxuKTtcblxuY29uc3QgdXNlclBhZ2VzID0gcXVlcnkoXG4gIChzY29wZSwgYXV0aG9ySWQpID0+XG4gICAgc2NvcGUuZ2V0KFNjaGVtYS5BdXRob3JQYWdlcy5yb3V0ZS5yZXZlcnNlKHsgYXV0aG9ySWQgfSkpLFxuICBcInVzZXJQYWdlc1wiXG4pO1xuXG5jb25zdCB3aWtpUGFnZUlkID0gcXVlcnkoXG4gIChzY29wZSwgYXV0aG9ySWQsIG5hbWUpID0+XG4gICAgc2NvcGVcbiAgICAgIC5nZXQoU2NoZW1hLkF1dGhvclBhZ2VzLnJvdXRlLnJldmVyc2UoeyBhdXRob3JJZCB9KSlcbiAgICAgIC5nZXQobmFtZSlcbiAgICAgIC5nZXQoXCJpZFwiKSxcbiAgXCJ3aWtpUGFnZUlkXCJcbik7XG5cbmNvbnN0IHdpa2lQYWdlID0gcXVlcnkoKHNjb3BlLCBhdXRob3JJZCwgbmFtZSkgPT5cbiAgd2lraVBhZ2VJZChzY29wZSwgYXV0aG9ySWQsIG5hbWUpLnRoZW4oaWQgPT4gaWQgJiYgdGhpbmdEYXRhKHNjb3BlLCBpZCkpXG4pO1xuXG5jb25zdCB1c2VyTWV0YSA9IHF1ZXJ5KFxuICAoc2NvcGUsIGlkKSA9PlxuICAgIHNjb3BlLmdldChpZCkudGhlbihtZXRhID0+ICh7XG4gICAgICB1c2VyQWxpYXM6IFIucHJvcChcImFsaWFzXCIsIG1ldGEpLFxuICAgICAgY3JlYXRlZEF0OiBSLnBhdGgoW1wiX1wiLCBcIj5cIiwgXCJwdWJcIl0sIG1ldGEpXG4gICAgfSkpLFxuICBcInVzZXJNZXRhXCJcbik7XG5cbmNvbnN0IGNyZWF0ZVNjb3BlID0gUi5jdXJyeSgobmFiLCBvcHRzKSA9PlxuICBtYWtlU2NvcGUoUi5hc3NvYyhcImd1blwiLCBuYWIuZ3VuLCBvcHRzIHx8IHt9KSlcbik7XG5cbmV4cG9ydCBjb25zdCBRdWVyeSA9IHtcbiAgc2luZ2xlVG9waWMsXG4gIHNpbmdsZURvbWFpbixcbiAgc2luZ2xlQXV0aG9yLFxuICBzaW5nbGVMaXN0aW5nLFxuICByZXBsaWVzVG9BdXRob3IsXG4gIHNpbmdsZVN1Ym1pc3Npb24sXG4gIGNvbXB1dGVUaGluZ1Njb3JlcyxcbiAgdGhpbmdNZXRhLFxuICBtdWx0aVRoaW5nTWV0YSxcbiAgbXVsdGlUb3BpYyxcbiAgbXVsdGlEb21haW4sXG4gIG11bHRpQXV0aG9yLFxuICBtdWx0aVN1Ym1pc3Npb24sXG4gIHRoaW5nU2NvcmVzLFxuICB0aGluZ1JlcGxpZXMsXG4gIHRoaW5nRGF0YSxcbiAgdG9waWNTb3VscyxcbiAgdXNlclBhZ2VzLFxuICB3aWtpUGFnZUlkLFxuICB3aWtpUGFnZSxcbiAgdXNlck1ldGEsXG4gIGNyZWF0ZVNjb3BlLFxuICBjdXJhdGVkXG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwicm91dGUtcGFyc2VyXCI7XG5cbmNvbnN0IHNwbGl0RG9tYWlucyA9IFIuY29tcG9zZShcbiAgUi5zb3J0QnkoUi5pZGVudGl0eSksXG4gIFIuZmlsdGVyKFIuaWRlbnRpdHkpLFxuICBSLm1hcChSLnRyaW0pLFxuICBSLnNwbGl0KFwiK1wiKSxcbiAgUi50b0xvd2VyLFxuICBSLnRyaW0sXG4gIFIuZGVmYXVsdFRvKFwiXCIpXG4pO1xuXG5jb25zdCBzcGxpdFRvcGljcyA9IFIuY29tcG9zZShcbiAgUi5pZkVsc2UoUi5wcm9wKFwibGVuZ3RoXCIpLCBSLmlkZW50aXR5LCBSLmFsd2F5cyhbXCJhbGxcIl0pKSxcbiAgc3BsaXREb21haW5zXG4pO1xuXG5jb25zdCB3aXRoUm91dGUgPSBvYmogPT4gUi5hc3NvYyhcInJvdXRlXCIsIG5ldyBSb3V0ZShvYmoucGF0aCksIG9iaik7XG5cbmV4cG9ydCBjb25zdCBQYXRoID0geyBzcGxpdERvbWFpbnMsIHNwbGl0VG9waWNzLCB3aXRoUm91dGUgfTtcbiIsIi8qIGdsb2JhbHMgR3VuICovXG5pbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuXG5jb25zdCBzb3VsID0gUi5wYXRoT3IoXCJcIiwgW1wiX1wiLCBcIiNcIl0pO1xuY29uc3Qgc3RhdGUgPSBSLnBhdGhPcih7fSwgW1wiX1wiLCBcIj5cIl0pO1xuXG5jb25zdCBsYXRlc3QgPSBSLmNvbXBvc2UoXG4gIFIubGFzdCxcbiAgUi5zb3J0QnkoUi5pZGVudGl0eSksXG4gIFIudmFsdWVzLFxuICBzdGF0ZVxuKTtcblxuY29uc3QgZWRnZXMgPSBSLmNvbXBvc2UoXG4gIFIubWFwKFIucHJvcChcIiNcIikpLFxuICBSLnZhbHVlc1xuKTtcblxuZnVuY3Rpb24gZGVjb2RlU0VBKHJhd0RhdGEpIHtcbiAgY29uc3QgZGF0YSA9IHJhd0RhdGEgPyB7IC4uLnJhd0RhdGEgfSA6IHJhd0RhdGE7XG4gIGNvbnN0IHNvdWwgPSBSLnBhdGgoW1wiX1wiLCBcIiNcIl0sIGRhdGEpO1xuXG4gIGlmICghc291bCB8fCAhR3VuLlNFQSB8fCBzb3VsLmluZGV4T2YoXCJ+XCIpID09PSAtMSkgcmV0dXJuIHJhd0RhdGE7XG4gIFIud2l0aG91dChbXCJfXCJdLCBSLmtleXMoZGF0YSkpLmZvckVhY2goa2V5ID0+IHtcbiAgICBHdW4uU0VBLnZlcmlmeShcbiAgICAgIEd1bi5TRUEub3B0LnBhY2socmF3RGF0YVtrZXldLCBrZXksIHJhd0RhdGEsIHNvdWwpLFxuICAgICAgZmFsc2UsXG4gICAgICByZXMgPT4gKGRhdGFba2V5XSA9IEd1bi5TRUEub3B0LnVucGFjayhyZXMsIGtleSwgcmF3RGF0YSkpXG4gICAgKTtcbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufTtcblxuZXhwb3J0IGNvbnN0IEd1bk5vZGUgPSB7IHNvdWwsIHN0YXRlLCBsYXRlc3QsIGVkZ2VzLCBkZWNvZGVTRUEgfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCIuLi9RdWVyeVwiO1xuaW1wb3J0IHsgVGhpbmdEYXRhTm9kZSB9IGZyb20gXCIuLi9UaGluZ1wiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi9MaXN0aW5nTm9kZVwiO1xuaW1wb3J0IHsgTGlzdGluZ0RhdGFTb3VyY2UgfSBmcm9tIFwiLi9MaXN0aW5nRGF0YVNvdXJjZVwiO1xuXG5jb25zdCBpbnRQYXRoID0gcCA9PlxuICBSLmNvbXBvc2UoXG4gICAgcGFyc2VJbnQsXG4gICAgUi5wYXRoKHApXG4gICk7XG5cbmNvbnN0IGZyb21EZWZpbml0aW9uID0gZGVmaW5pdGlvbiA9PiB7XG4gIGNvbnN0IHsgZmlsdGVycywgdm90ZUZpbHRlcnMsIGlzUHJlc2VudCB9ID0gZGVmaW5pdGlvbjtcbiAgY29uc3QgZmlsdGVyRnVuY3Rpb25zID0gW107XG4gIGNvbnN0IHZvdGVGaWx0ZXJGdW5jdGlvbnMgPSBbXTtcblxuICBjb25zdCBhZGRGaWx0ZXIgPSAoLi4uZm5zKSA9PiBmaWx0ZXJGdW5jdGlvbnMucHVzaChSLmNvbXBvc2UoLi4uZm5zKSk7XG4gIGNvbnN0IGFkZFZvdGVGaWx0ZXIgPSAoLi4uZm5zKSA9PiB2b3RlRmlsdGVyRnVuY3Rpb25zLnB1c2goUi5jb21wb3NlKC4uLmZucykpO1xuXG4gIGlmIChmaWx0ZXJzLmFsbG93LmFsaWFzZXMubGVuZ3RoKVxuICAgIGFkZEZpbHRlcih0ID0+ICEhaXNQcmVzZW50KFtcImFsaWFzXCIsIHRdKSwgUi5wYXRoKFtcImRhdGFcIiwgXCJhdXRob3JcIl0pKTtcbiAgaWYgKGZpbHRlcnMuYWxsb3cuYXV0aG9ycy5sZW5ndGgpXG4gICAgYWRkRmlsdGVyKHQgPT4gISFpc1ByZXNlbnQoW1wiYXV0aG9yXCIsIHRdKSwgUi5wYXRoKFtcImRhdGFcIiwgXCJhdXRob3JJZFwiXSkpO1xuICBpZiAoZmlsdGVycy5hbGxvdy5kb21haW5zLmxlbmd0aClcbiAgICBhZGRGaWx0ZXIodCA9PiAhIWlzUHJlc2VudChbXCJkb21haW5cIiwgdF0pLCBUaGluZ0RhdGFOb2RlLmRvbWFpbik7XG5cbiAgaWYgKFxuICAgIGZpbHRlcnMuYWxsb3cudG9waWNzLmxlbmd0aCAmJlxuICAgICFSLmZpbmQoXG4gICAgICBSLmNvbXBvc2UoXG4gICAgICAgIFIuaWRlbnRpY2FsKFwiYWxsXCIpLFxuICAgICAgICBSLmxhc3QsXG4gICAgICAgIFIuc3BsaXQoXCI6XCIpXG4gICAgICApLFxuICAgICAgZmlsdGVycy5hbGxvdy50b3BpY3NcbiAgICApXG4gIClcbiAgICBhZGRGaWx0ZXIodCA9PiAhIWlzUHJlc2VudChbXCJ0b3BpY1wiLCB0XSksIFIucGF0aChbXCJkYXRhXCIsIFwidG9waWNcIl0pKTtcblxuICBpZiAoZmlsdGVycy5hbGxvdy5raW5kcy5sZW5ndGgpXG4gICAgYWRkRmlsdGVyKGtpbmQgPT4gISFpc1ByZXNlbnQoW1wia2luZFwiLCBraW5kXSksIFIucGF0aChbXCJkYXRhXCIsIFwia2luZFwiXSkpO1xuICBpZiAoZmlsdGVycy5hbGxvdy50eXBlID09PSBcImNvbW1hbmRzXCIpXG4gICAgYWRkRmlsdGVyKFxuICAgICAgUi5jb21wb3NlKFxuICAgICAgICBSLnRlc3QoQ29uc3RhbnRzLkNPTU1BTkRfUkUpLFxuICAgICAgICBSLnBhdGgoW1wiZGF0YVwiLCBcImJvZHlcIl0pXG4gICAgICApXG4gICAgKTtcblxuICBpZiAoZmlsdGVycy5kZW55LmFsaWFzZXMubGVuZ3RoKVxuICAgIGFkZEZpbHRlcihcbiAgICAgIGFsaWFzID0+ICFpc1ByZXNlbnQoW1wiYmFuXCIsIFwiYWxpYXNcIiwgYWxpYXNdKSxcbiAgICAgIFIucGF0aChbXCJkYXRhXCIsIFwiYXV0aG9yXCJdKVxuICAgICk7XG4gIGlmIChmaWx0ZXJzLmRlbnkuYXV0aG9ycy5sZW5ndGgpXG4gICAgYWRkRmlsdGVyKFxuICAgICAgYXV0aG9ySWQgPT4gIWlzUHJlc2VudChbXCJiYW5cIiwgXCJhdXRob3JcIiwgYXV0aG9ySWRdKSxcbiAgICAgIFIucGF0aChbXCJkYXRhXCIsIFwiYXV0aG9ySWRcIl0pXG4gICAgKTtcbiAgaWYgKGZpbHRlcnMuZGVueS5kb21haW5zLmxlbmd0aClcbiAgICBhZGRGaWx0ZXIoXG4gICAgICBkb21haW4gPT4gIWRvbWFpbiB8fCAhaXNQcmVzZW50KFtcImJhblwiLCBcImRvbWFpblwiLCBkb21haW5dKSxcbiAgICAgIFRoaW5nRGF0YU5vZGUuZG9tYWluXG4gICAgKTtcbiAgaWYgKGZpbHRlcnMuZGVueS50b3BpY3MubGVuZ3RoKVxuICAgIGFkZEZpbHRlcihcbiAgICAgIHRvcGljID0+ICFpc1ByZXNlbnQoW1wiYmFuXCIsIFwidG9waWNcIiwgdG9waWNdKSxcbiAgICAgIFIucGF0aChbXCJkYXRhXCIsIFwidG9waWNcIl0pXG4gICAgKTtcbiAgaWYgKGZpbHRlcnMuZGVueS5hbm9uKSBhZGRGaWx0ZXIoUi5wYXRoKFtcImRhdGFcIiwgXCJhdXRob3JJZFwiXSkpO1xuICBpZiAoZmlsdGVycy5kZW55LnNpZ25lZClcbiAgICBhZGRGaWx0ZXIoXG4gICAgICBSLmNvbXBvc2UoXG4gICAgICAgIGF1dGhvcklkID0+ICFhdXRob3JJZCxcbiAgICAgICAgUi5wYXRoKFtcImRhdGFcIiwgXCJhdXRob3JJZFwiXSlcbiAgICAgIClcbiAgICApO1xuXG4gIGlmICh2b3RlRmlsdGVycy51cHNNaW4gIT09IG51bGwpXG4gICAgYWRkVm90ZUZpbHRlcihSLmx0ZSh2b3RlRmlsdGVycy51cHNNaW4pLCBpbnRQYXRoKFtcInZvdGVzXCIsIFwidXBcIl0pKTtcbiAgaWYgKHZvdGVGaWx0ZXJzLnVwc01heCAhPT0gbnVsbClcbiAgICBhZGRWb3RlRmlsdGVyKFIuZ3RlKHZvdGVGaWx0ZXJzLnVwc01heCksIGludFBhdGgoW1widm90ZXNcIiwgXCJ1cFwiXSkpO1xuICBpZiAodm90ZUZpbHRlcnMuZG93bnNNaW4gIT09IG51bGwpXG4gICAgYWRkVm90ZUZpbHRlcihSLmx0ZSh2b3RlRmlsdGVycy5kb3duc01pbiksIGludFBhdGgoW1widm90ZXNcIiwgXCJkb3duXCJdKSk7XG4gIGlmICh2b3RlRmlsdGVycy5kb3duc01heCAhPT0gbnVsbClcbiAgICBhZGRWb3RlRmlsdGVyKFIuZ3RlKHZvdGVGaWx0ZXJzLmRvd25zTWF4KSwgaW50UGF0aChbXCJ2b3Rlc1wiLCBcImRvd25cIl0pKTtcbiAgaWYgKHZvdGVGaWx0ZXJzLnNjb3JlTWluICE9PSBudWxsKVxuICAgIGFkZFZvdGVGaWx0ZXIoUi5sdGUodm90ZUZpbHRlcnMuc2NvcmVNaW4pLCBpbnRQYXRoKFtcInZvdGVzXCIsIFwic2NvcmVcIl0pKTtcbiAgaWYgKHZvdGVGaWx0ZXJzLnNjb3JlTWF4ICE9PSBudWxsKVxuICAgIGFkZFZvdGVGaWx0ZXIoUi5ndGUodm90ZUZpbHRlcnMuc2NvcmVNYXgpLCBpbnRQYXRoKFtcInZvdGVzXCIsIFwic2NvcmVcIl0pKTtcblxuICBpZiAoZmlsdGVycy5kZW55LnRhZ3MubGVuZ3RoKVxuICAgIGFkZFZvdGVGaWx0ZXIodGhpbmcgPT4ge1xuICAgICAgY29uc3QgY21kcyA9IFIucGF0aChbXCJ2b3Rlc1wiLCBcImNvbW1hbmRzXCJdLCB0aGluZykgfHwge307XG5cbiAgICAgIHJldHVybiAhZmlsdGVycy5kZW55LnRhZ3MuZmluZChcbiAgICAgICAgKFt0YWdOYW1lLCBhdXRob3JJZF0pID0+ICEhUi5wYXRoKFthdXRob3JJZCwgXCJ0YWdcIiwgdGFnTmFtZV0sIGNtZHMpXG4gICAgICApO1xuICAgIH0pO1xuXG4gIGNvbnN0IGNvbnRlbnRGaWx0ZXIgPSB0aGluZyA9PiAhZmlsdGVyRnVuY3Rpb25zLmZpbmQoZm4gPT4gIWZuKHRoaW5nKSk7XG4gIGNvbnN0IHZvdGVGaWx0ZXIgPSB0aGluZyA9PiAhdm90ZUZpbHRlckZ1bmN0aW9ucy5maW5kKGZuID0+ICFmbih0aGluZykpO1xuICBjb25zdCB0aGluZ0ZpbHRlciA9IHRoaW5nID0+IChjb250ZW50RmlsdGVyKHRoaW5nKSAmJiB2b3RlRmlsdGVyKHRoaW5nKSk7XG5cbiAgcmV0dXJuIHsgdGhpbmdGaWx0ZXIsIGNvbnRlbnRGaWx0ZXIsIHZvdGVGaWx0ZXIgfTtcbn07XG5cbmNvbnN0IGdldEZpbHRlcmVkSWRzID0gYXN5bmMgKFxuICBzY29wZSxcbiAgc29ydGVkUm93cyxcbiAgeyBsaW1pdCA9IDI1LCBjb3VudCA9IDAsIGFmdGVyID0gbnVsbCwgZmlsdGVyRm4gfSA9IHt9XG4pID0+IHtcbiAgY29uc3Qgcm93cyA9IHNvcnRlZFJvd3Muc2xpY2UoKTtcbiAgY29uc3QgZmlsdGVyZWQgPSBbXTtcbiAgY29uc3QgZmV0Y2hCYXRjaCA9IChzaXplID0gMzApID0+XG4gICAgUHJvbWlzZS5hbGwoXG4gICAgICBSLm1hcChhc3luYyByb3cgPT4ge1xuICAgICAgICBsZXQgaW5MaXN0aW5nID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZmlsdGVyRm4pIGluTGlzdGluZyA9IGF3YWl0IGZpbHRlckZuKHJvd1tMaXN0aW5nTm9kZS5QT1NfSURdKTtcbiAgICAgICAgaWYgKGluTGlzdGluZykgZmlsdGVyZWQucHVzaChyb3cpO1xuICAgICAgfSwgcm93cy5zcGxpY2UoY291bnQsIHNpemUpKVxuICAgICk7XG5cbiAgd2hpbGUgKHJvd3MubGVuZ3RoKSB7XG4gICAgYXdhaXQgZmV0Y2hCYXRjaCgpO1xuICAgIGlmIChsaW1pdCAmJiBmaWx0ZXJlZC5sZW5ndGggPj0gbGltaXQpIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIFIuY29tcG9zZShcbiAgICBSLm1hcChSLnByb3AoTGlzdGluZ05vZGUuUE9TX0lEKSksXG4gICAgbGltaXQgPyBSLnNsaWNlKDAsIGxpbWl0KSA6IFIuaWRlbnRpdHksXG4gICAgUi5zb3J0QnkoUi5wcm9wKExpc3RpbmdOb2RlLlBPU19WQUwpKVxuICApKGZpbHRlcmVkKTtcbn07XG5cbmNvbnN0IHRoaW5nRmlsdGVyID0gUi5jdXJyeSgoc2NvcGUsIHNwZWMsIHRoaW5nSWQpID0+XG4gIFF1ZXJ5LnRoaW5nTWV0YShzY29wZSwge1xuICAgIHRhYnVsYXRvcjogc3BlYy50YWJ1bGF0b3IsXG4gICAgdGhpbmdTb3VsOiBTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSksXG4gICAgc2NvcmVzOiBMaXN0aW5nRGF0YVNvdXJjZS5uZWVkc1Njb3JlcyhzcGVjKSxcbiAgICBkYXRhOiBMaXN0aW5nRGF0YVNvdXJjZS5uZWVkc0RhdGEoc3BlYylcbiAgfSkudGhlbihzcGVjLnRoaW5nRmlsdGVyKVxuKTtcblxuZXhwb3J0IGNvbnN0IExpc3RpbmdGaWx0ZXIgPSB7IGZyb21EZWZpbml0aW9uLCBnZXRGaWx0ZXJlZElkcywgdGhpbmdGaWx0ZXIgfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBQcm9taXNlLCBxdWVyeSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IFRoaW5nU2V0IH0gZnJvbSBcIi4uL1RoaW5nXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCIuLi9RdWVyeVwiO1xuaW1wb3J0IHsgTGlzdGluZ1NvcnQgfSBmcm9tIFwiLi9MaXN0aW5nU29ydFwiO1xuXG5jb25zdCBuZWVkc1Njb3JlcyA9IGRlZmluaXRpb24gPT5cbiAgISFSLmZpbmQoZGVmaW5pdGlvbi5pc1ByZXNlbnQsIFtcbiAgICBcInNvcnQgaG90XCIsXG4gICAgXCJzb3J0IHRvcFwiLFxuICAgIFwic29ydCBiZXN0XCIsXG4gICAgXCJzb3J0IGNvbnRyb3ZlcnNpYWxcIixcbiAgICBcInVwc1wiLFxuICAgIFwiZG93bnNcIixcbiAgICBcInNjb3JlXCIsXG4gICAgXCJjYW4gcmVtb3ZlXCJcbiAgXSk7XG5cbmNvbnN0IG5lZWRzRGF0YSA9IGRlZmluaXRpb24gPT5cbiAgISFSLmZpbmQoZGVmaW5pdGlvbi5pc1ByZXNlbnQsIFtcbiAgICBcInRvcGljXCIsXG4gICAgXCJkb21haW5cIixcbiAgICBcImF1dGhvclwiLFxuICAgIFwidW5pcXVlIGJ5IGNvbnRlbnRcIixcbiAgICBcImtpbmRcIixcbiAgICBcInR5cGVcIixcbiAgICBcInJlcXVpcmUgc2lnbmVkXCIsXG4gICAgXCJyZXF1aXJlIGFub25cIixcbiAgICBcImFsaWFzXCIsXG4gICAgXCJiYW4gZG9tYWluXCIsXG4gICAgXCJiYW4gdG9waWNcIixcbiAgICBcImJhbiBhdXRob3JcIixcbiAgICBcImJhbiBhbGlhc1wiXG4gIF0pO1xuXG5jb25zdCBpdGVtc0Zyb21UaGluZ1NvdWxzID0gcXVlcnkoKHNjb3BlLCBzb3VscywgZGVmaW5pdGlvbikgPT5cbiAgUHJvbWlzZS5hbGwoXG4gICAgUi5tYXAoc291bCA9PiBMaXN0aW5nU29ydC5pdGVtRnJvbVNvdWwoc2NvcGUsIHNvdWwsIGRlZmluaXRpb24pLCBzb3VscylcbiAgKS50aGVuKExpc3RpbmdTb3J0LnNvcnRJdGVtcylcbik7XG5cbmNvbnN0IGl0ZW1zRnJvbVRoaW5nU2V0cyA9IHF1ZXJ5KChzY29wZSwgc291bHMsIGRlZmluaXRpb24pID0+XG4gIFByb21pc2UuYWxsKFIubWFwKHNjb3BlLmdldCwgc291bHMpKVxuICAgIC50aGVuKFIucmVkdWNlKFIubWVyZ2VSaWdodCwge30pKVxuICAgIC50aGVuKFRoaW5nU2V0LnNvdWxzKVxuICAgIC50aGVuKHNvdWxzID0+IGl0ZW1zRnJvbVRoaW5nU291bHMoc2NvcGUsIHNvdWxzLCBkZWZpbml0aW9uKSlcbik7XG5cbmNvbnN0IGxpc3RpbmdTb3VyY2UgPSBkZWZpbml0aW9uID0+IHtcbiAgY29uc3QgbGlzdGluZ3MgPSBSLnBhdGhPcihbXSwgW1wiZmlsdGVyc1wiLCBcImFsbG93XCIsIFwibGlzdGluZ3NcIl0sIGRlZmluaXRpb24pO1xuICBjb25zdCB7IHNvcnQgfSA9IGRlZmluaXRpb247XG4gIGNvbnN0IGxpc3RpbmdQYXRocyA9IFIubWFwKGwgPT4gYCR7bH0vJHtzb3J0fWAsIGxpc3RpbmdzKTtcblxuICByZXR1cm4geyBsaXN0aW5nUGF0aHMgfTtcbn07XG5cbmNvbnN0IHRvcGljU291cmNlID0gZGVmaW5pdGlvbiA9PiB7XG4gIGNvbnN0IHsgc29ydCB9ID0gZGVmaW5pdGlvbjtcbiAgY29uc3QgdG9waWNzID0gUi5wYXRoKFtcImZpbHRlcnNcIiwgXCJhbGxvd1wiLCBcInRvcGljc1wiXSwgZGVmaW5pdGlvbikgfHwgW107XG4gIGNvbnN0IGxpc3RpbmdQYXRocyA9IFIubWFwKHQgPT4gYC90LyR7dH0vJHtzb3J0fWAsIHRvcGljcyk7XG4gIGNvbnN0IHF1ZXJ5ID0gc2NvcGUgPT5cbiAgICBRdWVyeS5tdWx0aVRvcGljKHNjb3BlLCB7IHRvcGljcywgc29ydCB9KS50aGVuKHNvdWxzID0+XG4gICAgICBpdGVtc0Zyb21UaGluZ1NvdWxzKHNjb3BlLCBzb3VscywgZGVmaW5pdGlvbilcbiAgICApO1xuXG4gIHJldHVybiB7IGxpc3RpbmdQYXRocywgcXVlcnkgfTtcbn07XG5cbmNvbnN0IGRvbWFpblNvdXJjZSA9IGRlZmluaXRpb24gPT4ge1xuICBjb25zdCB7IHNvcnQgfSA9IGRlZmluaXRpb247XG4gIGNvbnN0IGRvbWFpbnMgPSBSLnBhdGgoW1wiZmlsdGVyc1wiLCBcImFsbG93XCIsIFwiZG9tYWluc1wiXSwgZGVmaW5pdGlvbikgfHwgW107XG5cbiAgaWYgKCFkb21haW5zLmxlbmd0aCkgcmV0dXJuIHRvcGljU291cmNlKGRlZmluaXRpb24pO1xuICBjb25zdCBsaXN0aW5nUGF0aHMgPSBSLm1hcChkID0+IGAvZG9tYWluLyR7ZH0vJHtzb3J0fWAsIGRvbWFpbnMpO1xuICBjb25zdCBxdWVyeSA9IHNjb3BlID0+XG4gICAgUXVlcnkubXVsdGlEb21haW4oc2NvcGUsIHsgZG9tYWlucywgc29ydCB9KS50aGVuKHNvdWxzID0+XG4gICAgICBpdGVtc0Zyb21UaGluZ1NvdWxzKHNjb3BlLCBzb3VscywgZGVmaW5pdGlvbilcbiAgICApO1xuXG4gIHJldHVybiB7IGxpc3RpbmdQYXRocywgcXVlcnkgfTtcbn07XG5cbmNvbnN0IGF1dGhvclNvdXJjZSA9IGRlZmluaXRpb24gPT4ge1xuICBjb25zdCB7IHNvcnQgfSA9IGRlZmluaXRpb247XG4gIGNvbnN0IGF1dGhvcklkcyA9IFIucGF0aChbXCJmaWx0ZXJzXCIsIFwiYWxsb3dcIiwgXCJhdXRob3JzXCJdLCBkZWZpbml0aW9uKTtcbiAgY29uc3QgdHlwZSA9IFIucGF0aChbXCJmaWx0ZXJzXCIsIFwiYWxsb3dcIiwgXCJ0eXBlXCJdLCBkZWZpbml0aW9uKTtcblxuICBpZiAoIWF1dGhvcklkcy5sZW5ndGgpIHJldHVybiB0b3BpY1NvdXJjZShkZWZpbml0aW9uKTtcbiAgY29uc3QgbGlzdGluZ1BhdGhzID0gUi5tYXAoaWQgPT4gYC91c2VyLyR7aWR9LyR7dHlwZX0vJHtzb3J0fWAsIGF1dGhvcklkcyk7XG4gIGNvbnN0IHF1ZXJ5ID0gc2NvcGUgPT5cbiAgICBRdWVyeS5tdWx0aUF1dGhvcihzY29wZSwgeyB0eXBlLCBhdXRob3JJZHMgfSkudGhlbihzb3VscyA9PlxuICAgICAgaXRlbXNGcm9tVGhpbmdTb3VscyhzY29wZSwgc291bHMsIGRlZmluaXRpb24pXG4gICAgKTtcblxuICByZXR1cm4geyBsaXN0aW5nUGF0aHMsIHF1ZXJ5IH07XG59O1xuXG5jb25zdCBjdXJhdG9yU291cmNlID0gZGVmaW5pdGlvbiA9PiB7XG4gIGNvbnN0IHsgc29ydCB9ID0gZGVmaW5pdGlvbjtcbiAgY29uc3QgY3VyYXRvcnMgPSBSLnByb3AoXCJjdXJhdG9yc1wiLCBkZWZpbml0aW9uKSB8fCBbXTtcblxuICBpZiAoIWN1cmF0b3JzLmxlbmd0aCkgcmV0dXJuIHRvcGljU291cmNlKGRlZmluaXRpb24pO1xuICBjb25zdCBsaXN0aW5nUGF0aHMgPSBSLm1hcChpZCA9PiBgL3VzZXIvJHtpZH0vY29tbWVudGVkLyR7c29ydH1gLCBjdXJhdG9ycyk7XG4gIGNvbnN0IHF1ZXJ5ID0gc2NvcGUgPT5cbiAgICBRdWVyeS5jdXJhdGUoc2NvcGUsIGN1cmF0b3JzLCB0cnVlKVxuICAgICAgLnRoZW4oaWRzID0+IGlkcy5tYXAodGhpbmdJZCA9PiBTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkpKVxuICAgICAgLnRoZW4oc291bHMgPT4gaXRlbXNGcm9tVGhpbmdTb3VscyhzY29wZSwgc291bHMsIGRlZmluaXRpb24pKTtcblxuICByZXR1cm4geyBsaXN0aW5nUGF0aHMsIHF1ZXJ5IH07XG59O1xuXG5jb25zdCBvcFNvdXJjZSA9IGRlZmluaXRpb24gPT4ge1xuICBjb25zdCB7IHNvcnQgfSA9IGRlZmluaXRpb247XG4gIGNvbnN0IHN1Ym1pc3Npb25JZHMgPSBSLnBhdGgoW1wiZmlsdGVyc1wiLCBcImFsbG93XCIsIFwib3BzXCJdLCBkZWZpbml0aW9uKTtcblxuICBpZiAoIXN1Ym1pc3Npb25JZHMubGVuZ3RoKSB0b3BpY1NvdXJjZShkZWZpbml0aW9uKTtcbiAgY29uc3QgbGlzdGluZ1BhdGhzID0gUi5tYXAoXG4gICAgaWQgPT4gYC90aGluZ3MvJHtpZH0vY29tbWVudHMvJHtzb3J0fWAsXG4gICAgc3VibWlzc2lvbklkc1xuICApO1xuICBjb25zdCBxdWVyeSA9IHNjb3BlID0+XG4gICAgUXVlcnkubXVsdGlTdWJtaXNzaW9uKHNjb3BlLCB7IHN1Ym1pc3Npb25JZHMgfSkudGhlbihzb3VscyA9PlxuICAgICAgaXRlbXNGcm9tVGhpbmdTb3VscyhzY29wZSwgc291bHMsIGRlZmluaXRpb24pXG4gICAgKTtcblxuICByZXR1cm4geyBsaXN0aW5nUGF0aHMsIHF1ZXJ5IH07XG59O1xuXG5jb25zdCByZXBsaWVzU291cmNlID0gZGVmaW5pdGlvbiA9PiB7XG4gIGNvbnN0IHsgc29ydCB9ID0gZGVmaW5pdGlvbjtcbiAgY29uc3QgaWQgPSBSLnBhdGgoW1wiZmlsdGVyc1wiLCBcImFsbG93XCIsIFwicmVwbGllc1RvXCJdLCBkZWZpbml0aW9uKTtcbiAgY29uc3QgdHlwZSA9IFIucGF0aChbXCJmaWx0ZXJzXCIsIFwiYWxsb3dcIiwgXCJ0eXBlXCJdLCBkZWZpbml0aW9uKTtcblxuICBjb25zdCBsaXN0aW5nUGF0aHMgPSBbYC91c2VyLyR7aWR9L3JlcGxpZXMvJHt0eXBlfS8ke3NvcnR9YF07XG4gIGNvbnN0IHF1ZXJ5ID0gc2NvcGUgPT5cbiAgICBRdWVyeS5yZXBsaWVzVG9BdXRob3Ioc2NvcGUsIHtcbiAgICAgIHR5cGUsXG4gICAgICByZXBsaWVzVG9BdXRob3JJZDogaWQsXG4gICAgICBpbmRleGVyOiBkZWZpbml0aW9uLmluZGV4ZXJcbiAgICB9KS50aGVuKHNvdWxzID0+IGl0ZW1zRnJvbVRoaW5nU291bHMoc2NvcGUsIHNvdWxzLCBkZWZpbml0aW9uKSk7XG5cbiAgcmV0dXJuIHsgbGlzdGluZ1BhdGhzLCBxdWVyeSB9O1xufTtcblxuY29uc3Qgc291cmNlcyA9IHtcbiAgbGlzdGluZzogbGlzdGluZ1NvdXJjZSxcbiAgcmVwbGllczogcmVwbGllc1NvdXJjZSxcbiAgb3A6IG9wU291cmNlLFxuICBjdXJhdG9yOiBjdXJhdG9yU291cmNlLFxuICBhdXRob3I6IGF1dGhvclNvdXJjZSxcbiAgZG9tYWluOiBkb21haW5Tb3VyY2UsXG4gIHRvcGljOiB0b3BpY1NvdXJjZVxufTtcblxuY29uc3Qgc291cmNlTmFtZXMgPSBSLmtleXMoc291cmNlcyk7XG5jb25zdCBzb3VyY2VOYW1lID0gZGVmID0+IFIuZmluZChkZWYuaXNQcmVzZW50LCBzb3VyY2VOYW1lcykgfHwgXCJ0b3BpY1wiO1xuY29uc3QgZnJvbURlZmluaXRpb24gPSBkZWZpbml0aW9uID0+IHtcbiAgY29uc3QgbmFtZSA9IHNvdXJjZU5hbWUoZGVmaW5pdGlvbik7XG5cbiAgcmV0dXJuIFIubWVyZ2VMZWZ0KHsgbmFtZSB9LCBzb3VyY2VzW25hbWVdKGRlZmluaXRpb24pKTtcbn07XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nRGF0YVNvdXJjZSA9IHtcbiAgZnJvbURlZmluaXRpb24sXG4gIHNvdXJjZXMsXG4gIG5lZWRzU2NvcmVzLFxuICBuZWVkc0RhdGEsXG4gIGl0ZW1zRnJvbVRoaW5nU2V0cyxcbiAgaXRlbXNGcm9tVGhpbmdTb3Vsc1xufTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSwgYWxsLCByZXNvbHZlIH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4uL1NjaGVtYVwiO1xuaW1wb3J0IHsgVGhpbmdTZXQgfSBmcm9tIFwiLi4vVGhpbmdcIjtcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIi4uL1F1ZXJ5XCI7XG5cbmNvbnN0IFtQT1NfSUQsIFBPU19WQUxdID0gWzAsIDFdO1xuY29uc3QgdG9JZHMgPSBSLm1hcChSLnByb3AoUE9TX0lEKSk7XG5jb25zdCBzb3J0SXRlbXMgPSBSLnNvcnRXaXRoKFIucHJvcChQT1NfVkFMKSk7XG5cbmNvbnN0IHZvdGVTb3J0ID0gZm4gPT4gcXVlcnkoKHNjb3BlLCB0aGluZ0lkLCBzcGVjKSA9PiB7XG4gIGlmIChzcGVjLmlzSWRTdGlja3kodGhpbmdJZCkpIHJldHVybiByZXNvbHZlKC1JbmZpbml0eSk7XG4gIGlmIChSLmNvbnRhaW5zKHRoaW5nSWQsIHNwZWMuZmlsdGVycy5hbGxvdy5vcHMpKSByZXR1cm4gcmVzb2x2ZSgtSW5maW5pdHkpO1xuXG4gIHJldHVybiBRdWVyeS50aGluZ01ldGEoc2NvcGUsIHtcbiAgICB0YWJ1bGF0b3I6IHNwZWMudGFidWxhdG9yLFxuICAgIHNjb3JlczogdHJ1ZSxcbiAgICB0aGluZ1NvdWw6IFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCB9KVxuICB9KS50aGVuKHJlcyA9PiBmbihyZXMsIHNwZWMpKTtcbn0pO1xuXG5jb25zdCB0aW1lU29ydCA9IGZuID0+IHF1ZXJ5KChzY29wZSwgdGhpbmdJZCwgc3BlYykgPT5cbiAgUXVlcnkudGhpbmdNZXRhKHNjb3BlLCB7XG4gICAgdGFidWxhdG9yOiBzcGVjLnRhYnVsYXRvcixcbiAgICB0aGluZ1NvdWw6IFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCB9KVxuICB9KS50aGVuKGZuKVxuKTtcblxuY29uc3Qgc29ydHMgPSB7XG4gIG5ldzogdGltZVNvcnQoXG4gICAgUi5jb21wb3NlKFxuICAgICAgUi5tdWx0aXBseSgtMSksXG4gICAgICB2YWwgPT4gdmFsIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgUi5wcm9wKFwidGltZXN0YW1wXCIpXG4gICAgKVxuICApLFxuICBvbGQ6IHRpbWVTb3J0KFIucHJvcChcInRpbWVzdGFtcFwiKSksXG4gIGFjdGl2ZTogdm90ZVNvcnQoXG4gICAgKHsgdGltZXN0YW1wLCBsYXN0QWN0aXZlIH0pID0+IC0xICogKGxhc3RBY3RpdmUgfHwgdGltZXN0YW1wKVxuICApLFxuICB0b3A6IHZvdGVTb3J0KFxuICAgIFIuY29tcG9zZShcbiAgICAgIHggPT4gLTEgKiBwYXJzZUludCh4LCAxMCksXG4gICAgICBSLnBhdGhPcigwLCBbXCJ2b3Rlc1wiLCBcInNjb3JlXCJdKVxuICAgIClcbiAgKSxcbiAgY29tbWVudHM6IHZvdGVTb3J0KFxuICAgIFIuY29tcG9zZShcbiAgICAgIHggPT4gLTEgKiBwYXJzZUZsb2F0KHgsIDEwKSxcbiAgICAgIFIucGF0aE9yKDAsIFtcInZvdGVzXCIsIFwiY29tbWVudFwiXSlcbiAgICApXG4gICksXG4gIGRpc2N1c3NlZDogdm90ZVNvcnQodGhpbmcgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IFIucHJvcChcInRpbWVzdGFtcFwiLCB0aGluZyk7XG4gICAgY29uc3Qgc2NvcmUgPSBwYXJzZUludChSLnBhdGhPcigwLCBbXCJ2b3Rlc1wiLCBcImNvbW1lbnRcIl0sIHRoaW5nKSwgMTApO1xuICAgIGNvbnN0IHNlY29uZHMgPSB0aW1lc3RhbXAgLyAxMDAwIC0gMTEzNDAyODAwMztcbiAgICBjb25zdCBvcmRlciA9IE1hdGgubG9nMTAoTWF0aC5tYXgoTWF0aC5hYnMoc2NvcmUpLCAxKSk7XG5cbiAgICBpZiAoIXNjb3JlKSByZXR1cm4gMTAwMDAwMDAwMCAtIHNlY29uZHM7XG4gICAgcmV0dXJuIC0xICogKG9yZGVyICsgc2Vjb25kcyAvIDQ1MDAwKTtcbiAgfSksXG4gIGhvdDogdm90ZVNvcnQodGhpbmcgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IFIucHJvcChcInRpbWVzdGFtcFwiLCB0aGluZyk7XG4gICAgY29uc3Qgc2NvcmUgPSBwYXJzZUludChSLnBhdGhPcigwLCBbXCJ2b3Rlc1wiLCBcInNjb3JlXCJdLCB0aGluZyksIDEwKTtcbiAgICBjb25zdCBzZWNvbmRzID0gdGltZXN0YW1wIC8gMTAwMCAtIDExMzQwMjgwMDM7XG4gICAgY29uc3Qgb3JkZXIgPSBNYXRoLmxvZzEwKE1hdGgubWF4KE1hdGguYWJzKHNjb3JlKSwgMSkpO1xuICAgIGxldCBzaWduID0gMDtcblxuICAgIGlmIChzY29yZSA+IDApIHtcbiAgICAgIHNpZ24gPSAxO1xuICAgIH0gZWxzZSBpZiAoc2NvcmUgPCAwKSB7XG4gICAgICBzaWduID0gLTE7XG4gICAgfVxuICAgIHJldHVybiAtMSAqIChzaWduICogb3JkZXIgKyBzZWNvbmRzIC8gNDUwMDApO1xuICB9KSxcbiAgYmVzdDogdm90ZVNvcnQodGhpbmcgPT4ge1xuICAgIGNvbnN0IHVwcyA9IHBhcnNlSW50KFIucGF0aE9yKDAsIFtcInZvdGVzXCIsIFwidXBcIl0sIHRoaW5nKSwgMTApO1xuICAgIGNvbnN0IGRvd25zID0gcGFyc2VJbnQoUi5wYXRoT3IoMCwgW1widm90ZXNcIiwgXCJkb3duXCJdLCB0aGluZyksIDEwKTtcbiAgICBjb25zdCBuID0gdXBzICsgZG93bnM7XG5cbiAgICBpZiAobiA9PT0gMCkgcmV0dXJuIDA7XG4gICAgY29uc3QgeiA9IDEuMjgxNTUxNTY1NTQ1OyAvLyA4MCUgY29uZmlkZW5jZVxuICAgIGNvbnN0IHAgPSB1cHMgLyBuO1xuICAgIGNvbnN0IGxlZnQgPSBwICsgKDEgLyAoMiAqIG4pKSAqIHogKiB6O1xuICAgIGNvbnN0IHJpZ2h0ID0geiAqIE1hdGguc3FydCgocCAqICgxIC0gcCkpIC8gbiArICh6ICogeikgLyAoNCAqIG4gKiBuKSk7XG4gICAgY29uc3QgdW5kZXIgPSAxICsgKDEgLyBuKSAqIHogKiB6O1xuXG4gICAgcmV0dXJuIC0xICogKChsZWZ0IC0gcmlnaHQpIC8gdW5kZXIpO1xuICB9KSxcbiAgY29udHJvdmVyc2lhbDogdm90ZVNvcnQodGhpbmcgPT4ge1xuICAgIGNvbnN0IHVwcyA9IHBhcnNlSW50KFIucGF0aE9yKDAsIFtcInZvdGVzXCIsIFwidXBcIl0sIHRoaW5nKSwgMTApO1xuICAgIGNvbnN0IGRvd25zID0gcGFyc2VJbnQoUi5wYXRoT3IoMCwgW1widm90ZXNcIiwgXCJkb3duXCJdLCB0aGluZyksIDEwKTtcblxuICAgIGlmICh1cHMgPD0gMCB8fCBkb3ducyA8PSAwKSByZXR1cm4gMDtcbiAgICBjb25zdCBtYWduaXR1ZGUgPSB1cHMgKyBkb3ducztcbiAgICBjb25zdCBiYWxhbmNlID0gdXBzID4gZG93bnMgPyBkb3ducyAvIHVwcyA6IHVwcyAvIGRvd25zO1xuXG4gICAgcmV0dXJuIC0xICogbWFnbml0dWRlICoqIGJhbGFuY2U7XG4gIH0pXG59O1xuXG5jb25zdCB0b0l0ZW0gPSBxdWVyeShcbiAgKHNjb3BlLCBpZCwgc3BlYykgPT5cbiAgICAoc29ydHNbc3BlYy5zb3J0XSB8fCBzb3J0cy5uZXcpKGlkLCBzcGVjKS50aGVuKHZhbCA9PiBbaWQsIHZhbF0pXG4pO1xuXG5jb25zdCB0b0l0ZW1zID0gcXVlcnkoXG4gIChzY29wZSwgaWRzLCBzcGVjKSA9PiBhbGwoUi5tYXAoXG4gICAgaWQgPT4gdG9JdGVtKHNjb3BlLCBpZCwgc3BlYyksXG4gICAgaWRzXG4gICkpXG4pO1xuXG5jb25zdCBmcm9tVGhpbmdTZXRzID0gcXVlcnkoXG4gIChzY29wZSwgc291bHMsIHNwZWMpID0+XG4gICAgYWxsKFIubWFwKHNjb3BlLmdldCwgc291bHMpKVxuICAgICAgLnRoZW4oUi5waXBlKFxuICAgICAgICBUaGluZ1NldC51bmlvbixcbiAgICAgICAgVGhpbmdTZXQuaWRzLFxuICAgICAgICBpZHMgPT4gdG9JdGVtcyhzY29wZSwgaWRzLCBzcGVjKVxuICAgICAgKSlcbiAgICAgIC50aGVuKHNvcnRJdGVtcylcbik7XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nU29ydCA9IHtcbiAgUE9TX0lELFxuICBQT1NfVkFMLFxuICBzb3J0cyxcbiAgdG9JdGVtLFxuICB0b0l0ZW1zLFxuICB0b0lkcyxcbiAgc29ydEl0ZW1zLFxuICBmcm9tVGhpbmdTZXRzXG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IEd1bk5vZGUgfSBmcm9tIFwiLi4vR3VuTm9kZVwiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4uL1NjaGVtYVwiO1xuaW1wb3J0IHsgVGhpbmdTZXQgfSBmcm9tIFwiLi4vVGhpbmdcIjtcbmltcG9ydCB7IExpc3RpbmdOb2RlIH0gZnJvbSBcIi4vTGlzdGluZ05vZGVcIjtcbmltcG9ydCB7IExpc3RpbmdTb3J0IH0gZnJvbSBcIi4vTGlzdGluZ1NvcnRcIjtcblxuY29uc3QgdXBkYXRlTGlzdGluZyA9IGFzeW5jIChcbiAgb3JjLFxuICByb3V0ZSxcbiAgc2NvcGUsXG4gIHNwZWMsXG4gIGlkcyA9IFtdLFxuICByZW1vdmVJZHMgPSBbXVxuKSA9PiB7XG4gIGlmICghaWRzLmxlbmd0aCAmJiAhcmVtb3ZlSWRzLmxlbmd0aCkgcmV0dXJuO1xuICBjb25zdCBleGlzdGluZyA9IGF3YWl0IG9yYy5uZXdTY29wZSgpLmdldChyb3V0ZS5zb3VsKTtcbiAgY29uc3QgdXBkYXRlZEl0ZW1zID0gYXdhaXQgTGlzdGluZ1NvcnQudG9JdGVtcyhzY29wZSwgaWRzLCBzcGVjKTtcbiAgY29uc3QgY2hhbmdlcyA9IExpc3RpbmdOb2RlLmRpZmYoZXhpc3RpbmcsIHVwZGF0ZWRJdGVtcywgcmVtb3ZlSWRzKTtcblxuICBpZiAoY2hhbmdlcykgY29uc29sZS5sb2coXCJDSEFOR0VTXCIsIHJvdXRlLnNvdWwsIGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlcykgcm91dGUud3JpdGUoY2hhbmdlcyk7XG59O1xuXG5jb25zdCBvblB1dCA9IGFzeW5jIChvcmMsIHJvdXRlLCB7IHNvcnQsIHVwZGF0ZWRTb3VsLCBkaWZmIH0pID0+IHtcbiAgbGV0IHVwZGF0ZWRJZHMgPSBbXTtcbiAgY29uc3Qgc2NvcGUgPSBvcmMubmV3U2NvcGUoKTtcbiAgY29uc3QgeyB0aGluZ0lkIH0gPSBTY2hlbWEuVGhpbmdWb3RlQ291bnRzLnJvdXRlLm1hdGNoKHVwZGF0ZWRTb3VsKSB8fCB7fTtcbiAgY29uc3QgaXNTdGlja3kgPSBSLmVxdWFscyhyb3V0ZS5tYXRjaC50aGluZ0lkIHx8IG51bGwpO1xuXG4gIGlmICh0aGluZ0lkKSB1cGRhdGVkSWRzLnB1c2godGhpbmdJZCk7XG4gIHVwZGF0ZWRJZHMgPSBSLmNvbmNhdCh1cGRhdGVkSWRzLCBUaGluZ1NldC5pZHMoR3VuTm9kZS5kZWNvZGVTRUEoZGlmZikpKTtcbiAgYXdhaXQgdXBkYXRlTGlzdGluZyhvcmMsIHJvdXRlLCBzY29wZSwgc29ydCwgdXBkYXRlZElkcywgW10sIGlzU3RpY2t5KTtcbiAgZm9yIChjb25zdCBrZXkgaW4gc2NvcGUuZ2V0QWNjZXNzZXMoKSkgb3JjLmxpc3RlbihrZXksIHJvdXRlLnNvdWwpO1xufTtcblxuZXhwb3J0IGNvbnN0IExpc3RpbmdPcmFjbGUgPSB7XG4gIHVwZGF0ZUxpc3RpbmcsXG4gIG9uUHV0XG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCBvYmpIYXNoIGZyb20gXCJvYmplY3QtaGFzaFwiO1xuaW1wb3J0IHsgY3JlYXRlU3VwcHJlc3NvciB9IGZyb20gXCJndW4tc3VwcHJlc3NvclwiO1xuaW1wb3J0ICogYXMgc2VhIGZyb20gXCJndW4tc3VwcHJlc3Nvci1zZWFyXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi9TY2hlbWFcIjtcblxuY29uc3QgaXNMZWdhY3lUaGluZyA9IChzY2hlbWEsIGRhdGEpID0+IHtcbiAgY29uc3QgZGF0YVNvdWwgPSBSLnBhdGgoW1wiZGF0YVwiLCBcIiNcIl0sIGRhdGEpO1xuICBjb25zdCBuZXdlc3QgPSBSLndpdGhvdXQoXG4gICAgW1wiY29tbWVudHNcIiwgXCJhbGxjb21tZW50c1wiLCBcInZvdGVzdXBcIiwgXCJ2b3Rlc2Rvd25cIl0sXG4gICAgUi5rZXlzKFIucGF0aChbXCJfXCIsIFwiPlwiXSwgZGF0YSkpXG4gIClcbiAgICAubWFwKGtleSA9PiBSLnBhdGgoW1wiX1wiLCBcIj5cIiwga2V5XSwgZGF0YSkpXG4gICAgLnNvcnQoKVxuICAgIC5wb3AoKTtcbiAgY29uc3QgeyB0aGluZ0lkIH0gPSBzY2hlbWEuVGhpbmdEYXRhLnJvdXRlLm1hdGNoKGRhdGFTb3VsKSB8fCB7fTtcbiAgY29uc3QgaWQgPSBSLnByb3AoXCJpZFwiLCBkYXRhKTtcblxuICByZXR1cm4gaWQgJiYgaWQgPT09IHRoaW5nSWQgJiYgbmV3ZXN0ICYmIG5ld2VzdCA8IDE1NDMxMDI4MTQ5NDU7XG59O1xuXG5jb25zdCB0aGluZ0hhc2hNYXRjaGVzU291bCA9IChfc2NoZW1hLCBkYXRhKSA9PiB7XG4gIGNvbnN0IGlkID0gUi5wcm9wKFwiaWRcIiwgZGF0YSk7XG5cbiAgcmV0dXJuIChcbiAgICBpZCAmJlxuICAgIGlkID09PVxuICAgICAgb2JqSGFzaCh7XG4gICAgICAgIGF1dGhvcklkOiAoUi5wYXRoKFtcImF1dGhvclwiLCBcIiNcIl0sIGRhdGEpIHx8IFwiXCIpLnN1YnN0cigxKSB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRpbWVzdGFtcDogcGFyc2VJbnQoUi5wcm9wKFwidGltZXN0YW1wXCIsIGRhdGEpLCAxMCksXG4gICAgICAgIGtpbmQ6IFIucHJvcChcImtpbmRcIiwgZGF0YSksXG4gICAgICAgIHRvcGljOiBSLnByb3AoXG4gICAgICAgICAgXCJ0b3BpY05hbWVcIixcbiAgICAgICAgICBTY2hlbWEuVG9waWMucm91dGUubWF0Y2goUi5wYXRoKFtcInRvcGljXCIsIFwiI1wiXSwgZGF0YSkpXG4gICAgICAgICksXG4gICAgICAgIG9wSWQ6IFIucHJvcChcbiAgICAgICAgICBcInRoaW5nSWRcIixcbiAgICAgICAgICBTY2hlbWEuVGhpbmcucm91dGUubWF0Y2goUi5wYXRoKFtcIm9wXCIsIFwiI1wiXSwgZGF0YSkpXG4gICAgICAgICksXG4gICAgICAgIHJlcGx5VG9JZDogUi5wcm9wKFxuICAgICAgICAgIFwidGhpbmdJZFwiLFxuICAgICAgICAgIFNjaGVtYS5UaGluZy5yb3V0ZS5tYXRjaChSLnBhdGgoW1wicmVwbHlUb1wiLCBcIiNcIl0sIGRhdGEpKVxuICAgICAgICApLFxuICAgICAgICBvcmlnaW5hbEhhc2g6IFIucHJvcChcIm9yaWdpbmFsSGFzaFwiLCBkYXRhKVxuICAgICAgfSlcbiAgKTtcbn07XG5cbmNvbnN0IHNpZ25lZFRoaW5nRGF0YU1hdGNoZXMgPSAoX3NjaGVtYSwgZGF0YSkgPT4ge1xuICBjb25zdCBhdXRob3JJZCA9IChSLnBhdGgoW1wiYXV0aG9yXCIsIFwiI1wiXSwgZGF0YSkgfHwgXCJcIikuc3Vic3RyKDEpIHx8IHVuZGVmaW5lZDtcbiAgY29uc3Qgc2lnbmVkSWQgPSBSLnByb3AoXG4gICAgXCJhdXRob3JJZFwiLFxuICAgIFNjaGVtYS5UaGluZ0RhdGFTaWduZWQucm91dGUubWF0Y2goUi5wYXRoKFtcImRhdGFcIiwgXCIjXCJdLCBkYXRhKSlcbiAgKTtcblxuICByZXR1cm4gYXV0aG9ySWQgJiYgYXV0aG9ySWQgPT09IHNpZ25lZElkO1xufTtcblxuY29uc3QgdGhpbmdEYXRhTWF0Y2hlc09yaWdpbmFsSGFzaCA9IChfc2NoZW1hLCBkYXRhKSA9PiB7XG4gIGNvbnN0IG9yaWdpbmFsSGFzaCA9IFIucHJvcChcIm9yaWdpbmFsSGFzaFwiLCBkYXRhKTtcbiAgY29uc3QgaWQgPSBSLnByb3AoXG4gICAgXCJ0aGluZ0lkXCIsXG4gICAgU2NoZW1hLlRoaW5nRGF0YS5yb3V0ZS5tYXRjaChSLnBhdGgoW1wiZGF0YVwiLCBcIiNcIl0sIGRhdGEpKVxuICApO1xuXG4gIHJldHVybiBpZCAmJiBpZCA9PT0gb3JpZ2luYWxIYXNoO1xufTtcblxuY29uc3QgZ2V0SXNUaGluZ1JlbGF0ZWRFZGdlID0gYWp2ID0+IChcbiAgbm9kZVR5cGVOYW1lLFxuICBkYXRhLFxuICBfcFNjaGVtYSxcbiAgX2NQYXRoLFxuICBwYXJlbnREYXRhXG4pID0+IHtcbiAgY29uc3QgeyB0aGluZ0lkIH0gPVxuICAgIFNjaGVtYS5UaGluZy5yb3V0ZS5tYXRjaChSLnBhdGgoW1wiX1wiLCBcIiNcIl0sIHBhcmVudERhdGEpIHx8IFwiXCIpIHx8IHt9O1xuICBjb25zdCB7IHRoaW5nSWQ6IHByb3BUaGluZ0lkIH0gPSBTY2hlbWFbbm9kZVR5cGVOYW1lXS5yb3V0ZS5tYXRjaChcbiAgICBSLnByb3AoXCIjXCIsIGRhdGEpIHx8IFwiXCJcbiAgKTtcblxuICBpZiAoIXRoaW5nSWQgfHwgdGhpbmdJZCAhPT0gcHJvcFRoaW5nSWQpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGFqdi5jb21waWxlKHsgJHJlZjogYHNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy8ke25vZGVUeXBlTmFtZX1FZGdlYCB9KShcbiAgICBkYXRhXG4gICk7XG59O1xuXG5jb25zdCB0aGluZ0RhdGFIYXNoTWF0Y2hlcyA9IChfc2NoZW1hLCBkYXRhKSA9PiB7XG4gIGNvbnN0IHsgXywgLi4ucmVjb3JkIH0gPSBkYXRhIHx8IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgcmVjb3JkLnRpbWVzdGFtcCA9IHBhcnNlRmxvYXQocmVjb3JkLnRpbWVzdGFtcCwgMTApO1xuICBjb25zdCB7IHRoaW5nSWQgfSA9XG4gICAgU2NoZW1hLlRoaW5nRGF0YS5yb3V0ZS5tYXRjaChSLnBhdGgoW1wiX1wiLCBcIiNcIl0sIGRhdGEpIHx8IFwiXCIpIHx8IHt9O1xuXG4gIHJldHVybiB0aGluZ0lkICYmIHRoaW5nSWQgPT09IG9iakhhc2gocmVjb3JkKTtcbn07XG5cbmNvbnN0IGlzVm90ZVZhbGlkID0gKGFyZ29uMiwgc2NoZW1hLCBwcmVmaXgsIHZvdGUpID0+IHtcbiAgY29uc3QgeyBhbGdvcml0aG0gPSBcImFyZ29uMmRcIiwgY29uZmlnID0ge30gfSA9IHNjaGVtYSB8fCB7fTtcblxuICBjb25zdCBub25jZSA9IEJ1ZmZlci5oYXNPd25Qcm9wZXJ0eShcImZyb21cIilcbiAgICA/IEJ1ZmZlci5mcm9tKHZvdGUsIFwiaGV4XCIpXG4gICAgOiBuZXcgQnVmZmVyKHZvdGUsIFwiaGV4XCIpO1xuICBjb25zdCBzYWx0ID0gQnVmZmVyLmhhc093blByb3BlcnR5KFwiZnJvbVwiKVxuICAgID8gQnVmZmVyLmZyb20obm9uY2UsIFwiaGV4XCIpXG4gICAgOiBuZXcgQnVmZmVyKG5vbmNlLCBcImhleFwiKTtcbiAgY29uc3QgaGFzaCA9IGFyZ29uMi5oYXNoKHByZWZpeCwge1xuICAgIHNhbHQsXG4gICAgaGFzaExlbmd0aDogY29uZmlnLmhhc2hMZW5ndGgsXG4gICAgdGltZUNvc3Q6IGNvbmZpZy50aW1lQ29zdCxcbiAgICBtZW1vcnlDb3N0OiBjb25maWcubWVtb3J5Q29zdCxcbiAgICBwYXJhbGxlbGlzbTogY29uZmlnLnBhcmFsbGVsaXNtLFxuICAgIHJhdzogdHJ1ZSxcbiAgICB0eXBlOiBhcmdvbjJbYWxnb3JpdGhtXVxuICB9KTtcbiAgbGV0IG9mZiA9IDA7XG4gIGxldCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPD0gY29uZmlnLmNvbXBsZXhpdHkgLSA4OyBpICs9IDgsIG9mZisrKSB7XG4gICAgaWYgKGhhc2hbb2ZmXSAhPT0gMCkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1hc2sgPSAweGZmIDw8ICg4ICsgaSAtIGNvbmZpZy5jb21wbGV4aXR5KTtcblxuICByZXR1cm4gKGhhc2hbb2ZmXSAmIG1hc2spID09PSAwO1xufTtcblxuY29uc3Qga2V5c0FyZVByb29mc09mV29yayA9IChzY2hlbWEsIGRhdGEpID0+IHtcbiAgY29uc3QgYXJnb24yID0gcmVxdWlyZShcImFyZ29uMlwiKTtcblxuICBpZiAoIWFyZ29uMikgcmV0dXJuIHRydWU7IC8vIGluIGJyb3dzZXIgZG9uJ3QgYm90aGVyIGZvciBub3dcbiAgY29uc3QgeyBhbGdvcml0aG0gPSBcImFyZ29uMmRcIiB9ID0gc2NoZW1hIHx8IHt9O1xuICBjb25zdCBwcmVmaXggPSBSLnBhdGgoW1wiX1wiLCBcIiNcIl0sIGRhdGEpO1xuXG4gIGlmIChhbGdvcml0aG0gIT09IFwiYXJnb24yZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBhcmdvbjIgc3VwcG9ydGVkIGZvciB2b3RlIGhhc2hlc1wiKTtcbiAgfVxuXG4gIFIud2l0aG91dChbXCJfXCJdLCBSLmtleXMoZGF0YSkpLmZvckVhY2godm90ZSA9PiB7XG4gICAgaWYgKCFpc1ZvdGVWYWxpZChhcmdvbjIsIHNjaGVtYSwgcHJlZml4LCB2b3RlKSkge1xuICAgICAgY29uc29sZS5sb2coXCJpbnZhbGlkIHZvdGVcIiwgcHJlZml4LCB2b3RlKTtcbiAgICAgIGRlbGV0ZSBkYXRhW3ZvdGVdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgaW5pdEFqdiA9IFIuY29tcG9zZShcbiAgYWp2ID0+IHtcbiAgICBhanYuYWRkS2V5d29yZChcImlzTGVnYWN5VGhpbmdcIiwge1xuICAgICAgdmFsaWRhdGU6IGlzTGVnYWN5VGhpbmdcbiAgICB9KTtcbiAgICBhanYuYWRkS2V5d29yZChcInRoaW5nSGFzaE1hdGNoZXNTb3VsXCIsIHtcbiAgICAgIHZhbGlkYXRlOiB0aGluZ0hhc2hNYXRjaGVzU291bFxuICAgIH0pO1xuICAgIGFqdi5hZGRLZXl3b3JkKFwic2lnbmVkVGhpbmdEYXRhTWF0Y2hlc1RoaW5nXCIsIHtcbiAgICAgIHZhbGlkYXRlOiBzaWduZWRUaGluZ0RhdGFNYXRjaGVzXG4gICAgfSk7XG4gICAgYWp2LmFkZEtleXdvcmQoXCJ0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoXCIsIHtcbiAgICAgIHZhbGlkYXRlOiB0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoXG4gICAgfSk7XG4gICAgYWp2LmFkZEtleXdvcmQoXCJ0aGluZ1JlbGF0ZWRFZGdlXCIsIHtcbiAgICAgIHZhbGlkYXRlOiBnZXRJc1RoaW5nUmVsYXRlZEVkZ2UoYWp2KVxuICAgIH0pO1xuICAgIGFqdi5hZGRLZXl3b3JkKFwidGhpbmdEYXRhSGFzaE1hdGNoZXNTb3VsXCIsIHtcbiAgICAgIHZhbGlkYXRlOiB0aGluZ0RhdGFIYXNoTWF0Y2hlc1xuICAgIH0pO1xuICAgIGFqdi5hZGRLZXl3b3JkKFwia2V5c0FyZVByb29mc09mV29ya1wiLCB7XG4gICAgICB2YWxpZGF0ZToga2V5c0FyZVByb29mc09mV29yayxcbiAgICAgIG1vZGlmeWluZzogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBhanY7XG4gIH0sXG4gIHNlYS5pbml0QWp2XG4pO1xuXG5leHBvcnQgY29uc3Qgc3VwcHJlc3NvciA9IGNyZWF0ZVN1cHByZXNzb3Ioe1xuICBkZWZpbml0aW9uczogU2NoZW1hLmRlZmluaXRpb25zLFxuICBpbml0OiBpbml0QWp2XG59KTtcblxuY29uc3QgZ3VuV2lyZUlucHV0ID0gUi5jdXJyeSgocGVlciwgY29udGV4dCkgPT5cbiAgY29udGV4dC5vbihcImluXCIsIGZ1bmN0aW9uIHdpcmVJbnB1dChtc2cpIHtcbiAgICBjb25zdCBfID0gbXNnW1wiX1wiXTtcblxuICAgIGRlbGV0ZSBtc2dbXCJfXCJdO1xuICAgIGlmIChcInBpbmdcIiBpbiBtc2cgfHwgXCJsZWVjaFwiIGluIG1zZykgcmV0dXJuO1xuICAgIGlmIChtc2cucHV0ICYmICFSLmtleXMobXNnLnB1dCkubGVuZ3RoKSByZXR1cm47XG4gICAgY29uc3QgcHJvbWlzZSA9IHBlZXIuY29uZmlnLmRpc2FibGVWYWxpZGF0aW9uXG4gICAgICA/IFByb21pc2UucmVzb2x2ZShtc2cpXG4gICAgICA6IHN1cHByZXNzb3IudmFsaWRhdGUobXNnKTtcblxuICAgIHByb21pc2VcbiAgICAgIC50aGVuKHZhbGlkYXRlZCA9PiB7XG4gICAgICAgIGlmICghdmFsaWRhdGVkKSByZXR1cm4gY29uc29sZS5sb2coXCJtc2cgZGlkbid0IHZhbGlkYXRlXCIsIG1zZyk7XG4gICAgICAgIG1zZ1tcIl9cIl0gPSBfO1xuICAgICAgICByZXR1cm4gdGhpcy50by5uZXh0KG1zZyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKFwidmFsaWRhdGUgZXJyXCIsIG1zZywgZXJyLnN0YWNrIHx8IGVycikpO1xuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFZhbGlkYXRpb24gPSB7XG4gIGlzTGVnYWN5VGhpbmcsXG4gIHRoaW5nSGFzaE1hdGNoZXNTb3VsLFxuICBzaWduZWRUaGluZ0RhdGFNYXRjaGVzLFxuICB0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoLFxuICBnZXRJc1RoaW5nUmVsYXRlZEVkZ2UsXG4gIHRoaW5nRGF0YUhhc2hNYXRjaGVzLFxuICBpc1ZvdGVWYWxpZCxcbiAga2V5c0FyZVByb29mc09mV29yayxcbiAgaW5pdEFqdixcbiAgc3VwcHJlc3NvcixcbiAgZ3VuV2lyZUlucHV0XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTdfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE4X187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xOV9fOyIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBUb3BpY0xpc3RpbmcgfSBmcm9tIFwiLi9Ub3BpY0xpc3RpbmdcIjtcbmltcG9ydCB7IERvbWFpbkxpc3RpbmcgfSBmcm9tIFwiLi9Eb21haW5MaXN0aW5nXCI7XG5pbXBvcnQgeyBDb21tZW50TGlzdGluZyB9IGZyb20gXCIuL0NvbW1lbnRMaXN0aW5nXCI7XG5pbXBvcnQgeyBTcGFjZUxpc3RpbmcgfSBmcm9tIFwiLi9TcGFjZUxpc3RpbmdcIjtcbmltcG9ydCB7IEluYm94TGlzdGluZyB9IGZyb20gXCIuL0luYm94TGlzdGluZ1wiO1xuaW1wb3J0IHsgUHJvZmlsZUxpc3RpbmcgfSBmcm9tIFwiLi9Qcm9maWxlTGlzdGluZ1wiO1xuXG5jb25zdCB0eXBlcyA9IFtcbiAgVG9waWNMaXN0aW5nLFxuICBEb21haW5MaXN0aW5nLFxuICBDb21tZW50TGlzdGluZyxcbiAgU3BhY2VMaXN0aW5nLFxuICBJbmJveExpc3RpbmcsXG4gIFByb2ZpbGVMaXN0aW5nXG5dO1xuXG5jb25zdCBmcm9tUGF0aCA9IHBhdGggPT4ge1xuICBsZXQgbWF0Y2g7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgIG1hdGNoID0gdHlwZXNbaV0ucm91dGUubWF0Y2gocGF0aCk7XG4gICAgY29uc29sZS5sb2coXCJ3dGZcIiwgcGF0aCwgbWF0Y2gpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgY29uc29sZS5sb2coXCJtYXRjaFwiLCBtYXRjaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwibm8gbWF0Y2hcIiwgdHlwZXNbaV0ucm91dGUpO1xuICAgIH1cbiAgICBpZiAobWF0Y2gpIHJldHVybiBSLmFzc29jKFwibWF0Y2hcIiwgbWF0Y2gsIHR5cGVzW2ldKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nVHlwZSA9IHsgLi4udHlwZXMsIHR5cGVzLCBmcm9tUGF0aCB9O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IFRva2VuaXplciB9IGZyb20gXCIuLi9Ub2tlbml6ZXJcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9Db25maWdcIjtcblxuY29uc3QgZnJvbVNvdXJjZSA9IChzb3VyY2UsIG93bmVySWQgPSBudWxsLCBzcGFjZU5hbWUgPSBudWxsKSA9PiB7XG4gIGNvbnN0IHRva2VuaXplZCA9IFRva2VuaXplci50b2tlbml6ZShzb3VyY2UpO1xuICBjb25zdCBvYmogPSB7IC4uLnRva2VuaXplZCB9O1xuICBjb25zdCB7IGlzUHJlc2VudCwgZ2V0VmFsdWUsIGdldFZhbHVlcywgZ2V0VmFsdWVDaGFpbiwgZ2V0UGFpcnMgfSA9IHRva2VuaXplZDtcblxuICBbXG4gICAgb2JqLmZyb21QYWdlQXV0aG9yID0gb3duZXJJZCxcbiAgICBvYmouZnJvbVBhZ2VOYW1lID0gc3BhY2VOYW1lID8gYHNwYWNlOiR7c3BhY2VOYW1lfWAgOiB1bmRlZmluZWRcbiAgXSA9IGdldFZhbHVlQ2hhaW4oXCJzb3VyY2VkIGZyb20gcGFnZVwiKTtcbiAgb2JqLmRpc3BsYXlOYW1lID0gdG9rZW5pemVkLmdldFZhbHVlKFwibmFtZVwiKSB8fCBzcGFjZU5hbWU7XG4gIG9iai5pbmRleGVyID0gZ2V0VmFsdWUoXCJ0YWJ1bGF0b3JcIikgfHwgQ29uZmlnLmluZGV4ZXI7XG4gIG9iai50YWJ1bGF0b3IgPSBnZXRWYWx1ZShcInRhYnVsYXRvclwiKSB8fCBvYmouaW5kZXhlcjtcbiAgb2JqLnRhYnMgPSBnZXRQYWlycyhcInRhYlwiKTtcbiAgb2JqLnNvcnQgPSBnZXRWYWx1ZShcInNvcnRcIik7XG4gIG9iai51bmlxdWVCeUNvbnRlbnQgPSAhIWlzUHJlc2VudChcInVuaXF1ZSBieSBjb250ZW50XCIpO1xuICBvYmouY3VyYXRvcnMgPSBnZXRWYWx1ZXMoXCJjdXJhdG9yXCIpO1xuICBvYmoubW9kZXJhdG9ycyA9IGdldFZhbHVlcyhcIm1vZFwiKTtcbiAgb2JqLmluY2x1ZGVSYW5rcyA9ICEhaXNQcmVzZW50KFwic2hvdyByYW5rc1wiKTtcbiAgb2JqLnN0aWNreUlkcyA9IGdldFZhbHVlcyhcInN0aWNreVwiKTtcbiAgb2JqLmlzSWRTdGlja3kgPSBpZCA9PiAhIXRva2VuaXplZC5pc1ByZXNlbnQoW1wic3RpY2t5XCIsIGlkXSk7XG4gIG9iai5zdWJtaXRUb3BpY3MgPSBnZXRWYWx1ZXMoXCJzdWJtaXQgdG9cIik7XG4gIG9iai5zdWJtaXRUb3BpYyA9IGdldFZhbHVlKFwic3VibWl0IHRvXCIpO1xuICBvYmouY2hhdFRvcGljID0gZ2V0VmFsdWUoXCJjaGF0IGluXCIpO1xuXG4gIGlmIChvd25lcklkICYmIHNwYWNlTmFtZSkge1xuICAgIG9iai5zcGFjZU5hbWUgPSBzcGFjZU5hbWU7XG4gICAgb2JqLm93bmVyID0gb3duZXJJZDtcbiAgICBvYmoudXNlRm9yQ29tbWVudHMgPSAhdG9rZW5pemVkLmlzUHJlc2VudChcImNvbW1lbnRzIGxlYXZlIHNwYWNlXCIpO1xuICAgIG9iai5wYXRoID0gYC91c2VyLyR7b3duZXJJZH0vc3BhY2VzLyR7c3BhY2VOYW1lfWA7XG4gICAgb2JqLmRlZmF1bHRUYWIgPSB0b2tlbml6ZWQuZ2V0VmFsdWUoXCJ0YWJcIik7XG4gICAgb2JqLmRlZmF1bHRUYWJQYXRoID0gb2JqLmRlZmF1bHRUYWJcbiAgICAgID8gdG9rZW5pemVkLmdldFZhbHVlKFtcInRhYlwiLCBvYmouZGVmYXVsdFRhYl0pXG4gICAgICA6IG51bGw7XG4gIH1cblxuICBvYmouZmlsdGVycyA9IHtcbiAgICBmdW5jdGlvbnM6IFtdLFxuICAgIGFsbG93OiB7XG4gICAgICByZXBsaWVzVG86IGdldFZhbHVlKFwicmVwbGllcyB0byBhdXRob3JcIiksXG4gICAgICB0eXBlOiBnZXRWYWx1ZShcInR5cGVcIiksIC8vIFRPRE86IHRoaXMgZmllbGQgc2VlbXMgcmVkdW5kYW50IHdpdGgga2luZCBhbmQgc2hvdWxkIGJlIGRlcHJlY2F0ZWRcbiAgICAgIG9wczogZ2V0VmFsdWVzKFwib3BcIiksXG4gICAgICBhbGlhc2VzOiBnZXRWYWx1ZXMoXCJhbGlhc1wiKSxcbiAgICAgIGF1dGhvcnM6IGdldFZhbHVlcyhcImF1dGhvclwiKSxcbiAgICAgIGRvbWFpbnM6IGdldFZhbHVlcyhcImRvbWFpblwiKSxcbiAgICAgIHRvcGljczogZ2V0VmFsdWVzKFwidG9waWNcIiksXG4gICAgICBsaXN0aW5nczogZ2V0VmFsdWVzKFwibGlzdGluZ1wiKSxcbiAgICAgIGtpbmRzOiBnZXRWYWx1ZXMoXCJraW5kXCIpLFxuICAgICAgYW5vbjogIWlzUHJlc2VudChcInJlcXVpcmUgc2lnbmVkXCIpLFxuICAgICAgc2lnbmVkOiAhaXNQcmVzZW50KFwicmVxdWlyZSBhbm9uXCIpXG4gICAgfSxcbiAgICBkZW55OiB7XG4gICAgICBhbGlhc2VzOiBnZXRWYWx1ZXMoXCJiYW4gYWxpYXNcIiksXG4gICAgICBhdXRob3JzOiBnZXRWYWx1ZXMoXCJiYW4gYXV0aG9yXCIpLFxuICAgICAgZG9tYWluczogZ2V0VmFsdWVzKFwiYmFuIGRvbWFpblwiKSxcbiAgICAgIHRvcGljczogZ2V0VmFsdWVzKFwiYmFuIHRvcGljXCIpLFxuICAgICAgYW5vbjogISFpc1ByZXNlbnQoXCJyZXF1aXJlIHNpZ25lZFwiKSxcbiAgICAgIHNpZ25lZDogISFpc1ByZXNlbnQoXCJyZXF1aXJlIGFub25cIiksXG4gICAgICB0YWdzOiBnZXRQYWlycyhcImNhbiByZW1vdmVcIilcbiAgICB9XG4gIH07XG5cbiAgb2JqLnZvdGVGaWx0ZXJzID0ge1xuICAgIGZ1bmN0aW9uczogW10sXG4gICAgdXBzTWluOiBwYXJzZUludChnZXRWYWx1ZShcInVwcyBhYm92ZVwiKSwgMTApIHx8IG51bGwsXG4gICAgdXBzTWF4OiBwYXJzZUludChnZXRWYWx1ZShcInVwcyBiZWxvd1wiKSwgMTApIHx8IG51bGwsXG4gICAgZG93bnNNaW46IHBhcnNlSW50KGdldFZhbHVlKFwiZG93bnMgYWJvdmVcIiksIDEwKSB8fCBudWxsLFxuICAgIGRvd25zTWF4OiBwYXJzZUludChnZXRWYWx1ZShcImRvd25zIGJlbG93XCIpLCAxMCkgfHwgbnVsbCxcbiAgICBzY29yZU1pbjogcGFyc2VJbnQoZ2V0VmFsdWUoXCJzY29yZSBhYm92ZVwiKSwgMTApIHx8IG51bGwsXG4gICAgc2NvcmVNYXg6IHBhcnNlSW50KGdldFZhbHVlKFwic2NvcmUgYmVsb3dcIiksIDEwKSB8fCBudWxsXG4gIH07XG5cbiAgb2JqLmNlbnNvcnMgPSBSLnVuaXEoUi5tYXAoUi5wcm9wKDEpLCBvYmouZmlsdGVycy5kZW55LnRhZ3MpKTtcbiAgcmV0dXJuIG9iajtcbn07XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nRGVmaW5pdGlvbiA9IHsgZnJvbVNvdXJjZSB9O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcblxuY29uc3QgdG9rZW5pemUgPSBzb3VyY2UgPT4ge1xuICBjb25zdCB0b2tlbk1hcCA9IChzb3VyY2UgfHwgXCJcIikuc3BsaXQoXCJcXG5cIikucmVkdWNlKChkZWYsIGxpbmUpID0+IHtcbiAgICBjb25zdCB0b2tlbnMgPSBsaW5lXG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoXCIgXCIpXG4gICAgICAubWFwKFIudHJpbSlcbiAgICAgIC5maWx0ZXIoeCA9PiB4KTtcblxuICAgIGlmICghdG9rZW5zLmxlbmd0aCkgcmV0dXJuIGRlZjtcbiAgICByZXR1cm4gUi5hc3NvY1BhdGgodG9rZW5zLCB7fSwgZGVmKTtcbiAgfSwge30pO1xuXG4gIGNvbnN0IGlzUHJlc2VudCA9IHAgPT4ge1xuICAgIGxldCBjaGVjayA9IHA7XG5cbiAgICBpZiAodHlwZW9mIHAgPT09IFwic3RyaW5nXCIpIGNoZWNrID0gcC5zcGxpdChcIiBcIik7XG4gICAgcmV0dXJuIGNoZWNrICYmIFIucGF0aChjaGVjaywgdG9rZW5NYXApO1xuICB9O1xuXG4gIGNvbnN0IGdldFZhbHVlcyA9IHAgPT4gUi5rZXlzSW4oaXNQcmVzZW50KHApKTtcbiAgY29uc3QgZ2V0VmFsdWUgPSBwID0+IGdldFZhbHVlcyhwKVswXSB8fCBudWxsO1xuICBjb25zdCBnZXRMYXN0VmFsdWUgPSBwID0+IGdldFZhbHVlcyhwKS5wb3AoKSB8fCBudWxsO1xuXG4gIGNvbnN0IGdldFZhbHVlQ2hhaW4gPSBwID0+IHtcbiAgICBjb25zdCBrZXlzID0gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwLnNwbGl0KFwiIFwiKSA6IHA7XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgbGV0IG5leHQgPSBwO1xuXG4gICAgd2hpbGUgKG5leHQpIHtcbiAgICAgIG5leHQgPSBnZXRWYWx1ZShbLi4ua2V5cywgLi4udmFsdWVzXSk7XG4gICAgICBuZXh0ICYmIHZhbHVlcy5wdXNoKG5leHQpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgY29uc3QgZ2V0UGFpcnMgPSBwID0+IHtcbiAgICBjb25zdCBrZXlzID0gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwLnNwbGl0KFwiIFwiKSA6IHA7XG5cbiAgICByZXR1cm4gZ2V0VmFsdWVzKGtleXMpLnJlZHVjZSgocGFpcnMsIGtleSkgPT4ge1xuICAgICAgY29uc3QgdmFsID0gZ2V0VmFsdWUoWy4uLmtleXMsIGtleV0pO1xuXG4gICAgICByZXR1cm4gWy4uLnBhaXJzLCBba2V5LCB2YWxdXTtcbiAgICB9LCBbXSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzb3VyY2UsXG4gICAgaXNQcmVzZW50LFxuICAgIGdldFZhbHVlLFxuICAgIGdldFZhbHVlcyxcbiAgICBnZXRMYXN0VmFsdWUsXG4gICAgZ2V0VmFsdWVDaGFpbixcbiAgICBnZXRQYWlyc1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IFRva2VuaXplciA9IHsgdG9rZW5pemUgfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9Db25maWdcIjtcbmltcG9ydCB7IFRva2VuaXplciB9IGZyb20gXCIuLi9Ub2tlbml6ZXJcIjtcbmltcG9ydCB7IFRoaW5nRGF0YU5vZGUgfSBmcm9tIFwiLi4vVGhpbmdcIjtcbmltcG9ydCB7IExpc3RpbmdTcGVjIH0gZnJvbSBcIi4vTGlzdGluZ1NwZWNcIjtcblxuY29uc3QgdGFicyA9IFtcImhvdFwiLCBcIm5ld1wiLCBcImRpc2N1c3NlZFwiLCBcImNvbnRyb3ZlcnNpYWxcIiwgXCJ0b3BcIl07XG5jb25zdCBzcGFjZUNvbmZpZ1BhZ2VOYW1lID0gbmFtZSA9PiBgc3BhY2U6JHtuYW1lfWA7XG5cbmNvbnN0IHNvdXJjZVdpdGhEZWZhdWx0cyA9IFIuY3VycnkoKG93bmVySWQsIG5hbWUsIHNvdXJjZSkgPT4ge1xuICBsZXQgcmVzdWx0ID0gW3NvdXJjZSB8fCBcIlwiXTtcbiAgY29uc3QgdG9rZW5pemVkID0gVG9rZW5pemVyLnRva2VuaXplKHNvdXJjZSk7XG5cbiAgaWYgKCF0b2tlbml6ZWQuZ2V0VmFsdWUoXCJ0YWJcIikpIHtcbiAgICB0YWJzLm1hcCh0YWIgPT5cbiAgICAgIHJlc3VsdC5wdXNoKGB0YWIgJHt0YWJ9IC91c2VyLyR7b3duZXJJZH0vc3BhY2VzLyR7bmFtZX0vJHt0YWJ9YClcbiAgICApO1xuICB9XG5cbiAgbGV0IGluZGV4ZXIgPSB0b2tlbml6ZWQuZ2V0VmFsdWUoXCJpbmRleGVyXCIpO1xuXG4gIGlmICghaW5kZXhlcikge1xuICAgIHJlc3VsdC5wdXNoKGBpbmRleGVyICR7Q29uZmlnLmluZGV4ZXJ9YCk7XG4gICAgaW5kZXhlciA9IENvbmZpZy5pbmRleGVyO1xuICB9XG5cbiAgbGV0IHRhYnVsYXRvciA9IHRva2VuaXplZC5nZXRWYWx1ZShcInRhYnVsYXRvclwiKTtcblxuICBpZiAoIXRhYnVsYXRvcikgcmVzdWx0LnB1c2goYHRhYnVsYXRvciAke2luZGV4ZXJ9YCk7XG5cbiAgcmV0dXJuIHJlc3VsdC5qb2luKFwiXFxuXCIpO1xufSk7XG5cbmNvbnN0IGdldENvbmZpZyA9IHF1ZXJ5KChzY29wZSwgYXV0aG9ySWQsIG5hbWUpID0+XG4gIExpc3RpbmdTcGVjLmdldFNvdXJjZShzY29wZSwgYXV0aG9ySWQsIHNwYWNlQ29uZmlnUGFnZU5hbWUobmFtZSkpXG4pO1xuXG5jb25zdCBnZXRTb3VyY2UgPSBxdWVyeSgoc2NvcGUsIGF1dGhvcklkLCBuYW1lKSA9PlxuICBnZXRDb25maWcudGhlbihcbiAgICBSLmNvbXBvc2UoXG4gICAgICBzb3VyY2VXaXRoRGVmYXVsdHMoYXV0aG9ySWQsIG5hbWUpLFxuICAgICAgVGhpbmdEYXRhTm9kZS5ib2R5XG4gICAgKVxuICApXG4pO1xuXG5leHBvcnQgY29uc3QgU3BhY2VTcGVjID0geyB0YWJzLCBnZXRTb3VyY2UgfTtcbiIsImltcG9ydCB7IFBlZXIgfSBmcm9tIFwiLi9QZWVyXCI7XG5leHBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcbmV4cG9ydCB7IExpc3RpbmcgfSBmcm9tIFwiLi9MaXN0aW5nXCI7XG5leHBvcnQgeyBQZWVyIH0gZnJvbSBcIi4vUGVlclwiO1xuZXhwb3J0IHsgUXVlcnkgfSBmcm9tIFwiLi9RdWVyeVwiO1xuZXhwb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4vU2NoZW1hXCI7XG5leHBvcnQgeyBUaGluZywgVGhpbmdTZXQsIFRoaW5nRGF0YU5vZGUgfSBmcm9tIFwiLi9UaGluZ1wiO1xuZXhwb3J0IHsgVmFsaWRhdGlvbiB9IGZyb20gXCIuL1ZhbGlkYXRpb25cIjtcbmV4cG9ydCBkZWZhdWx0IFBlZXIuaW5pdDtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBWYWxpZGF0aW9uIH0gZnJvbSBcIi4vVmFsaWRhdGlvblwiO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tIFwiLi9RdWVyeVwiO1xuaW1wb3J0IHsgVGhpbmcgfSBmcm9tIFwiLi9UaGluZ1wiO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tIFwiLi9BdXRoZW50aWNhdGlvblwiO1xuXG5mdW5jdGlvbiBpbml0KEd1biwgY29uZmlnID0ge30pIHtcbiAgY29uc3QgeyBsZWVjaCwgZGlzYWJsZVZhbGlkYXRpb24sIG5vR3VuLCBsb2NhbFN0b3JhZ2UsIHBlcnNpc3QsIC4uLnJlc3QgfSA9XG4gICAgY29uZmlnIHx8IHt9O1xuICBjb25zdCBwZWVyID0geyBjb25maWcgfTtcblxuICBpZiAoIW5vR3VuKSB7XG4gICAgY29uc3QgY2ZnID0geyBsb2NhbFN0b3JhZ2U6ICEhbG9jYWxTdG9yYWdlLCByYWRpc2s6ICEhcGVyc2lzdCwgLi4ucmVzdCB9O1xuXG4gICAgaWYgKHBlcnNpc3QpIGNmZy5sb2NhbFN0b3JhZ2UgPSBmYWxzZTtcbiAgICBpZiAoIWRpc2FibGVWYWxpZGF0aW9uKSBHdW4ub24oXCJvcHRcIiwgVmFsaWRhdGlvbi5ndW5XaXJlSW5wdXQocGVlcikpO1xuICAgIGlmIChjZmcuc3RvcmVGbikgY2ZnLnN0b3JlID0gY2ZnLnN0b3JlRm4oY2ZnKTsgLy8gZm9yIGluZGV4ZWRkYlxuICAgIHBlZXIuZ3VuID0gR3VuKGNmZyk7XG4gICAgaWYgKGNmZy5sb2NhbFN0b3JhZ2UpIHBlZXIuZ3VuLm9uKFwibG9jYWxTdG9yYWdlOmVycm9yXCIsIGEgPT4gYS5yZXRyeSh7fSkpO1xuICAgIGlmIChsZWVjaCkge1xuICAgICAgY29uc3Qgc2VuZExlZWNoID0gKCkgPT4gcGVlci5ndW4uXy5vbihcIm91dFwiLCB7IGxlZWNoOiB0cnVlIH0pO1xuXG4gICAgICBzZW5kTGVlY2goKTtcbiAgICB9XG4gIH1cblxuICBwZWVyLm5ld1Njb3BlID0gb3B0cyA9PiBRdWVyeS5jcmVhdGVTY29wZShwZWVyLCBvcHRzKTtcbiAgcGVlci5vbkxvZ2luID0gQXV0aGVudGljYXRpb24ub25Mb2dpbihwZWVyKTtcbiAgcGVlci5zaWdudXAgPSBBdXRoZW50aWNhdGlvbi5zaWdudXAocGVlcik7XG4gIHBlZXIubG9naW4gPSBBdXRoZW50aWNhdGlvbi5sb2dpbihwZWVyKTtcbiAgcGVlci5sb2dvdXQgPSAoKSA9PiBBdXRoZW50aWNhdGlvbi5sb2dvdXQocGVlcik7XG4gIHBlZXIuaXNMb2dnZWRJbiA9ICgpID0+IEF1dGhlbnRpY2F0aW9uLmlzTG9nZ2VkSW4ocGVlcik7XG4gIHBlZXIuc3VibWl0ID0gVGhpbmcuc3VibWl0KHBlZXIpO1xuICBwZWVyLmNvbW1lbnQgPSBUaGluZy5jb21tZW50KHBlZXIpO1xuICBwZWVyLmNoYXQgPSBUaGluZy5jaGF0KHBlZXIpO1xuICBwZWVyLndyaXRlUGFnZSA9IFRoaW5nLndyaXRlUGFnZShwZWVyKTtcbiAgcGVlci52b3RlID0gVGhpbmcudm90ZShwZWVyKTtcbiAgcGVlci5xdWVyaWVzID0gUXVlcnk7XG4gIHJldHVybiBwZWVyO1xufVxuXG5leHBvcnQgY29uc3QgUGVlciA9IHtcbiAgaW5pdFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMjZfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzI3X187IiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gXCIuLi9TY2hlbWFcIjtcbmltcG9ydCB7IEd1bk5vZGUgfSBmcm9tIFwiLi4vR3VuTm9kZVwiO1xuXG5jb25zdCBzb3VscyA9IEd1bk5vZGUuZWRnZXM7XG5jb25zdCBpZHMgPSBSLmNvbXBvc2UoXG4gIFIuZmlsdGVyKFIuaWRlbnRpdHkpLFxuICBSLm1hcChcbiAgICBSLmNvbXBvc2UoXG4gICAgICBSLnByb3AoXCJ0aGluZ0lkXCIpLFxuICAgICAgU2NoZW1hLlRoaW5nLnJvdXRlLm1hdGNoLmJpbmQoU2NoZW1hLlRoaW5nLnJvdXRlKVxuICAgIClcbiAgKSxcbiAgR3VuTm9kZS5lZGdlc1xuKTtcblxuY29uc3QgdW5pb24gPSBSLmNvbXBvc2UoXG4gIFIuZGlzc29jKFwiX1wiKSxcbiAgUi5yZWR1Y2UoUi5tZXJnZVJpZ2h0LCB7fSlcbik7XG5cbmZ1bmN0aW9uIGRheVN0cih0aW1lc3RhbXApIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKHRpbWVzdGFtcCB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gIGNvbnN0IHllYXIgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIGNvbnN0IG1vbnRoID0gZC5nZXRVVENNb250aCgpICsgMTtcbiAgY29uc3QgZGF5TnVtID0gZC5nZXRVVENEYXRlKCk7XG5cbiAgcmV0dXJuIGAke3llYXJ9LyR7bW9udGh9LyR7ZGF5TnVtfWA7XG59XG5cbmV4cG9ydCBjb25zdCBUaGluZ1NldCA9IHsgaWRzLCB1bmlvbiwgc291bHMsIGRheVN0ciB9O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IHBhcnNlIGFzIHBhcnNlVVJJIH0gZnJvbSBcInVyaS1qc1wiO1xuXG5jb25zdCBib2R5ID0gUi5wcm9wT3IoXCJcIiwgXCJib2R5XCIpO1xuY29uc3QgdXJsID0gUi5wcm9wT3IoXCJcIiwgXCJ1cmxcIik7XG5jb25zdCBkb21haW4gPSBSLmNvbXBvc2UoXG4gIHVybFN0ciA9PiB7XG4gICAgaWYgKCF1cmxTdHIpIHJldHVybiBcIlwiO1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlVVJJKHVybFN0cik7XG5cbiAgICByZXR1cm4gKHBhcnNlZC5ob3N0IHx8IHBhcnNlZC5zY2hlbWUgfHwgXCJcIikucmVwbGFjZSgvXnd3d1xcLi8sIFwiXCIpO1xuICB9LFxuICB1cmxcbik7XG5cbmV4cG9ydCBjb25zdCBUaGluZ0RhdGFOb2RlID0geyBib2R5LCBkb21haW4gfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBQcm9taXNlIH0gZnJvbSBcImd1bi1zY29wZVwiO1xuXG5jb25zdCBzaWdudXAgPSBSLmN1cnJ5KFxuICAocGVlciwgdXNlcm5hbWUsIHBhc3N3b3JkLCBvcHRzID0ge30pID0+XG4gICAgbmV3IFByb21pc2UoKG9rLCBmYWlsKSA9PiB7XG4gICAgICBpZiAocGVlciAmJiBwZWVyLmd1biAmJiBwZWVyLmd1bi51c2VyKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBwZWVyLnVzZXIoKTtcblxuICAgICAgICBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgdXNlci5jcmVhdGUoXG4gICAgICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgYWNrID0+IHtcbiAgICAgICAgICAgICAgaWYgKGFjay5lcnIpIHtcbiAgICAgICAgICAgICAgICBmYWlsKGFjay5lcnIpO1xuICAgICAgICAgICAgICAgIHVzZXIubGVhdmUoKTtcbiAgICAgICAgICAgICAgICBwZWVyLmd1bi51c2VyKCkubGVhdmUoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWVyLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkudGhlbihvayk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmFpbChcIlNFQSBpcyBub3QgbG9hZGVkXCIpO1xuICAgICAgfVxuICAgIH0pXG4pO1xuXG5jb25zdCBsb2dpbiA9IFIuY3VycnkoKHBlZXIsIHVzZXJuYW1lLCBwYXNzd29yZCkgPT5cbiAgbmV3IFByb21pc2UoKG9rLCBmYWlsKSA9PiB7XG4gICAgaWYgKHBlZXIgJiYgcGVlci5ndW4gJiYgcGVlci5ndW4udXNlcikge1xuICAgICAgY29uc3QgdXNlciA9IHBlZXIudXNlcigpO1xuXG4gICAgICB1c2VyLmF1dGgodXNlcm5hbWUsIHBhc3N3b3JkLCBhY2sgPT5cbiAgICAgICAgYWNrLmVyciA/IGZhaWwoYWNrLmVycikgOiBvayhwZWVyLnVzZXIoKS5pcylcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhaWwoXCJTRUEgaXMgbm90IGxvYWRlZFwiKTtcbiAgICB9XG4gIH0pLnRoZW4ocmVzdWx0ID0+IHtcbiAgICBwZWVyLl9vbkxvZ2luICYmIHBlZXIuX29uTG9naW4ocmVzdWx0KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pXG4pO1xuXG5jb25zdCBsb2dvdXQgPSBwZWVyID0+IHBlZXIuZ3VuLnVzZXIoKS5sZWF2ZSgpO1xuY29uc3QgaXNMb2dnZWRJbiA9IHBlZXIgPT4gcGVlci5ndW4gJiYgcGVlci5ndW4udXNlciAmJiBwZWVyLnVzZXIoKS5pcztcbmNvbnN0IG9uTG9naW4gPSBSLmN1cnJ5KChwZWVyLCBmbikgPT4gKHBlZXIuX29uTG9naW4gPSBmbikpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbmV4cG9ydCBjb25zdCBBdXRoZW50aWNhdGlvbiA9IHtcbiAgc2lnbnVwLFxuICBsb2dpbixcbiAgbG9nb3V0LFxuICBpc0xvZ2dlZEluLFxuICBvbkxvZ2luXG59O1xuIiwiaW1wb3J0IHsgTGlzdGluZ1F1ZXJ5IH0gZnJvbSBcIi4vTGlzdGluZ1F1ZXJ5XCI7XG5leHBvcnQgeyBMaXN0aW5nRGF0YVNvdXJjZSB9IGZyb20gXCIuL0xpc3RpbmdEYXRhU291cmNlXCI7XG5leHBvcnQgeyBMaXN0aW5nRGVmaW5pdGlvbiB9IGZyb20gXCIuL0xpc3RpbmdEZWZpbml0aW9uXCI7XG5leHBvcnQgeyBMaXN0aW5nRmlsdGVyIH0gZnJvbSBcIi4vTGlzdGluZ0ZpbHRlclwiO1xuZXhwb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi9MaXN0aW5nTm9kZVwiO1xuZXhwb3J0IHsgTGlzdGluZ09yYWNsZSB9IGZyb20gXCIuL0xpc3RpbmdPcmFjbGVcIjtcbmV4cG9ydCB7IExpc3RpbmdRdWVyeSB9IGZyb20gXCIuL0xpc3RpbmdRdWVyeVwiO1xuZXhwb3J0IHsgTGlzdGluZ1NvcnQgfSBmcm9tIFwiLi9MaXN0aW5nU29ydFwiO1xuZXhwb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi9MaXN0aW5nU3BlY1wiO1xuZXhwb3J0IHsgTGlzdGluZ1R5cGUgfSBmcm9tIFwiLi9MaXN0aW5nVHlwZVwiO1xuZXhwb3J0IHsgU3BhY2VTcGVjIH0gZnJvbSBcIi4vU3BhY2VTcGVjXCI7XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nID0ge1xuICBmcm9tU3BlYzogTGlzdGluZ1F1ZXJ5LmZyb21TcGVjLFxuICBmcm9tUGF0aDogTGlzdGluZ1F1ZXJ5LmZyb21QYXRoXG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IHF1ZXJ5IH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi9MaXN0aW5nTm9kZVwiO1xuaW1wb3J0IHsgTGlzdGluZ0ZpbHRlciB9IGZyb20gXCIuL0xpc3RpbmdGaWx0ZXJcIjtcbmltcG9ydCB7IExpc3RpbmdUeXBlIH0gZnJvbSBcIi4vTGlzdGluZ1R5cGVcIjtcblxuY29uc3QgZnJvbVNwZWMgPSBxdWVyeSgoc2NvcGUsIHNwZWMsIG9wdHMgPSB7fSkgPT4ge1xuICBjb25zdCBmaWx0ZXJGbiA9IExpc3RpbmdGaWx0ZXIudGhpbmdGaWx0ZXIoc2NvcGUsIHNwZWMpO1xuICBjb25zdCBwYXRocyA9IFIucGF0aE9yKFtdLCBbXCJkYXRhU291cmNlXCIsIFwibGlzdGluZ1BhdGhzXCJdLCBzcGVjKTtcbiAgY29uc3Qgc291bHMgPSBSLm1hcChcbiAgICBMaXN0aW5nTm9kZS5zb3VsRnJvbVBhdGgob3B0cy5pbmRleGVyIHx8IHNwZWMuaW5kZXhlciksXG4gICAgcGF0aHNcbiAgKTtcblxuICByZXR1cm4gTGlzdGluZ05vZGUucm93c0Zyb21Tb3VscyhzY29wZSwgc291bHMpLnRoZW4ocm93cyA9PlxuICAgIExpc3RpbmdGaWx0ZXIuZ2V0RmlsdGVyZWRJZHMoc2NvcGUsIHJvd3MsIHsgLi4ub3B0cywgZmlsdGVyRm4gfSlcbiAgKTtcbn0pO1xuXG5jb25zdCBmcm9tUGF0aCA9IHF1ZXJ5KChzY29wZSwgcGF0aCwgb3B0cykgPT4ge1xuICBjb25zdCB0eXBlID0gTGlzdGluZ1R5cGUuZnJvbVBhdGgocGF0aCk7XG5cbiAgaWYgKCF0eXBlKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgcmV0dXJuIHR5cGUuZ2V0U3BlYyhzY29wZSwgdHlwZS5tYXRjaCkudGhlbihzcGVjID0+IHtcbiAgICBpZiAoc3BlYy5oYXNJbmRleGVyICYmICFvcHRzLmNhbGN1bGF0ZSkge1xuICAgICAgaWYgKCF0eXBlIHx8ICF0eXBlLnJlYWQpIHJldHVybiBMaXN0aW5nTm9kZS5yZWFkKHNjb3BlLCBwYXRoLCBvcHRzKTtcbiAgICAgIHJldHVybiB0eXBlLnJlYWQoc2NvcGUsIHR5cGUubWF0Y2gsIG9wdHMpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbVNwZWMoc2NvcGUsIHNwZWMsIG9wdHMpO1xuICB9KTtcbn0pO1xuXG5leHBvcnQgY29uc3QgTGlzdGluZ1F1ZXJ5ID0geyBmcm9tU3BlYywgZnJvbVBhdGggfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi8uLi9Db25maWdcIjtcbmltcG9ydCB7IFBhdGggfSBmcm9tIFwiLi4vUGF0aFwiO1xuaW1wb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi4vTGlzdGluZ1NwZWNcIjtcblxuY29uc3QgcGF0aCA9IFwiL3QvOnRvcGljLzpzb3J0XCI7XG5jb25zdCB0YWJzID0gW1wiaG90XCIsIFwibmV3XCIsIFwiZGlzY3Vzc2VkXCIsIFwiY29udHJvdmVyc2lhbFwiLCBcInRvcFwiLCBcImZpcmVob3NlXCJdO1xuXG5jb25zdCBnZXRTb3VyY2UgPSBxdWVyeSgoc2NvcGUsIHsgdG9waWMsIHNvcnQgfSkgPT4ge1xuICBjb25zdCB0b3BpY3MgPSBQYXRoLnNwbGl0VG9waWNzKHRvcGljKTtcbiAgY29uc3Qgc3VibWl0VG8gPSB0b3BpY3NbMF0gPT09IFwiYWxsXCIgPyBcIndoYXRldmVyXCIgOiB0b3BpY3NbMF07XG5cbiAgcmV0dXJuIExpc3RpbmdTcGVjLmdldFNvdXJjZShcbiAgICBzY29wZSxcbiAgICBDb25maWcuaW5kZXhlcixcbiAgICBcImxpc3Rpbmc6dG9waWNcIixcbiAgICBbXG4gICAgICBgbmFtZSAke3RvcGljfWAsXG4gICAgICBgc3VibWl0IHRvICR7c3VibWl0VG99YCxcbiAgICAgIGBzb3J0ICR7c29ydH1gLFxuICAgICAgdG9waWMuaW5kZXhPZihcIjpcIikgPT09IC0xID8gXCJraW5kIHN1Ym1pc3Npb25cIiA6IFwiXCIsXG4gICAgICAuLi5SLm1hcCh0b3BpYyA9PiBgdG9waWMgJHt0b3BpY31gLCB0b3BpY3MpLFxuICAgICAgLi4uUi5tYXAodGFiID0+IGB0YWIgJHt0YWJ9IC90LyR7dG9waWN9LyR7dGFifWAsIHRhYnMpXG4gICAgXS5qb2luKFwiXFxuXCIpXG4gICk7XG59KTtcblxuY29uc3QgZ2V0U3BlYyA9IHF1ZXJ5KChzY29wZSwgbWF0Y2gpID0+XG4gIGdldFNvdXJjZShzY29wZSwgbWF0Y2gpLnRoZW4oTGlzdGluZ1NwZWMuZnJvbVNvdXJjZSlcbik7XG5cbmV4cG9ydCBjb25zdCBUb3BpY0xpc3RpbmcgPSBQYXRoLndpdGhSb3V0ZSh7IHBhdGgsIGdldFNvdXJjZSwgZ2V0U3BlYyB9KTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi8uLi9Db25maWdcIjtcbmltcG9ydCB7IFBhdGggfSBmcm9tIFwiLi4vUGF0aFwiO1xuaW1wb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi4vTGlzdGluZ1NwZWNcIjtcblxuY29uc3QgcGF0aCA9IFwiL2RvbWFpbi86ZG9tYWluLzpzb3J0XCI7XG5jb25zdCB0YWJzID0gW1wiaG90XCIsIFwibmV3XCIsIFwiZGlzY3Vzc2VkXCIsIFwiY29udHJvdmVyc2lhbFwiLCBcInRvcFwiXTtcblxuY29uc3QgZ2V0U291cmNlID0gcXVlcnkoKHNjb3BlLCB7IGRvbWFpbiwgc29ydCB9KSA9PiB7XG4gIGNvbnN0IGRvbWFpbnMgPSBQYXRoLnNwbGl0VG9waWNzKGRvbWFpbik7XG5cbiAgcmV0dXJuIExpc3RpbmdTcGVjLmdldFNvdXJjZShcbiAgICBzY29wZSxcbiAgICBDb25maWcuaW5kZXhlcixcbiAgICBcImxpc3Rpbmc6ZG9tYWluXCIsXG4gICAgW1xuICAgICAgYG5hbWUgJHtkb21haW5zWzBdfWAsXG4gICAgICBcInN1Ym1pdCB0byB3aGF0ZXZlclwiLFxuICAgICAgYHNvcnQgJHtzb3J0fWAsXG4gICAgICBcImtpbmQgc3VibWlzc2lvblwiLFxuICAgICAgLi4uUi5tYXAoZG9tYWluID0+IGBkb21haW4gJHtkb21haW59YCwgZG9tYWlucyksXG4gICAgICAuLi5SLm1hcCh0YWIgPT4gYHRhYiAke3RhYn0gL2RvbWFpbi8ke2RvbWFpbn0vJHt0YWJ9YCwgdGFicylcbiAgICBdLmpvaW4oXCJcXG5cIilcbiAgKTtcbn0pO1xuXG5jb25zdCBnZXRTcGVjID0gcXVlcnkoKHNjb3BlLCBtYXRjaCkgPT5cbiAgZ2V0U291cmNlKHNjb3BlLCBtYXRjaCkudGhlbihMaXN0aW5nU3BlYy5mcm9tU291cmNlKVxuKTtcblxuZXhwb3J0IGNvbnN0IERvbWFpbkxpc3RpbmcgPSBQYXRoLndpdGhSb3V0ZSh7IHBhdGgsIHRhYnMsIGdldFNvdXJjZSwgZ2V0U3BlYyB9KTtcbiIsImltcG9ydCB7IHF1ZXJ5IH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uLy4uL0NvbmZpZ1wiO1xuaW1wb3J0IHsgUGF0aCB9IGZyb20gXCIuLi9QYXRoXCI7XG5pbXBvcnQgeyBMaXN0aW5nU3BlYyB9IGZyb20gXCIuLi9MaXN0aW5nU3BlY1wiO1xuXG5jb25zdCBwYXRoID0gXCIvdGhpbmdzLzp0aGluZ0lkL2NvbW1lbnRzLzpzb3J0XCI7XG5cbmNvbnN0IGdldFNwZWMgPSBxdWVyeSgoc2NvcGUsIHsgdGhpbmdJZCwgc29ydCB9KSA9PlxuICBMaXN0aW5nU3BlYy5nZXRTb3VyY2UoXG4gICAgc2NvcGUsXG4gICAgQ29uZmlnLmluZGV4ZXIsXG4gICAgXCJsaXN0aW5nOmNvbW1lbnRzXCIsXG4gICAgW2BvcCAke3RoaW5nSWR9YCwgYHNvcnQgJHtzb3J0fWBdLmpvaW4oXCJcXG5cIilcbiAgKVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0aW5nID0gUGF0aC53aXRoUm91dGUoeyBwYXRoLCBnZXRTcGVjIH0pO1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IGFsbCwgcXVlcnkgfSBmcm9tIFwiZ3VuLXNjb3BlXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vLi4vQ29uZmlnXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi4vLi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBHdW5Ob2RlIH0gZnJvbSBcIi4uLy4uL0d1bk5vZGVcIjtcbmltcG9ydCB7IFBhdGggfSBmcm9tIFwiLi4vUGF0aFwiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi4vTGlzdGluZ05vZGVcIjtcbmltcG9ydCB7IExpc3RpbmdGaWx0ZXIgfSBmcm9tIFwiLi4vTGlzdGluZ0ZpbHRlclwiO1xuaW1wb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi4vTGlzdGluZ1NwZWNcIjtcbmltcG9ydCB7IExpc3RpbmdPcmFjbGUgfSBmcm9tIFwiLi4vTGlzdGluZ09yYWNsZVwiO1xuaW1wb3J0IHsgU3BhY2VTcGVjIH0gZnJvbSBcIi4uL1NwYWNlU3BlY1wiO1xuXG5jb25zdCBwYXRoID0gXCIvdXNlci86YXV0aG9ySWQvc3BhY2VzLzpuYW1lLzpzb3J0XCI7XG5cbmNvbnN0IGdldFNvdXJjZSA9IHF1ZXJ5KChzY29wZSwgeyBhdXRob3JJZCwgbmFtZSwgc29ydCB9KSA9PlxuICBTcGFjZVNwZWMuZ2V0U291cmNlKHNjb3BlLCBhdXRob3JJZCwgbmFtZSwgYHNvcnQgJHtzb3J0fWApXG4pO1xuXG5jb25zdCBnZXRTcGVjID0gcXVlcnkoKHNjb3BlLCBtYXRjaCkgPT5cbiAgZ2V0U291cmNlKHNjb3BlLCBtYXRjaCkudGhlbihzb3VyY2UgPT5cbiAgICBMaXN0aW5nU3BlYy5mcm9tU291cmNlKHNvdXJjZSwgbWF0Y2guYXV0aG9ySWQsIG1hdGNoLm5hbWUpXG4gIClcbik7XG5cbmNvbnN0IGNhbGN1bGF0ZSA9IHF1ZXJ5KChzY29wZSwgbWF0Y2gsIG9wdHMpID0+IHtcbiAgY29uc3QgeyBhdXRob3JJZCwgbmFtZSwgc29ydCB9ID0gbWF0Y2g7XG4gIGNvbnN0IHJvdXRlUHJvcHMgPSB7IGF1dGhvcklkLCBuYW1lLCBzb3J0LCBpbmRleGVyOiBDb25maWcuaW5kZXhlciB9O1xuICBjb25zdCBzb3VscyA9IFtTY2hlbWEuU3BhY2VMaXN0aW5nLnJvdXRlLnJldmVyc2Uocm91dGVQcm9wcyldO1xuXG4gIHJldHVybiBhbGwoW1xuICAgIGdldFNwZWMoc2NvcGUsIG1hdGNoKSxcbiAgICBMaXN0aW5nTm9kZS5nZXRSb3dzRnJvbVNvdWxzKHNjb3BlLCBzb3VscylcbiAgXSkudGhlbigoW3NwZWMsIHJvd3NdKSA9PiB7XG4gICAgY29uc3QgZmlsdGVyRm4gPSBMaXN0aW5nRmlsdGVyLnRoaW5nRmlsdGVyKHNjb3BlLCBzcGVjKTtcblxuICAgIHJldHVybiBMaXN0aW5nRmlsdGVyLmdldEZpbHRlcmVkSWRzKHNjb3BlLCByb3dzLCB7IC4uLm9wdHMsIGZpbHRlckZuIH0pO1xuICB9KTtcbn0pO1xuXG5jb25zdCBvblB1dCA9IGFzeW5jIChcbiAgb3JjLFxuICByb3V0ZSxcbiAgeyB1cGRhdGVkU291bCwgZGlmZiwgb3JpZ2luYWwsIGxhdGVzdCA9IDAgfVxuKSA9PiB7XG4gIGNvbnN0IHNjb3BlID0gb3JjLm5ld1Njb3BlKCk7XG5cbiAgY29uc3Qgb3JpZ2luYWxEYXRhID0gR3VuTm9kZS5kZWNvZGVTRUEob3JpZ2luYWwpO1xuICBjb25zdCBkaWZmRGF0YSA9IEd1bk5vZGUuZGVjb2RlU0VBKGRpZmYpO1xuICBjb25zdCBbdXBkYXRlZElkcywgcmVtb3ZlZElkc10gPSBMaXN0aW5nTm9kZS5jYXRlZ29yaXplRGlmZihcbiAgICBkaWZmRGF0YSxcbiAgICBvcmlnaW5hbERhdGFcbiAgKTtcbiAgY29uc3Qgc3BlYyA9IGF3YWl0IGdldFNwZWMoc2NvcGUsIHJvdXRlLm1hdGNoKTtcbiAgY29uc3Qgdm90ZUNvdW50c01hdGNoID0gU2NoZW1hLlRoaW5nVm90ZUNvdW50cy5yb3V0ZS5tYXRjaCh1cGRhdGVkU291bCk7XG4gIGNvbnN0IHRoaW5nTWF0Y2ggPSBTY2hlbWEuVGhpbmcucm91dGUubWF0Y2godXBkYXRlZFNvdWwpO1xuICBjb25zdCB7IHRoaW5nSWQgfSA9IFNjaGVtYS5UaGluZ0RhdGFTaWduZWQucm91dGUubWF0Y2godXBkYXRlZFNvdWwpIHx8IHt9O1xuICBjb25zdCBhdXRob3JNYXRjaCA9IFNjaGVtYS5TRUFBdXRob3Iucm91dGUubWF0Y2godXBkYXRlZFNvdWwpO1xuXG4gIGlmICh2b3RlQ291bnRzTWF0Y2gpIHVwZGF0ZWRJZHMucHVzaCh2b3RlQ291bnRzTWF0Y2gudGhpbmdJZCk7XG4gIGlmICh0aGluZ01hdGNoKSB1cGRhdGVkSWRzLnB1c2godGhpbmdNYXRjaC50aGluZ0lkKTtcbiAgaWYgKHRoaW5nSWQgJiYgdGhpbmdJZCAhPT0gc3BlYy5mcm9tUGFnZUlkKSB1cGRhdGVkSWRzLnB1c2godGhpbmdJZCk7XG4gIGF3YWl0IExpc3RpbmdPcmFjbGUudXBkYXRlTGlzdGluZyhcbiAgICBvcmMsXG4gICAgcm91dGUsXG4gICAgc2NvcGUsXG4gICAgc3BlYyxcbiAgICB1cGRhdGVkSWRzLFxuICAgIHJlbW92ZWRJZHMsXG4gICk7XG4gIGZvciAoY29uc3Qga2V5IGluIHNjb3BlLmdldEFjY2Vzc2VzKCkpIG9yYy5saXN0ZW4oa2V5LCByb3V0ZS5zb3VsKTtcbiAgaWYgKFxuICAgIFIucHJvcChcInNpemVcIiwgb3JpZ2luYWwpIHx8XG4gICAgdXBkYXRlZElkcy5sZW5ndGggfHxcbiAgICByZW1vdmVkSWRzLmxlbmd0aCB8fFxuICAgIGF1dGhvck1hdGNoXG4gIClcbiAgICByZXR1cm47XG5cbiAgLy8gYmFzZSBsb2dpYyBmcm9tIGd1bi1jbGVyaWMtc2NvcGUgbmVlZHMgdG8gYmUgZW5jYXBzdWFsdGVkIGJldHRlcj9cbiAgY29uc29sZS5sb2coXCItLS1TVEFOREFSRCBTUEFDRSBVUERBVEUtLS1cIiwgcm91dGUuc291bCwgdXBkYXRlZFNvdWwpO1xuICBjb25zdCBub2RlID0gYXdhaXQgb3JjLm5ld1Njb3BlKCkuZ2V0KHJvdXRlLnNvdWwpO1xuICBjb25zdCBleGlzdGluZ0tleXMgPSBMaXN0aW5nTm9kZS5pdGVtS2V5cyhub2RlKTtcblxuICBpZiAoZXhpc3RpbmdLZXlzLmxlbmd0aCkge1xuICAgIHJvdXRlLndyaXRlKHtcbiAgICAgIHNpemU6IDAsXG4gICAgICAuLi5leGlzdGluZ0tleXMucmVkdWNlKChkaWZmLCBrZXkpID0+IHtcbiAgICAgICAgZGlmZltgJHtrZXl9YF0gPSBudWxsO1xuICAgICAgICByZXR1cm4gZGlmZjtcbiAgICAgIH0sIHt9KVxuICAgIH0pO1xuICB9XG5cbiAgb3JjLndvcmsoe1xuICAgIGlkOiBgdXBkYXRlOiR7cm91dGUuc291bH1gLFxuICAgIHNvdWw6IHJvdXRlLnNvdWwsXG4gICAgbWV0aG9kOiBcImRvVXBkYXRlXCIsXG4gICAgcHJpb3JpdHk6IHJvdXRlLnByaW9yaXR5IHx8IDUwXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IFNwYWNlTGlzdGluZyA9IFBhdGgud2l0aFJvdXRlKHtcbiAgcGF0aCxcbiAgY2FsY3VsYXRlLFxuICBnZXRTb3VyY2UsXG4gIGdldFNwZWMsXG4gIG9uUHV0XG59KTtcbiIsImltcG9ydCB7IHF1ZXJ5IH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uLy4uL0NvbmZpZ1wiO1xuaW1wb3J0IHsgR3VuTm9kZSB9IGZyb20gXCIuLi8uLi9HdW5Ob2RlXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi4vLi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBUaGluZ1NldCB9IGZyb20gXCIuLi8uLi9UaGluZ1wiO1xuaW1wb3J0IHsgUGF0aCB9IGZyb20gXCIuLi9QYXRoXCI7XG5pbXBvcnQgeyBMaXN0aW5nU3BlYyB9IGZyb20gXCIuLi9MaXN0aW5nU3BlY1wiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi4vTGlzdGluZ05vZGVcIjtcbmltcG9ydCB7IExpc3RpbmdPcmFjbGUgfSBmcm9tIFwiLi4vTGlzdGluZ09yYWNsZVwiO1xuXG5jb25zdCBwYXRoID0gXCIvdXNlci86YXV0aG9ySWQvcmVwbGllZC86dHlwZS86c29ydFwiO1xuXG5jb25zdCBnZXRTb3VyY2UgPSBxdWVyeSgoc2NvcGUsIHsgYXV0aG9ySWQsIHR5cGUsIHNvcnQgPSBcIm5ld1wiIH0pID0+XG4gIExpc3RpbmdTcGVjLmdldFNvdXJjZShcbiAgICBzY29wZSxcbiAgICBDb25maWcuaW5kZXhlcixcbiAgICBcImxpc3Rpbmc6aW5ib3hcIixcbiAgICBbYHJlcGxpZXMgdG8gYXV0aG9yICR7YXV0aG9ySWR9YCwgYHR5cGUgJHt0eXBlfWAsIGBzb3J0ICR7c29ydH1gXS5qb2luKFwiXFxuXCIpXG4gIClcbik7XG5cbmNvbnN0IGdldFNwZWMgPSBxdWVyeSgoc2NvcGUsIG1hdGNoKSA9PlxuICBnZXRTb3VyY2Uoc2NvcGUsIG1hdGNoKS50aGVuKExpc3RpbmdTcGVjLmZyb21Tb3VyY2UpXG4pO1xuXG5jb25zdCBvblB1dCA9IGFzeW5jIChcbiAgb3JjLFxuICByb3V0ZSxcbiAgeyB1cGRhdGVkU291bCwgZGlmZiB9XG4pID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBvcmMubmV3U2NvcGUoKTtcbiAgY29uc3QgZGlmZkRhdGEgPSBHdW5Ob2RlLmRlY29kZVNFQShkaWZmKTtcbiAgY29uc3QgW3VwZGF0ZWRBdXRob3JlZF0gPSBMaXN0aW5nTm9kZS5jYXRlZ29yaXplRGlmZihkaWZmRGF0YSk7XG4gIGNvbnN0IHNwZWMgPSBhd2FpdCBnZXRTcGVjKHNjb3BlLCByb3V0ZS5tYXRjaCk7XG4gIGxldCB1cGRhdGVkSWRzID0gVGhpbmdTZXQuaWRzKGRpZmZEYXRhKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHVwZGF0ZWRBdXRob3JlZC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG9wSWQgPSB1cGRhdGVkQXV0aG9yZWRbaV07XG4gICAgY29uc3QgcmVwbHlJZHMgPSBUaGluZ1NldC5pZHMoXG4gICAgICBhd2FpdCBzY29wZS5nZXQoU2NoZW1hLlRoaW5nQ29tbWVudHMucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQ6IG9wSWQgfSkpLnRoZW4oKVxuICAgICk7XG5cbiAgICB1cGRhdGVkSWRzID0gdXBkYXRlZElkcy5jb25jYXQocmVwbHlJZHMpO1xuICB9XG5cbiAgaWYgKHVwZGF0ZWRJZHMubGVuZ3RoKVxuICAgIGF3YWl0IExpc3RpbmdPcmFjbGUudXBkYXRlTGlzdGluZyhvcmMsIHJvdXRlLCBzY29wZSwgc3BlYywgdXBkYXRlZElkcywgW10pO1xuICBmb3IgKGNvbnN0IGtleSBpbiBzY29wZS5nZXRBY2Nlc3NlcygpKSBvcmMubGlzdGVuKGtleSwgcm91dGUuc291bCk7XG59O1xuXG5leHBvcnQgY29uc3QgSW5ib3hMaXN0aW5nID0gUGF0aC53aXRoUm91dGUoeyBwYXRoLCBnZXRTb3VyY2UsIGdldFNwZWMsIG9uUHV0IH0pO1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IHF1ZXJ5IH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uLy4uL0NvbmZpZ1wiO1xuaW1wb3J0IHsgUGF0aCB9IGZyb20gXCIuLi9QYXRoXCI7XG5pbXBvcnQgeyBMaXN0aW5nU3BlYyB9IGZyb20gXCIuLi9MaXN0aW5nU3BlY1wiO1xuXG5jb25zdCBwYXRoID0gXCIvdXNlci86YXV0aG9ySWQvOnR5cGUvOnNvcnRcIjtcbmNvbnN0IHRhYnMgPSBbXCJvdmVydmlld1wiLCBcImNvbW1lbnRzXCIsIFwic3VibWl0dGVkXCIsIFwiY29tbWFuZHNcIl07XG5cbmNvbnN0IGdldFNvdXJjZSA9IHF1ZXJ5KChzY29wZSwgeyBhdXRob3JJZCwgdHlwZSwgc29ydCB9KSA9PlxuICBMaXN0aW5nU3BlYy5nZXRTb3VyY2UoXG4gICAgc2NvcGUsXG4gICAgQ29uZmlnLmluZGV4ZXIsXG4gICAgXCJsaXN0aW5nOnByb2ZpbGVcIixcbiAgICBbXG4gICAgICBgYXV0aG9yICR7YXV0aG9ySWR9YCxcbiAgICAgIGB0eXBlICR7dHlwZX1gLFxuICAgICAgXCJzdWJtaXQgdG8gd2hhdGV2ZXJcIixcbiAgICAgIGBzb3J0ICR7c29ydH1gLFxuICAgICAgLi4uUi5tYXAodGFiID0+IGB0YWIgJHt0YWJ9IC91c2VyLyR7YXV0aG9ySWR9LyR7dGFifWAsIHRhYnMpXG4gICAgXS5qb2luKFwiXFxuXCIpXG4gIClcbik7XG5cbmNvbnN0IGdldFNwZWMgPSBxdWVyeSgoc2NvcGUsIG1hdGNoKSA9PlxuICBnZXRTb3VyY2Uoc2NvcGUsIG1hdGNoKS50aGVuKExpc3RpbmdTcGVjLmZyb21Tb3VyY2UpXG4pO1xuXG5leHBvcnQgY29uc3QgUHJvZmlsZUxpc3RpbmcgPSBQYXRoLndpdGhSb3V0ZSh7IHBhdGgsIHRhYnMsIGdldFNvdXJjZSwgZ2V0U3BlYyB9KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=