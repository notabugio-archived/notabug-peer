!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):"function"==typeof define&&define.amd?define("notabug-peer",["ramda","gun-scope","object-hash","gun-suppressor-sear","route-parser","uri-js","gun-suppressor","argon2"],t):"object"==typeof exports?exports["notabug-peer"]=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):e["notabug-peer"]=t(e.ramda,e["gun-scope"],e["object-hash"],e["gun-suppressor-sear"],e["route-parser"],e["uri-js"],e["gun-suppressor"],e.argon2)}("undefined"!=typeof self?self:this,function(e,t,n,r,o,i,a,s){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=26)}([function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(8),a=n(4),s=n(6),u=n(9);function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var f=(0,o.resolve)(null),d=r.reduce(r.union,[]),g=function(e){for(var t=(e||{}).topics,n=void 0===t?["all"]:t,o=r.propOr(365,"days",e)||365,a=[],u=(new Date).getTime()-864e5*parseInt(o,10),c=0;c<=o+1;c++)a.push(s.ThingSet.dayStr(u+864e5*c));return Object.keys(n.reduce(function(e,t){return a.reduce(function(e,n){return e["".concat(i.Constants.PREFIX,"/topics/").concat(t,"/days/").concat(n)]=!0,e},e)},{}))},h=(0,o.query)(function(e,t){var n=g({...t,topics:[t.topic]}),r=[],a=i.Constants.LISTING_SIZE;"new"===t.sort?a=i.Constants.LISTING_SIZE:("top"===t.sort&&(a*=3),"all"===t.topic&&(a*=3));return function t(){var i=n.pop();return r.length>a||!i?(0,o.resolve)(r):e.get(i).souls().then(function(e){return r=[].concat(l(r),l(e)),t()})}()}),m=(0,o.query)(function(e,t){var n=t.domain;return e.get(a.Schema.Domain.route.reverse({domainName:n})).souls()}),y=(0,o.query)(function(e,t){return(0,o.all)([t.type&&"submitted"!==t.type&&"overview"!==t.type?(0,o.resolve)([]):e.get(t.authorId).get("submissions").souls(),t.type&&"comments"!==t.type&&"overview"!==t.type&&"commands"!==t.type?(0,o.resolve)([]):e.get(t.authorId).get("comments").souls()]).then(function(e){var t=p(e,2),n=t[0],r=t[1];return d([n,r])})}),v=(0,o.query)(function(e,t){return e.get(t).then(u.ListingNode.sortedIds)},"listingIds"),b=(0,o.query)(function(e,t){var n=t.listing,o=t.sort,s=t.indexer;return v(e,"".concat(i.Constants.PREFIX).concat(n,"/").concat(o,"@~").concat(s,".")).then(r.compose(r.map(function(e){return a.Schema.Thing.route.reverse({thingId:e})}),r.filter(r.identity)))}),O=(0,o.query)(function(e,t){var n=t.repliesToAuthorId,r=t.type,i=void 0===r?"overview":r,a=c(t,["repliesToAuthorId","type"]);return b(e,{listing:"/user/".concat(n,"/").concat(i),sort:"new",...a}).then(function(t){return(0,o.all)(t.map(function(t){return e.get("".concat(t,"/comments")).souls()})).then(d)})}),S=(0,o.query)(function(e,t){return e.get(a.Schema.ThingAllComments.route.reverse({thingId:t.submissionId})).souls(r.prepend(a.Schema.Thing.route.reverse({thingId:t.submissionId})))}),P=(0,o.query)(function(e,t){return e.get(t).then(function(e){if(!e||!e.id)return null;var t={id:e.id,timestamp:parseFloat(e.timestamp,10)},n=r.path(["replyTo","#"],e),o=r.path(["op","#"],e),i=o?a.Schema.Thing.route.match(o).thingid:null,s=n?a.Schema.Thing.route.match(n).thingid:null;return i&&(t.opId=i),s&&(t.replyToId=s),t})}),I=function(e){return(0,o.query)(function(t,n){return t.get(n).get(e).count()})},w=I("votesup"),j=I("votesdown"),T=(0,o.query)(function(e,t){return e.get("".concat(t,"/allcomments")).count()}),_=(0,o.query)(function(e,t){return(0,o.all)([w(e,t),j(e,t),T(e,t)]).then(function(e){var t=p(e,3),n=t[0],r=t[1];return{up:n,down:r,comment:t[2],score:n-r}})}),L=(0,o.query)(function(e,t){var n=t.thingSoul,r=t.tabulator,i=t.data,a=void 0!==i&&i,s=t.scores,u=void 0!==s&&s;return n?(0,o.all)([P(e,n),u?r?e.get("".concat(n,"/votecounts@~").concat(r,".")).then():_(e,n).then():(0,o.resolve)(),a?e.get(n).get("data").then():(0,o.resolve)()]).then(function(e){var t=p(e,3),n=t[0],r=t[1],o=t[2];return n&&n.id?{...n,votes:r,data:o}:null}):(0,o.resolve)(null)}),A=(0,o.query)(function(e,t){return(0,o.all)(r.reduce(function(n,r){return r?(n.push(L(e,{...t,thingSoul:r})),n):n},[],r.propOr([],"thingSouls",t)))}),D=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:d;return(0,o.query)(function(a,s){var u=r.prop(t,s);return r.isNil(u)?f:(0,o.all)(r.map(function(t){return e(a,(r={...s},i=t,(o=n)in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r));var r,o,i},r.propOr([],t,s))).then(i)})},M=D(h,"topics","topic"),x=D(m,"domains","domain"),E=D(y,"authorIds","authorId"),C=D(S,"submissionIds","submissionId"),N=function(e){return function(t){return(0,o.all)(t.filter(function(e){return!!e}).map(function(t){return e.get(t).get("data").then(function(e){return e})}))}},q=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return(0,o.all)([E(e,{type:"comments",authorIds:t}).then(N(e)).then(r.compose(r.map(n?r.prop("opId"):r.prop("replyToId")),r.filter(r.prop("replyToId")))),E(e,{type:"submitted",authorIds:t}).then(r.map(function(e){return a.Schema.Thing.route.match(e).thingId}))]).then(function(e){var t=p(e,2),n=t[0],o=t[1];return r.uniq([].concat(l(n),l(o)))})}),k=(0,o.query)(function(e,t,n){return t&&n?e.get(a.Schema.ThingVoteCounts.route.reverse({thingId:n,tabulator:t})).then():(0,o.resolve)()},"thingScores"),R=(0,o.query)(function(e,t){return e.get(a.Schema.ThingComments.route.reverse({thingId:t})).then()}),$=(0,o.query)(function(e,t){return t?e.get(a.Schema.Thing.route.reverse({thingId:t})).get("data"):(0,o.resolve)(null)},"thingData"),F=(0,o.query)(function(e,t){return e.get(a.Schema.AuthorPages.route.reverse({authorId:t}))},"userPages"),X=(0,o.query)(function(e,t,n){return e.get(a.Schema.AuthorPages.route.reverse({authorId:t})).get(n).get("id")},"wikiPageId"),V=(0,o.query)(function(e,t,n){return X(e,t,n).then(function(t){return t&&$(e,t)})}),Z=(0,o.query)(function(e,t){return t?e.get("~".concat(t)).then(function(e){return{userAlias:r.prop("alias",e),createdAt:r.path(["_",">","pub"],e)}}):(0,o.resolve)(null)},"userMeta"),G=r.curry(function(e,t){return(0,o.scope)(r.assoc("gun",e.gun,t||{}))}),Q={singleTopic:h,singleDomain:m,singleAuthor:y,singleListing:b,repliesToAuthor:O,singleSubmission:S,computeThingScores:_,thingMeta:L,multiThingMeta:A,multiTopic:M,multiDomain:x,multiAuthor:E,multiSubmission:C,thingScores:k,thingReplies:R,thingData:$,thingDataFromSouls:N,topicSouls:g,userPages:F,wikiPageId:X,wikiPage:V,userMeta:Z,createScope:G,curated:q};t.Query=Q},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Config=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(8);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var a={tabulator:o.Constants.DEV_INDEXER,indexer:o.Constants.DEV_INDEXER,owner:o.Constants.DEV_INDEXER,update:r.compose(r.map(function(e){var t=i(e,2),n=t[0],r=t[1];return a[n]=r}),r.toPairs)};t.Config=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Schema=void 0;var r,o=u(n(0)),i=(r=n(19))&&r.__esModule?r:{default:r},a=u(n(18)),s=n(8);function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var p={...a.AUTH_SCHEMA,topicName:{type:"string",minLength:1,maxLength:s.Constants.MAX_TOPIC_SIZE},TopicDay:{title:"Topic Day",description:"A single day of things in a topic",soul:{pattern:"".concat(s.Constants.PREFIX,"/topics/:topicName/days/:year/:month/:day"),properties:{topicName:{$ref:"schema.json#/definitions/topicName"},year:{type:"number",minimum:2018,maximum:2100},month:{type:"number",minimum:1,maximum:12},day:{type:"number",minimum:1,maximum:31}},required:["topicName","year","month","day"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},Topic:{title:"Topic",description:"All things in a topic",soul:{pattern:"".concat(s.Constants.PREFIX,"/topics/:topicName"),properties:{topicName:{$ref:"schema.json#/definitions/topicName"}},required:["topicName"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},domainName:{type:"string",minLength:1,maxLength:s.Constants.MAX_DOMAIN_SIZE},Domain:{title:"Domain",description:"All things in a domain",soul:{pattern:"".concat(s.Constants.PREFIX,"/domains/:domainName"),properties:{domainName:{$ref:"schema.json#/definitions/domainName"}},required:["domainName"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},url:{type:["null","string"],maxLength:s.Constants.MAX_URL_SIZE},URL:{title:"URL",description:"All things for a given URL",soul:{pattern:"".concat(s.Constants.PREFIX,"/urls/*url"),properties:{url:{$ref:"schema.json#/definitions/url"}},required:["url"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},thingId:{type:"string",maxLength:s.Constants.MAX_HASH_SIZE},thingSoul:{properties:{thingId:{"#ref":"#definitions/thingId"}}},ThingAllComments:{title:"Thing All Comments",description:"All comments for a given submission",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/allcomments"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},ThingComments:{title:"Thing Comments",description:"Direct replies to a thing",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/comments"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},timestamp:{type:["number","string"]},thingKind:{type:"string",maxLength:s.Constants.MAX_THING_KIND_SIZE},Thing:{title:"Thing Reference",description:"These are submissions, comments, chat messages and wiki pages",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},propsFromSoul:{id:"thingId"},properties:{id:{$ref:"#/definitions/thingId"},kind:{"#ref":"#/definitions/thingKind"},timestamp:{$ref:"#/definitions/timestamp"},originalHash:{$ref:"#/definitions/thingId"},data:{oneOf:[{$ref:"#/definitions/ThingDataEdge"},{$ref:"#/definitions/ThingDataSignedEdge"}]},topic:{anyOf:[{$ref:"#/definitions/TopicEdge"},{description:"Some old things had generic topic souls",type:"object",additionalProperties:!1,properties:{"#":{type:"string",maxLength:42}},required:["#"]}]},domain:{$ref:"#/definitions/DomainEdge"},url:{$ref:"#/definitions/URLEdge"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"},op:{$ref:"#/definitions/ThingEdge"},replyTo:{$ref:"#/definitions/ThingEdge"},author:{$ref:"#/definitions/SEAAuthorEdge"}},anyOf:[{allOf:[{thingHashMatchesSoul:!0},{anyOf:[{signedThingDataMatchesThing:!0},{thingDataMatchesOriginalHash:!0}]}]},{isLegacyThing:!0},{additionalProperties:!1,description:"Self verifying can be updated in isolation",properties:{id:{$ref:"#/definitions/thingId"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"}}}]},ProofOfWorkVotes:{$async:!0,keysAreProofsOfWork:{algorithm:"argon2d",config:{complexity:6,hashLength:32,timeCost:1,memoryCost:10240,parallelism:1}}},ThingVotesUp:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votesup"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingVotesDown:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votesdown"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingData:{title:"Unsigned Thing Data",description:"This is the actual content of a thing",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/data"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}],required:["thingId"]},properties:{kind:{$ref:"#/definitions/thingKind"},title:{type:"string",minLength:1,maxLength:s.Constants.MAX_THING_TITLE_SIZE},topic:{$ref:"#/definitions/topicName"},body:{type:["null","string"],maxLength:s.Constants.MAX_THING_BODY_SIZE},author:{$ref:"#/definitions/seaAlias"},authorId:{$ref:"#/definitions/seaAuthorId"},opId:{$ref:"#/definitions/thingId"},replyToId:{$ref:"#/definitions/thingId"},domain:{$ref:"#/definitions/domainName"},url:{$ref:"#/definitions/url"},timestamp:{$ref:"#/definitions/timestamp"}},thingDataHashMatchesSoul:!0},ThingDataSigned:{title:"Signed Thing Data",description:"This is the actual content of a thing, cryptographically signed",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/data~:authorId."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["thingId","authorId"]},properties:{kind:{sea:{$ref:"schema.json#/definitions/thingKind"}},title:{sea:{type:"string",minLength:1,maxLength:s.Constants.MAX_THING_TITLE_SIZE}},topic:{sea:{$ref:"schema.json#/definitions/topicName"}},body:{sea:{type:["null","string"],maxLength:s.Constants.MAX_THING_BODY_SIZE}},author:{sea:{$ref:"schema.json#/definitions/seaAlias"}},authorId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},replyToId:{sea:{$ref:"schema.json#/definitions/thingId"}},domain:{sea:{$ref:"schema.json#/definitions/domainName"}},url:{sea:{$ref:"schema.json#/definitions/url"}},timestamp:{sea:{$ref:"schema.json#/definitions/timestamp"}}}},ThingVoteCounts:{title:"Thing Vote Counts",description:"Aggregated counts from a tabulator",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votecounts@~:tabulator."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},tabulator:{$ref:"schema.json#/definitions/seaAuthorId"}}},properties:{up:{sea:{type:["number","string"]}},down:{sea:{type:["number","string"]}},comment:{sea:{type:["number","string"]}},score:{sea:{type:["number","string"]}},commands:{sea:{type:["object","string"]}}}},ListingData:{$async:!0,title:"Listing Node Data",description:"Shared description of listing properties",type:"object",properties:{ids:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_IDS_SIZE}},source:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},name:{sea:{type:["string","null"],maxLength:s.Constants.MAX_TOPIC_SIZE}},submitTopic:{sea:{type:"string",maxLength:s.Constants.MAX_TOPIC_SIZE}},tabs:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_TABS_SIZE}},curators:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},censors:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},userId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},isChat:{sea:{type:["boolean","string"]}}},patternProperties:{"^d+$":{sea:{type:"string"}}}},sortName:{type:"string",enum:["new","old","active","top","comments","discussed","hot","best","controversial","random","firehose","chat"]},TopicListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/t/:topic/:sort@~:indexer."),properties:{topic:{$ref:"schema.json#/definitions/topicName"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},DomainListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/domain/:domain/:sort@~:indexer."),properties:{domain:{$ref:"schema.json#/definitions/domainName"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},ThingCommentsListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/comments/:sort@~:indexer."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},userListingType:{type:"string",enum:["overview","submitted","comments","commands","commented"]},AuthorRepliesListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/replies/:type/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorProfileListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/:type/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},SpaceListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/spaces/:name/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},name:{$ref:"schema.json#/definitions/topicName"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorComments:{title:"Author's Comments",description:"All of an authors comments should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/comments~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorSubmissions:{title:"Author's Submissions",description:"All of an author's submissions should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/submissions~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}},AuthorThings:{title:"Author's Things",description:"All of an author's things should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/things~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorPages:{title:"Author Page Map",description:"Mapping of page names to things",soul:{pattern:"".concat(s.Constants.PREFIX,"/pages~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}}},l=o.keys(p).reduce(function(e,t){var n=o.path([t,"soul","pattern"],p);return n?o.assoc(t,new i.default(n),e):e}),f={...o.compose(o.reduce(function(e,t){var n=c(t,2),r=n[0],i=n[1];return o.assoc(r,o.assoc("route",i,o.prop(r,p)),e)},{}),o.toPairs)(l),definitions:p,routes:l};t.Schema=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSpec=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(2),a=n(6),s=n(23),u=n(12),c=n(11);var p={fromSource:r.compose(r.apply(r.mergeLeft),r.ap([c.ListingFilter.fromDefinition,r.identity]),r.of,r.apply(r.assoc("dataSource")),r.ap([u.ListingDataSource.fromDefinition,r.identity]),r.of,s.ListingDefinition.fromSource),getSource:(0,o.query)(function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return i.Query.wikiPage(e,t,n).then(r.compose(function(e){return"".concat(e,"\n# added by indexer\n").concat(o||"","\nsourced from page ").concat(t," ").concat(n,"\n")},a.ThingDataNode.body))})};t.ListingSpec=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return c.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return p.ThingDataNode}}),t.Thing=void 0;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=n(1),a=(r=n(17))&&r.__esModule?r:{default:r},s=n(20),u=n(4),c=n(30),p=n(31);function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var f=o.compose(o.prop("thingId"),u.Schema.Thing.route.match.bind(u.Schema.Thing.route)),d=o.map(f),g=o.curry(function(e,t){t.timestamp=t.timestamp||(new Date).getTime();var n=(0,a.default)(t),r=t.timestamp,o=t.kind,i=t.topic,s=t.authorId,c=t.opId,p=t.replyToId,l=(0,a.default)({timestamp:r,kind:o,topic:i,authorId:s,opId:c,replyToId:p,originalHash:n}),f=e.gun.get(u.Schema.Thing.route.reverse({thingId:l})),d=s?u.Schema.ThingDataSigned.route.reverse({thingId:l,authorId:s}):u.Schema.ThingData.route.reverse({thingId:n}),g={id:l,timestamp:r,kind:o,originalHash:n,data:{"#":d},votesup:{"#":u.Schema.ThingVotesUp.route.reverse({thingId:l})},votesdown:{"#":u.Schema.ThingVotesDown.route.reverse({thingId:l})},allcomments:{"#":u.Schema.ThingAllComments.route.reverse({thingId:l})},comments:{"#":u.Schema.ThingComments.route.reverse({thingId:l})}};return i&&(g.topic={"#":u.Schema.Topic.route.reverse({topicName:i})}),s&&(g.author={"#":"~".concat(s)}),c&&(g.op={"#":u.Schema.Thing.route.reverse({thingId:c})}),p&&(g.replyTo={"#":u.Schema.Thing.route.reverse({thingId:p})}),e.gun.get(d).put(t),f.put(g),e.index(l,t),f}),h=o.curry(function(e,t){var n=t.timestamp||(new Date).getTime(),r=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),t.domain&&(t.domain=t.domain.toLowerCase().trim()),r&&(t.author=r.alias,t.authorId=r.pub);var o=g(e,{...t,timestamp:n,kind:"submission"});if(r){var i=u.Schema.AuthorThings.route.reverse({authorId:r.pub}),a=u.Schema.AuthorSubmissions.route.reverse({authorId:r.pub}),s=e.gun.get(i),c=e.gun.get(a);e.gun.user().get("things").put(s),e.gun.user().get("submissions").put(c),s.set(o),c.set(o)}return o}),m=o.curry(function(e,t){var n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);var r=g(e,{...t,kind:"comment"});if(n){var o=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),i=u.Schema.AuthorComments.route.reverse({authorId:n.pub}),a=e.gun.get(o),s=e.gun.get(i);e.gun.user().get("things").put(a),e.gun.user().get("comments").put(s),a.set(r),s.set(r)}return r}),y=o.curry(function(e,t){var n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);var r=g(e,{...t,kind:"chatmsg"});if(n){var o=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),i=e.gun.get(o);e.gun.user().get("things").put(i),i.set(r)}return r}),v=o.curry(function(e,t,n){var r,o=e.isLoggedIn();if(!o)return i.Promise.reject("not logged in");var a=u.Schema.AuthorPages.route.reverse({authorId:o.pub}),s=e.gun.get(a).get(t);return s.then(function(i){if(i&&i.data)console.log("res",i),s.get("data").get("body").put(n);else{var a={body:n,title:t,kind:"wikipage",author:o.alias,authorId:o.pub};console.log("page data",a),r=g(e,a),s.put(r)}})}),b=o.curry(function(e,t,n,r){return e.gun.get(u.Schema["up"===n?"ThingVotesUp":"ThingVotesDown"].route.reverse({thingId:t})).get(r).put("1")}),O={chatmsg:"chat:",comment:"comments:"},S=o.curry(function(e,t,n){if(n.topic||n.opId)if(!n.opId||n.topic){var r=e.gun.get(u.Schema.Thing.route.reverse({thingId:t})),o=l(c.ThingSet.dayStr(n.timestamp).split("/"),3),i=o[0],a=o[1],p=o[2],f=O[n.kind]||"",d=f+n.topic.toLowerCase().trim(),g=e.gun.get(u.Schema.Topic.route.reverse({topicName:d})),h=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:d,year:i,month:a,day:p}));if(!n.skipAll&&"all"!==n.topic){var m="".concat(f,"all"),y=e.gun.get(u.Schema.Topic.route.reverse({topicName:m})),v=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:m,year:i,month:a,day:p}));y.set(r),v.set(r)}if("submission"===n.kind){var b=n.url?(0,s.parse)(n.url):{},P=(n.url?(b.host||b.scheme||"").replace(/^www\./,""):"self.".concat(n.topic)).toLowerCase();if(e.gun.get(u.Schema.Domain.route.reverse({domainName:P})).set(r),n.url)e.gun.get(u.Schema.URL.route.reverse({url:n.url})).set(r)}if(n.opId)e.gun.get(u.Schema.ThingAllComments.route.reverse({thingId:n.opId})).set(r);if(n.replyToId||n.opId)e.gun.get(u.Schema.ThingComments.route.reverse({thingId:n.replyToId||n.opId})).set(r);g.set(r),h.set(r)}else e.gun.get(u.Schema.Thing.route.reverse({thingId:n.opId})).get("data").on(function(r){r&&(S(e,t,{...n,topic:r.topic||"all"}),this.off())})}),P={soulToId:f,soulsToIds:d,put:g,submit:h,comment:m,chat:y,writePage:v,vote:b,index:S};t.Thing=P},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=(r=n(19))&&r.__esModule?r:{default:r};var a=o.compose(o.sortBy(o.identity),o.filter(o.identity),o.map(o.trim),o.split("+"),o.toLower,o.trim,o.defaultTo("")),s={splitDomains:a,splitTopics:o.compose(o.ifElse(o.prop("length"),o.identity,o.always(["all"])),a),withRoute:function(e){return o.assoc("route",new i.default(e.path),e)}};t.Path=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Constants=void 0;var r={COMMAND_RE:/^ {4}~/,PREFIX:"nab",SOUL_DELIMETER:"|~~|",LISTING_SIZE:1e3,MAX_HASH_SIZE:64,MAX_POW_NONCE_SIZE:64,MAX_TOPIC_SIZE:42,MAX_AUTHOR_ALIAS_SIZE:256,MAX_AUTHOR_ID_SIZE:128,MAX_URL_SIZE:2048,MAX_DOMAIN_SIZE:256,MAX_THING_KIND_SIZE:16,MAX_THING_TITLE_SIZE:300,MAX_THING_BODY_SIZE:5e4,MAX_LISTING_IDS_SIZE:5e4,MAX_LISTING_SOURCE_SIZE:5e4,MAX_LISTING_TABS_SIZE:5e3,MAX_LISTING_SOUL_PREFIX_SIZE:42,MAX_LISTING_SOUL_IDENTIFIER_SIZE:128,MAX_LISTING_SOUL_SORT_SIZE:16,MAX_LISTING_SOUL_TYPE_SIZE:42,MAX_LISTING_SOUL_KIND_SIZE:16,DEFAULT_INDEXER:"CEyKrDd1xyPXpWSV00MgvnZY2VJLHXgzCvhMeDwKTYA.yjSq0DyXzzhB_ZXr_DzfJgij3tXU0-3t0Q5bJAtZpj8",DEV_INDEXER:"l2nSedlSlvomTqCYhmPnANoQLXe4sj5rR2OrC7YqPpU.zimaWwdlfyTrVITgwWoDVdbJQKReOTqV5zNjTRc-yQA"};t.Constants=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(8),a=n(3);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function u(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function c(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var p,l,f=[0,1,2,3],d=f[0],g=f[1],h=f[2],m=r.map(r.prop(g)),y=r.map(r.slice(1,3)),v=r.propOr("","source"),b=r.curry(function(e,t){return"".concat(i.Constants.PREFIX).concat(t,"@~").concat(e,".")}),O=r.curry(function(e,t){return r.compose(r.ifElse(r.prop("length"),r.insert(0,parseInt(t,10)),r.always(null)),function(e){return e[1]=parseFloat(e[1]),e},r.map(r.trim),r.split(","),r.propOr("","".concat(t)))(e)}),S=r.compose(r.filter(r.compose(function(e){return!(0!==e&&!e)},parseInt)),r.keys),P=function(e){return r.compose(r.map(O(e)),S)(e)},I=r.compose(m,P),w=r.sortWith([r.ascend(r.compose(r.cond([[r.isNil,r.always(1/0)],[r.T,parseFloat]]),r.prop(h)))]),j=r.compose(r.map(r.prop(g)),w,r.filter(r.identity),P),T=r.addIndex(r.map)(function(e,t){return[t].concat(c(e))}),_=(p=regeneratorRuntime.mark(function e(t){var n,o,i,a,u,c,p,l,f,m,y,v,b,S,P,I,j,T,_,L,A,D,M,x,E,C,N,q,k,R,$,F,X,V,Z,G,Q,U,H,K,z,B,W,Y=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=Y.length>1&&void 0!==Y[1]?Y[1]:[],o=Y.length>2&&void 0!==Y[2]?Y[2]:[],i=Y.length>3&&void 0!==Y[3]?Y[3]:{},a=i.maxSize,u=void 0===a?1e3:a,c=r.indexBy(r.identity,o),p={},l={},f=[],m={},y=[],v=0,e.t0=regeneratorRuntime.keys(t||{});case 11:if((e.t1=e.t0()).done){e.next=25;break}if(b=e.t1.value,(S=parseInt(b,10))||0===S){e.next=16;break}return e.abrupt("continue",11);case 16:P=O(t,b)||[S,null,null],I=s(P,3),j=I[0],T=I[1],_=void 0===T?null:T,L=I[2],A=void 0===L?null:L,P[h]=null===A?null:parseFloat(A),_&&c[_]&&(P[g]=P[h]=null),_&&(p[_]=P),P[g]?f.push(P):y.push(P),j>v&&(v=j),e.next=11;break;case 25:D=0;case 26:if(!(D<n.length)){e.next=35;break}if(M=n[D]||[null,null],x=s(M,2),E=x[0],C=x[1],E){e.next=30;break}return e.abrupt("continue",32);case 30:(N=p[E])?N[h]!==C&&(N[h]=C,m[E]=!0):(q=[null,E,C],f.push(q));case 32:D++,e.next=26;break;case 35:for(k=w(f),R=u?k.slice(0,u):k,$=u?k.slice(u,k.length):[],F=r.filter(function(e){return null===e[d]},R),y=y.concat(r.filter(function(e){return null!==e[d]},$)).reverse(),X=0;X<R.length;X++)V=R[X][g],Z=R[X][d],G=R[X][h],null!==Z&&m[V]&&(l["".concat(Z)]=[V,G].join(","));for(Q=[];F.length;)U=F.pop(),H=y.pop(),K=s(H||[null],1),null===(z=K[0])&&(z=parseInt(v,10)+Q.length+1,Q.push(z)),l["".concat(z)]=[U[g],U[h]].join(",");for(;y.length;)(B=y.pop())&&!B[g]&&(W="".concat(B[d]),null!==t[W]&&(l[W]=null,console.log("nulling",W,t[W])));return e.abrupt("return",r.keys(l).length?l:null);case 45:case"end":return e.stop()}},e,this)}),l=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=p.apply(e,t);function i(e){u(o,n,r,i,a,"next",e)}function a(e){u(o,n,r,i,a,"throw",e)}i(void 0)})},function(e){return l.apply(this,arguments)}),L=r.compose(r.uniqBy(r.prop(g)),w,r.reduce(r.concat,[]),r.map(P)),A=(0,o.query)(function(e,t){return Promise.all(r.map(e.get,t)).then(L)}),D=(0,o.query)(function(e,t,n){var r=(n||{}).indexer,o=void 0===r?a.Config.indexer:r;return console.log("ListingNode.read",t),A(e,[b(o,t)]).then(m)},"listingRows"),M=(0,o.query)(function(e,t){return t?e.get(t):(0,o.resolve)(null)},"listing"),x={POS_IDX:d,POS_ID:g,POS_VAL:h,source:v,get:M,getRow:O,itemKeys:S,rows:P,ids:I,rowsToIds:m,rowsToItems:y,itemsToRows:T,sortRows:w,sortedIds:j,soulFromPath:b,rowsFromSouls:A,read:D,diff:_,categorizeDiff:function(e,t){for(var n=S(r.mergeLeft(e,t)),o=[],i=[],a=0;a<n.length;a++){var u=n[a],c=s(O(e,u)||[],2),p=(c[0],c[1]),l=s(O(t,u),2),f=(l[0],l[1]);p!==f&&(p&&o.push(p),f&&i.push(f))}return[o,i]},unionRows:L};t.ListingNode=x},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GunNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));var o=r.pathOr("",["_","#"]),i=r.pathOr({},["_",">"]);var a={soul:o,state:i,latest:r.compose(r.last,r.sortBy(r.identity),r.values,i),edges:r.compose(r.map(r.prop("#")),r.values),decodeSEA:function(e){var t=e?{...e}:e,n=r.path(["_","#"],t);return n&&Gun.SEA&&-1!==n.indexOf("~")?(r.without(["_"],r.keys(t)).forEach(function(r){Gun.SEA.verify(Gun.SEA.opt.pack(e[r],r,e,n),!1,function(n){return t[r]=Gun.SEA.opt.unpack(n,r,e)})}),t):e}};t.GunNode=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingFilter=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(8),i=n(4),a=n(2),s=n(6),u=n(9),c=n(12);function p(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function l(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){p(i,r,o,a,s,"next",e)}function s(e){p(i,r,o,a,s,"throw",e)}a(void 0)})}}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var d,g=function(e){return r.compose(parseInt,r.path(e))},h={fromDefinition:function(e){var t=e.filters,n=e.voteFilters,i=e.isPresent,a=[],u=[],c=function(){return a.push(r.compose.apply(r,arguments))},p=function(){return u.push(r.compose.apply(r,arguments))};t.allow.aliases.length&&c(function(e){return!!i(["alias",e])},r.path(["data","author"])),t.allow.authors.length&&c(function(e){return!!i(["author",e])},r.path(["data","authorId"])),t.allow.domains.length&&c(function(e){return!!i(["domain",e])},s.ThingDataNode.domain),t.allow.topics.length&&!r.find(r.compose(r.identical("all"),r.last,r.split(":")),t.allow.topics)&&c(function(e){return!!i(["topic",e])},r.path(["data","topic"])),t.allow.kinds.length&&c(function(e){return!!i(["kind",e])},r.path(["data","kind"])),"commands"===t.allow.type&&c(r.compose(r.test(o.Constants.COMMAND_RE),r.path(["data","body"]))),t.deny.aliases.length&&c(function(e){return!i(["ban","alias",e])},r.path(["data","author"])),t.deny.authors.length&&c(function(e){return!i(["ban","author",e])},r.path(["data","authorId"])),t.deny.domains.length&&c(function(e){return!e||!i(["ban","domain",e])},s.ThingDataNode.domain),t.deny.topics.length&&c(function(e){return!i(["ban","topic",e])},r.path(["data","topic"])),t.deny.anon&&c(r.path(["data","authorId"])),t.deny.signed&&c(r.compose(function(e){return!e},r.path(["data","authorId"]))),null!==n.upsMin&&p(r.lte(n.upsMin),g(["votes","up"])),null!==n.upsMax&&p(r.gte(n.upsMax),g(["votes","up"])),null!==n.downsMin&&p(r.lte(n.downsMin),g(["votes","down"])),null!==n.downsMax&&p(r.gte(n.downsMax),g(["votes","down"])),null!==n.scoreMin&&p(r.lte(n.scoreMin),g(["votes","score"])),null!==n.scoreMax&&p(r.gte(n.scoreMax),g(["votes","score"])),t.deny.tags.length&&p(function(e){var n=r.path(["votes","commands"],e)||{};return!t.deny.tags.find(function(e){var t=f(e,2),o=t[0],i=t[1];return!!r.path([i,"tag",o],n)})});var l=function(e){return!a.find(function(t){return!t(e)})},d=function(e){return!u.find(function(t){return!t(e)})};return{thingFilter:function(e){return l(e)&&d(e)},contentFilter:l,voteFilter:d}},getFilteredIds:(d=l(regeneratorRuntime.mark(function e(t,n){var o,i,a,s,c,p,f,d,g,h,m=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o=m.length>2&&void 0!==m[2]?m[2]:{},i=o.limit,a=void 0===i?25:i,s=o.count,c=void 0===s?0:s,p=o.after,void 0===p?null:p,f=o.filterFn,d=n.slice(),g=[],h=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30;return Promise.all(r.map((e=l(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!0,!f){e.next=5;break}return e.next=4,f(t[u.ListingNode.POS_ID]);case 4:n=e.sent;case 5:n&&g.push(t);case 6:case"end":return e.stop()}},e,this)})),function(t){return e.apply(this,arguments)}),d.splice(c,t)))};case 4:if(!d.length){e.next=11;break}return e.next=7,h();case 7:if(!(a&&g.length>=a)){e.next=9;break}return e.abrupt("break",11);case 9:e.next=4;break;case 11:return e.abrupt("return",r.compose(r.map(r.prop(u.ListingNode.POS_ID)),a?r.slice(0,a):r.identity,r.sortBy(r.prop(u.ListingNode.POS_VAL)))(g));case 12:case"end":return e.stop()}},e,this)})),function(e,t){return d.apply(this,arguments)}),thingFilter:r.curry(function(e,t,n){return a.Query.thingMeta(e,{tabulator:t.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:n}),scores:c.ListingDataSource.needsScores(t),data:c.ListingDataSource.needsData(t)}).then(t.thingFilter)})};t.ListingFilter=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDataSource=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(6),a=n(4),s=n(2),u=n(13);var c=(0,o.query)(function(e,t,n){return o.Promise.all(r.map(function(t){return u.ListingSort.itemFromSoul(e,t,n)},t)).then(u.ListingSort.sortItems)}),p=(0,o.query)(function(e,t,n){return o.Promise.all(r.map(e.get,t)).then(r.reduce(r.mergeRight,{})).then(i.ThingSet.souls).then(function(t){return c(e,t,n)})}),l=function(e){var t=e.sort,n=r.path(["filters","allow","topics"],e)||[];return{listingPaths:r.map(function(e){return"/t/".concat(e,"/").concat(t)},n),query:function(r){return s.Query.multiTopic(r,{topics:n,sort:t}).then(function(t){return c(r,t,e)})}}},f={listing:function(e){var t=r.pathOr([],["filters","allow","listings"],e),n=e.sort;return{listingPaths:r.map(function(e){return"".concat(e,"/").concat(n)},t)}},replies:function(e){var t=e.sort,n=r.path(["filters","allow","repliesTo"],e),o=r.path(["filters","allow","type"],e);return{listingPaths:["/user/".concat(n,"/replies/").concat(o,"/").concat(t)],query:function(t){return s.Query.repliesToAuthor(t,{type:o,repliesToAuthorId:n,indexer:e.indexer}).then(function(n){return c(t,n,e)})}}},op:function(e){var t=e.sort,n=r.path(["filters","allow","ops"],e);n.length||l(e);return{listingPaths:r.map(function(e){return"/things/".concat(e,"/comments/").concat(t)},n),query:function(t){return s.Query.multiSubmission(t,{submissionIds:n}).then(function(n){return c(t,n,e)})}}},curator:function(e){var t=e.sort,n=r.prop("curators",e)||[];if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/user/".concat(e,"/commented/").concat(t)},n),query:function(t){return s.Query.curate(t,n,!0).then(function(e){return e.map(function(e){return a.Schema.Thing.route.reverse({thingId:e})})}).then(function(n){return c(t,n,e)})}}},author:function(e){var t=e.sort,n=r.path(["filters","allow","authors"],e),o=r.path(["filters","allow","type"],e);if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/user/".concat(e,"/").concat(o,"/").concat(t)},n),query:function(t){return s.Query.multiAuthor(t,{type:o,authorIds:n}).then(function(n){return c(t,n,e)})}}},domain:function(e){var t=e.sort,n=r.path(["filters","allow","domains"],e)||[];if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/domain/".concat(e,"/").concat(t)},n),query:function(r){return s.Query.multiDomain(r,{domains:n,sort:t}).then(function(t){return c(r,t,e)})}}},topic:l},d=r.keys(f),g={fromDefinition:function(e){var t,n=(t=e,r.find(t.isPresent,d)||"topic");return r.mergeLeft({name:n},f[n](e))},sources:f,needsScores:function(e){return!!r.find(e.isPresent,["sort hot","sort top","sort best","sort controversial","ups","downs","score","can remove"])},needsData:function(e){return!!r.find(e.isPresent,["topic","domain","author","unique by content","kind","type","require signed","require anon","alias","ban domain","ban topic","ban author","ban alias"])},itemsFromThingSets:p,itemsFromThingSouls:c};t.ListingDataSource=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSort=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(6),s=n(2);var u=r.map(r.prop(0)),c=r.sortWith(r.prop(1)),p=function(e){return(0,o.query)(function(t,n,a){return a.isIdSticky(n)?(0,o.resolve)(-1/0):r.contains(n,a.filters.allow.ops)?(0,o.resolve)(-1/0):s.Query.thingMeta(t,{tabulator:a.tabulator,scores:!0,thingSoul:i.Schema.Thing.route.reverse({thingId:n})}).then(function(t){return e(t,a)})})},l=function(e){return(0,o.query)(function(t,n,r){return s.Query.thingMeta(t,{tabulator:r.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:n})}).then(e)})},f={new:l(r.compose(r.multiply(-1),function(e){return e||(new Date).getTime()},r.prop("timestamp"))),old:l(r.prop("timestamp")),active:p(function(e){var t=e.timestamp;return-1*(e.lastActive||t)}),top:p(r.compose(function(e){return-1*parseInt(e,10)},r.pathOr(0,["votes","score"]))),comments:p(r.compose(function(e){return-1*parseFloat(e,10)},r.pathOr(0,["votes","comment"]))),discussed:p(function(e){var t=r.prop("timestamp",e),n=parseInt(r.pathOr(0,["votes","comment"],e),10),o=t/1e3-1134028003,i=Math.log10(Math.max(Math.abs(n),1));return n?-1*(i+o/45e3):1e9-o}),hot:p(function(e){var t=r.prop("timestamp",e),n=parseInt(r.pathOr(0,["votes","score"],e),10),o=t/1e3-1134028003,i=0;return n>0?i=1:n<0&&(i=-1),-1*(i*Math.log10(Math.max(Math.abs(n),1))+o/45e3)}),best:p(function(e){var t=parseInt(r.pathOr(0,["votes","up"],e),10),n=t+parseInt(r.pathOr(0,["votes","down"],e),10);if(0===n)return 0;var o=1.281551565545,i=t/n;return(i+1/(2*n)*o*o-o*Math.sqrt(i*(1-i)/n+o*o/(4*n*n)))/(1+1/n*o*o)*-1}),controversial:p(function(e){var t=parseInt(r.pathOr(0,["votes","up"],e),10),n=parseInt(r.pathOr(0,["votes","down"],e),10);if(t<=0||n<=0)return 0;var o=t+n,i=t>n?n/t:t/n;return-1*Math.pow(o,i)})},d=(0,o.query)(function(e,t,n){return(f[n.sort]||f.new)(t,n).then(function(e){return[t,e]})}),g=(0,o.query)(function(e,t,n){return(0,o.all)(r.map(function(t){return d(e,t,n)},t))}),h=(0,o.query)(function(e,t,n){return(0,o.all)(r.map(e.get,t)).then(r.pipe(a.ThingSet.union,a.ThingSet.ids,function(t){return g(e,t,n)})).then(c)}),m={POS_ID:0,POS_VAL:1,sorts:f,isValidSort:function(e){return!!f[e]},toItem:d,toItems:g,toIds:u,sortItems:c,fromThingSets:h};t.ListingSort=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TopicListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(2),s=n(7),u=n(5);function c(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var p=["hot","new","discussed","controversial","top","firehose"],l=(0,o.query)(function(e){return a.Query.wikiPage(e,i.Config.indexer,"listing:topic:sidebar")}),f=(0,o.query)(function(e,t){var n=t.topic,o=t.sort,a=s.Path.splitTopics(n),l="all"===a[0]?"whatever":a[0];return u.ListingSpec.getSource(e,i.Config.indexer,"listing:topic",["name ".concat(n),"submit to ".concat(l),"sort ".concat(o),-1===n.indexOf(":")?"kind submission":""].concat(c(r.map(function(e){return"topic ".concat(e)},a)),c(r.map(function(e){return"tab ".concat(e," /t/").concat(n,"/").concat(e)},p))).join("\n"))}),d=(0,o.query)(function(e,t){return f(e,t).then(u.ListingSpec.fromSource)}),g=s.Path.withRoute({path:"/t/:topic/:sort",getSidebar:l,getSource:f,getSpec:d});t.TopicListing=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingOracle=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(10),i=n(4),a=n(6),s=n(9),u=n(13);function c(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function p(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){c(i,r,o,a,s,"next",e)}function s(e){c(i,r,o,a,s,"throw",e)}a(void 0)})}}var l,f,d=(l=p(regeneratorRuntime.mark(function e(t,n,r,o){var i,a,c,p,l,f=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(i=f.length>4&&void 0!==f[4]?f[4]:[],a=f.length>5&&void 0!==f[5]?f[5]:[],i.length||a.length){e.next=4;break}return e.abrupt("return");case 4:return e.next=6,t.newScope().get(n.soul);case 6:return c=e.sent,e.next=9,u.ListingSort.toItems(r,i,o);case 9:p=e.sent,(l=s.ListingNode.diff(c,p,a))&&console.log("CHANGES",n.soul,l),l&&n.write(l);case 13:case"end":return e.stop()}},e,this)})),function(e,t,n,r){return l.apply(this,arguments)}),g=(f=p(regeneratorRuntime.mark(function e(t,n,s){var u,c,p,l,f,g,h,m,y;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return u=s.updatedSoul,c=s.diff,p=[],l=r.pathOr("new",["match","sort"],n),f=t.newScope(),g=i.Schema.ThingVoteCounts.route.match(u)||{},h=g.thingId,m=r.equals(n.match.thingId||null),h&&p.push(h),p=r.concat(p,a.ThingSet.ids(o.GunNode.decodeSEA(c))),e.next=10,d(t,n,f,l,p,[],m);case 10:for(y in f.getAccesses())t.listen(y,n.soul);case 11:case"end":return e.stop()}},e,this)})),function(e,t,n){return f.apply(this,arguments)}),h={updateListing:d,onPut:g};t.ListingOracle=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validation=t.suppressor=void 0;var r,o=c(n(0)),i=(r=n(17))&&r.__esModule?r:{default:r},a=n(28),s=c(n(18)),u=n(4);function c(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=function(e,t){var n=o.path(["data","#"],t),r=o.without(["comments","allcomments","votesup","votesdown"],o.keys(o.path(["_",">"],t))).map(function(e){return o.path(["_",">",e],t)}).sort().pop(),i=(e.ThingData.route.match(n)||{}).thingId,a=o.prop("id",t);return a&&a===i&&r&&r<1543102814945},f=function(e,t){var n=o.prop("id",t);return n&&n===(0,i.default)({authorId:(o.path(["author","#"],t)||"").substr(1)||void 0,timestamp:parseInt(o.prop("timestamp",t),10),kind:o.prop("kind",t),topic:o.prop("topicName",u.Schema.Topic.route.match(o.path(["topic","#"],t))),opId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["op","#"],t))),replyToId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["replyTo","#"],t))),originalHash:o.prop("originalHash",t)})},d=function(e,t){var n=(o.path(["author","#"],t)||"").substr(1)||void 0,r=o.prop("authorId",u.Schema.ThingDataSigned.route.match(o.path(["data","#"],t)));return n&&n===r},g=function(e,t){var n=o.prop("originalHash",t),r=o.prop("thingId",u.Schema.ThingData.route.match(o.path(["data","#"],t)));return r&&r===n},h=function(e){return function(t,n,r,i,a){var s=(u.Schema.Thing.route.match(o.path(["_","#"],a)||"")||{}).thingId,c=u.Schema[t].route.match(o.prop("#",n)||"").thingId;return!(!s||s!==c)&&e.compile({$ref:"schema.json#/definitions/".concat(t,"Edge")})(n)}},m=function(e,t){var n=t||{},r=(n._,p(n,["_"]));r.timestamp=parseFloat(r.timestamp,10);var a=(u.Schema.ThingData.route.match(o.path(["_","#"],t)||"")||{}).thingId;return a&&a===(0,i.default)(r)},y=function(e,t,n,r){var o,i=t||{},a=i.algorithm,s=void 0===a?"argon2d":a,u=i.config,c=void 0===u?{}:u,p=Buffer.hasOwnProperty("from")?Buffer.from(r,"hex"):new Buffer(r,"hex"),l=Buffer.hasOwnProperty("from")?Buffer.from(p,"hex"):new Buffer(p,"hex"),f=e.hash(n,{salt:l,hashLength:c.hashLength,timeCost:c.timeCost,memoryCost:c.memoryCost,parallelism:c.parallelism,raw:!0,type:e[s]}),d=0;for(o=0;o<=c.complexity-8;o+=8,d++)if(0!==f[d])return!1;var g=255<<8+o-c.complexity;return 0==(f[d]&g)},v=function(e,t){var r=n(29);if(!r)return!0;var i=(e||{}).algorithm,a=void 0===i?"argon2d":i,s=o.path(["_","#"],t);if("argon2d"!==a)throw new Error("Only argon2 supported for vote hashes");return o.without(["_"],o.keys(t)).forEach(function(n){y(r,e,s,n)||(console.log("invalid vote",s,n),delete t[n])}),!0},b=o.compose(function(e){return e.addKeyword("isLegacyThing",{validate:l}),e.addKeyword("thingHashMatchesSoul",{validate:f}),e.addKeyword("signedThingDataMatchesThing",{validate:d}),e.addKeyword("thingDataMatchesOriginalHash",{validate:g}),e.addKeyword("thingRelatedEdge",{validate:h(e)}),e.addKeyword("thingDataHashMatchesSoul",{validate:m}),e.addKeyword("keysAreProofsOfWork",{validate:v,modifying:!0}),e},s.initAjv),O=(0,a.createSuppressor)({definitions:u.Schema.definitions,init:b});t.suppressor=O;var S=o.curry(function(e,t){return t.on("in",function(t){var n=this,r=t._;(delete t._,"ping"in t||"leech"in t)||(t.put&&!o.keys(t.put).length||(e.config.disableValidation?Promise.resolve(t):O.validate(t)).then(function(e){return e?(t._=r,n.to.next(t)):console.log("msg didn't validate",t)}).catch(function(e){return console.error("validate err",t,e.stack||e)}))})}),P={isLegacyThing:l,thingHashMatchesSoul:f,signedThingDataMatches:d,thingDataMatchesOriginalHash:g,getIsThingRelatedEdge:h,thingDataHashMatches:m,isVoteValid:y,keysAreProofsOfWork:v,initAjv:b,suppressor:O,gunWireInput:S};t.Validation=P},function(e,t){e.exports=n},function(e,t){e.exports=r},function(e,t){e.exports=o},function(e,t){e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentCommand=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(8);function i(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var a=r.compose(r.map(r.trim),r.split(" "),r.replace(o.Constants.COMMAND_RE,""),r.propOr("",0),r.split("\n")),s={tokenize:a,map:function(e){return r.reduce(function(t,n){var s=r.path([n,"body"],e),u=r.path([n,"authorId"],e)||"anon",c=parseFloat(r.path([n,"timestamp"],e));if(!r.test(o.Constants.COMMAND_RE,s))return t;var p=[u].concat(i(a(s)),[n]);return r.assocPath(p,c||0,t)},{},r.keys(e))}};t.CommentCommand=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingType=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(35),i=n(36),a=n(37),s=n(14),u=n(38),c=n(39),p=n(40),l=n(41),f=n(42);var d=[o.ChatListing,i.FirehoseListing,s.TopicListing,u.DomainListing,c.CommentListing,p.SpaceListing,l.InboxListing,a.CommentedListing,f.ProfileListing],g={...d,types:d,fromPath:function(e){for(var t,n=0;n<d.length;n++)if(t=d[n].route.match(e))return r.assoc("match",t,d[n]);return null}};t.ListingType=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDefinition=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(24),i=n(3);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s={fromSource:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=o.Tokenizer.tokenize(e),u={...s},c=s.isPresent,p=s.getValue,l=s.getValues,f=s.getValueChain,d=s.getPairs,g=a(f("sourced from page"),2),h=g[0];u.fromPageAuthor=void 0===h?t:h;var m=g[1];return u.fromPageName=void 0===m?n?"space:".concat(n):void 0:m,u.displayName=s.getValue("name")||n,u.indexer=p("tabulator")||i.Config.indexer,u.tabulator=p("tabulator")||u.indexer,u.tabs=d("tab"),u.sort=p("sort"),u.uniqueByContent=!!c("unique by content"),u.curators=l("curator"),u.moderators=l("mod"),u.includeRanks=!!c("show ranks"),u.stickyIds=l("sticky"),u.isIdSticky=function(e){return!!s.isPresent(["sticky",e])},u.submitTopics=l("submit to"),u.submitTopic=p("submit to"),u.chatTopic=p("chat in"),t&&n&&(u.spaceName=n,u.owner=t,u.useForComments=!s.isPresent("comments leave space"),u.path="/user/".concat(t,"/spaces/").concat(n),u.defaultTab=s.getValue("tab"),u.defaultTabPath=u.defaultTab?s.getValue(["tab",u.defaultTab]):null),u.filters={functions:[],allow:{repliesTo:p("replies to author"),type:p("type"),ops:l("op"),aliases:l("alias"),authors:l("author"),domains:l("domain"),topics:l("topic"),listings:l("listing"),kinds:l("kind"),anon:!c("require signed"),signed:!c("require anon")},deny:{aliases:l("ban alias"),authors:l("ban author"),domains:l("ban domain"),topics:l("ban topic"),anon:!!c("require signed"),signed:!!c("require anon"),tags:d("can remove")}},u.voteFilters={functions:[],upsMin:parseInt(p("ups above"),10)||null,upsMax:parseInt(p("ups below"),10)||null,downsMin:parseInt(p("downs above"),10)||null,downsMax:parseInt(p("downs below"),10)||null,scoreMin:parseInt(p("score above"),10)||null,scoreMax:parseInt(p("score below"),10)||null},u.censors=r.uniq(r.map(r.prop(1),u.filters.deny.tags)),u}};t.ListingDefinition=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tokenizer=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i={tokenize:function(e){var t=(e||"").split("\n").reduce(function(e,t){var n=t.trim().split(" ").map(r.trim).filter(function(e){return e});return n.length?r.assocPath(n,{},e):e},{}),n=function(e){var n=e;return"string"==typeof e&&(n=e.split(" ")),n&&r.path(n,t)},i=function(e){return r.keysIn(n(e))},a=function(e){return i(e)[0]||null};return{source:e,isPresent:n,getValue:a,getValues:i,getLastValue:function(e){return i(e).pop()||null},getValueChain:function(e){for(var t="string"==typeof e?e.split(" "):e,n=[],r=e;r;)(r=a([].concat(o(t),n)))&&n.push(r);return n},getPairs:function(e){var t="string"==typeof e?e.split(" "):e;return i(t).reduce(function(e,n){var r=a([].concat(o(t),[n]));return[].concat(o(e),[[n,r]])},[])}}}};t.Tokenizer=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceSpec=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(24),s=n(2),u=n(5);var c=["hot","new","discussed","controversial","top"],p=function(e){return"space:".concat(e)},l=r.curry(function(e,t,n){var r=[n||""],o=a.Tokenizer.tokenize(n);o.getValue("tab")||c.map(function(n){return r.push("tab ".concat(n," /user/").concat(e,"/spaces/").concat(t,"/").concat(n))});var s=o.getValue("indexer");return s||(r.push("indexer ".concat(i.Config.indexer)),s=i.Config.indexer),o.getValue("tabulator")||r.push("tabulator ".concat(s)),r.join("\n")}),f=(0,o.query)(function(e,t,n,r){return u.ListingSpec.getSource(e,t,p(n),r).then(l(t,n))}),d=(0,o.query)(function(e,t,n,r){return f(e,t,n,r).then(function(e){return u.ListingSpec.fromSource(e,t,n)})}),g=r.compose(r.sortBy(r.identity),r.map(r.replace(/^space:/,"")),r.filter(r.compose(r.prop("length"),r.match(/^space:[^:]*$/))),r.keys),h=(0,o.query)(function(e,t){return s.Query.userPages(e,t).then(g)}),m={configPageName:p,sidebarPageName:function(e){return"space:".concat(e,":sidebar")},nodeToSpaceNames:g,userSpaceNames:h,tabs:c,getSource:f,getSpec:d};t.SpaceSpec=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Peer",{enumerable:!0,get:function(){return r.Peer}}),Object.defineProperty(t,"Config",{enumerable:!0,get:function(){return o.Config}}),Object.defineProperty(t,"Constants",{enumerable:!0,get:function(){return i.Constants}}),Object.defineProperty(t,"CommentCommand",{enumerable:!0,get:function(){return a.CommentCommand}}),Object.defineProperty(t,"Listing",{enumerable:!0,get:function(){return s.Listing}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return s.SpaceSpec}}),Object.defineProperty(t,"Query",{enumerable:!0,get:function(){return u.Query}}),Object.defineProperty(t,"Schema",{enumerable:!0,get:function(){return c.Schema}}),Object.defineProperty(t,"Thing",{enumerable:!0,get:function(){return p.Thing}}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return p.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return p.ThingDataNode}}),Object.defineProperty(t,"Validation",{enumerable:!0,get:function(){return l.Validation}}),Object.defineProperty(t,"Promise",{enumerable:!0,get:function(){return f.Promise}}),Object.defineProperty(t,"Tabulator",{enumerable:!0,get:function(){return d.Tabulator}}),t.default=void 0;var r=n(27),o=n(3),i=n(8),a=n(21),s=n(33),u=n(2),c=n(4),p=n(6),l=n(16),f=n(1),d=n(43),g=r.Peer.init;t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Peer=void 0;var r=n(16),o=n(2),i=n(6),a=n(32);function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u={init:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t||{},u=n.leech,c=n.disableValidation,p=n.noGun,l=n.localStorage,f=n.persist,d=s(n,["leech","disableValidation","noGun","localStorage","persist"]),g={config:t};if(!p){var h={localStorage:!!l,radisk:!!f,...d};f&&(h.localStorage=!1),c||e.on("opt",r.Validation.gunWireInput(g)),h.storeFn&&(h.store=h.storeFn(h)),g.gun=e(h),h.localStorage&&g.gun.on("localStorage:error",function(e){return e.retry({})}),u&&g.gun._.on("out",{leech:!0})}return g.newScope=function(e){return o.Query.createScope(g,e)},g.onLogin=a.Authentication.onLogin(g),g.signup=a.Authentication.signup(g),g.login=a.Authentication.login(g),g.logout=function(){return a.Authentication.logout(g)},g.isLoggedIn=function(){return a.Authentication.isLoggedIn(g)},g.submit=i.Thing.submit(g),g.comment=i.Thing.comment(g),g.chat=i.Thing.chat(g),g.writePage=i.Thing.writePage(g),g.vote=i.Thing.vote(g),g.queries=o.Query,g}};t.Peer=u},function(e,t){e.exports=a},function(e,t){e.exports=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingSet=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(4),i=n(10);var a=i.GunNode.edges;var s={ids:r.compose(r.filter(r.identity),r.map(r.compose(r.prop("thingId"),o.Schema.Thing.route.match.bind(o.Schema.Thing.route))),i.GunNode.edges),union:r.compose(r.dissoc("_"),r.reduce(r.mergeRight,{})),souls:a,dayStr:function(e){var t=new Date(e||(new Date).getTime()),n=t.getUTCFullYear(),r=t.getUTCMonth()+1,o=t.getUTCDate();return"".concat(n,"/").concat(r,"/").concat(o)}};t.ThingSet=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingDataNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(20);var i=r.propOr("","body"),a=r.propOr("","url"),s={body:i,domain:r.compose(function(e){if(!e)return"";var t=(0,o.parse)(e);return(t.host||t.scheme||"").replace(/^www\./,"")},a)};t.ThingDataNode=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Authentication=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1);var i={signup:r.curry(function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return new o.Promise(function(i,a){if(e&&e.gun&&e.gun.user){var s=e.gun.user();o.Promise.resolve(s.create(t,n,function(r){r.err?(a(r.err),s.leave(),e.gun.user().leave()):e.login(t,n).then(i)},r))}else a("SEA is not loaded")})}),login:r.curry(function(e,t,n){return new o.Promise(function(r,o){e&&e.gun&&e.gun.user?e.gun.user().auth(t,n,function(t){return t.err?o(t.err):r(e.gun.user().is)}):o("SEA is not loaded")}).then(function(t){return e._onLogin&&e._onLogin(t),t})}),logout:function(e){return e.gun.user().leave()},isLoggedIn:function(e){return e.gun&&e.gun.user&&e.user().is},onLogin:r.curry(function(e,t){return e._onLogin=t})};t.Authentication=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ListingQuery",{enumerable:!0,get:function(){return r.ListingQuery}}),Object.defineProperty(t,"ListingNode",{enumerable:!0,get:function(){return o.ListingNode}}),Object.defineProperty(t,"ListingSpec",{enumerable:!0,get:function(){return i.ListingSpec}}),Object.defineProperty(t,"ListingSort",{enumerable:!0,get:function(){return a.ListingSort}}),Object.defineProperty(t,"ListingType",{enumerable:!0,get:function(){return s.ListingType}}),Object.defineProperty(t,"ListingDataSource",{enumerable:!0,get:function(){return u.ListingDataSource}}),Object.defineProperty(t,"ListingDefinition",{enumerable:!0,get:function(){return c.ListingDefinition}}),Object.defineProperty(t,"ListingFilter",{enumerable:!0,get:function(){return p.ListingFilter}}),Object.defineProperty(t,"ListingOracle",{enumerable:!0,get:function(){return l.ListingOracle}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return f.SpaceSpec}}),t.Listing=void 0;var r=n(34),o=n(9),i=n(5),a=n(13),s=n(22),u=n(12),c=n(23),p=n(11),l=n(15),f=n(25),d={ListingNode:o.ListingNode,ListingSpec:i.ListingSpec,isValidSort:a.ListingSort.isValidSort,get:o.ListingNode.get,fromSpec:r.ListingQuery.fromSpec,fromPath:r.ListingQuery.fromPath,typeFromPath:s.ListingType.fromPath,sidebarFromPath:r.ListingQuery.sidebarFromPath,nodeFromPath:r.ListingQuery.nodeFromPath};t.Listing=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingQuery=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(9),a=n(11),s=n(22);var u=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=a.ListingFilter.thingFilter(e,t);return t.dataSource.query?t.dataSource.query(e).then(function(t){var o=i.ListingNode.itemsToRows(t);return a.ListingFilter.getFilteredIds(e,o,{...n,filterFn:r})}):(0,o.resolve)([])}),c=(0,o.query)(function(e,t){arguments.length>2&&void 0!==arguments[2]&&arguments[2]}),p=(0,o.query)(function(e,t,n){return u(e,t,n).then(i.ListingNode.serialize(t))}),l=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=a.ListingFilter.thingFilter(e,t),s=r.pathOr([],["dataSource","listingPaths"],t),u=r.map(i.ListingNode.soulFromPath(n.indexer||t.indexer),s);return i.ListingNode.rowsFromSouls(e,u).then(function(t){return a.ListingFilter.getFilteredIds(e,t,{...n,filterFn:o})})}),f=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(n.calculate?c:l)(e,t,n)}),d=(0,o.query)(function(e,t,n){var r=s.ListingType.fromPath(t);return r?r.getSpec(e,r.match).then(function(o){return o.hasIndexer&&!n.calculate?r&&r.read?r.read(e,r.match,n):i.ListingNode.read(e,t,n):f(e,o,n)}):Promise.resolve([])}),g=(0,o.query)(function(e,t,n){var r=s.ListingType.fromPath(t);return r&&r.getSidebar?r.getSidebar(e,r.match):(0,o.resolve)("")}),h=(0,o.query)(function(e,t,n){var r=s.ListingType.fromPath(t);return r?r.getSpec(e,r.match).then(function(t){return p(e,t,n)}):(0,o.resolve)([])}),m={fromSpec:f,fromPath:d,sidebarFromPath:g,calculateRows:u,toNode:p,nodeFromPath:h};t.ListingQuery=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChatListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(2),s=n(7),u=n(5);function c(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var p=n(14).TopicListing.tabs,l=(0,o.query)(function(e,t){t.topic,t.sort;return a.Query.wikiPage(e,i.Config.indexer,"listing:chat:sidebar")}),f=(0,o.query)(function(e,t){var n=t.topic,o=t.sort,a=s.Path.splitTopics(n),l="all"===n?"whatever":a[0]||"whatever",f=a.reduce(function(e,t){return[].concat(c(e),["chat:".concat(t)])},[]);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:chat",["sort new","submit to ".concat(l),"sort ".concat(o),-1===n.indexOf(":")?"kind submission":""].concat(c(r.map(function(e){return"topic ".concat(e)},f)),c(r.map(function(e){return"tab ".concat(e," /t/").concat(n,"/").concat(e)},p))).join("\n"))}),d=(0,o.query)(function(e,t){return f(e,t).then(u.ListingSpec.fromSource)}),g=s.Path.withRoute({path:"/t/:topic/chat",getSidebar:l,getSource:f,getSpec:d});t.ChatListing=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FirehoseListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(2),s=n(7),u=n(5);function c(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var p=n(14).TopicListing.tabs,l=(0,o.query)(function(e){return a.Query.wikiPage(e,i.Config.indexer,"listing:firehose:sidebar")}),f=(0,o.query)(function(e,t){var n=t.topic,o=t.sort,a=s.Path.splitTopics(n),l="all"===n?"whatever":a[0]||"whatever",f=a.reduce(function(e,t){return[].concat(c(e),[t,"chat:".concat(t),"comments:".concat(t)])},[]);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:firehose",["sort new","submit to ".concat(l),"sort ".concat(o),-1===n.indexOf(":")?"kind submission":""].concat(c(r.map(function(e){return"topic ".concat(e)},f)),c(r.map(function(e){return"tab ".concat(e," /t/").concat(n,"/").concat(e)},p))).join("\n"))}),d=(0,o.query)(function(e,t){return f(e,t).then(u.ListingSpec.fromSource)}),g=s.Path.withRoute({tabs:p,path:"/t/:topic/firehose",getSidebar:l,getSource:f,getSpec:d});t.FirehoseListing=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentedListing=void 0;var r=n(1),o=n(3),i=n(2),a=n(7),s=n(5),u=(0,r.query)(function(e){return i.Query.wikiPage(e,o.Config.indexer,"listing:commented:sidebar")}),c=(0,r.query)(function(e,t){var n=t.authorId,r=t.sort;return s.ListingSpec.getSource(e,o.Config.indexer,"listing:commented",["curator ".concat(n),"sort ".concat(r)].join("\n"))}),p=(0,r.query)(function(e,t){return c(e,t).then(s.ListingSpec.fromSource)}),l=a.Path.withRoute({path:"/user/:authorId/commented/:sort",getSidebar:u,getSource:c,getSpec:p});t.CommentedListing=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomainListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(2),s=n(7),u=n(5);function c(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var p=["hot","new","discussed","controversial","top"],l=(0,o.query)(function(e){return a.Query.wikiPage(e,i.Config.indexer,"listing:domain:sidebar")}),f=(0,o.query)(function(e,t){var n=t.domain,o=t.sort,a=s.Path.splitTopics(n);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:domain",["name ".concat(a[0]),"submit to whatever","sort ".concat(o),"kind submission"].concat(c(r.map(function(e){return"domain ".concat(e)},a)),c(r.map(function(e){return"tab ".concat(e," /domain/").concat(n,"/").concat(e)},p))).join("\n"))}),d=(0,o.query)(function(e,t){return f(e,t).then(u.ListingSpec.fromSource)}),g=s.Path.withRoute({path:"/domain/:domain/:sort",tabs:p,getSidebar:l,getSource:f,getSpec:d});t.DomainListing=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentListing=void 0;var r=n(1),o=n(3),i=n(2),a=n(7),s=n(5),u=(0,r.query)(function(e){return i.Query.wikiPage(e,o.Config.indexer,"listing:comments:sidebar")}),c=(0,r.query)(function(e,t){var n=t.thingId,r=t.sort;return s.ListingSpec.getSource(e,o.Config.indexer,"listing:comments",["op ".concat(n),"sort ".concat(r)].join("\n"))}),p=a.Path.withRoute({path:"/things/:thingId/comments/:sort",getSidebar:u,getSpec:c});t.CommentListing=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(4),s=n(10),u=n(2),c=n(7),p=n(9),l=n(11),f=n(15),d=n(25);function g(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var m,y,v=(0,o.query)(function(e,t){var n=t.authorId,r=t.name,o=t.sort;return d.SpaceSpec.getSource(e,n,r,"sort ".concat(o))}),b=(0,o.query)(function(e,t){var n=t.authorId,r=t.name,o=t.sort;return d.SpaceSpec.getSpec(e,n,r,"sort ".concat(o))}),O=(0,o.query)(function(e,t){var n=t.authorId,r=t.name;t.sort;return u.Query.wikiPage(e,n,d.SpaceSpec.sidebarPageName(r))}),S=(0,o.query)(function(e,t,n){var r={authorId:t.authorId,name:t.name,sort:t.sort,indexer:i.Config.indexer},s=[a.Schema.SpaceListing.route.reverse(r)];return(0,o.all)([b(e,t),p.ListingNode.getRowsFromSouls(e,s)]).then(function(t){var r=h(t,2),o=r[0],i=r[1],a=l.ListingFilter.thingFilter(e,o);return l.ListingFilter.getFilteredIds(e,i,{...n,filterFn:a})})}),P=(m=regeneratorRuntime.mark(function e(t,n,o){var i,u,c,l,d,g,m,y,v,O,S,P,I,w,j,T,_,L,A,D;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=o.updatedSoul,u=o.diff,c=o.original,l=o.latest,void 0===l?0:l,d=t.newScope(),g=s.GunNode.decodeSEA(c),m=s.GunNode.decodeSEA(u),y=p.ListingNode.categorizeDiff(m,g),v=h(y,2),O=v[0],S=v[1],e.next=7,b(d,n.match);case 7:return P=e.sent,I=a.Schema.ThingVoteCounts.route.match(i),w=a.Schema.Thing.route.match(i),j=a.Schema.ThingDataSigned.route.match(i)||{},T=j.thingId,_=a.Schema.SEAAuthor.route.match(i),I&&O.push(I.thingId),w&&O.push(w.thingId),T&&T!==P.fromPageId&&O.push(T),e.next=17,f.ListingOracle.updateListing(t,n,d,P,O,S);case 17:for(L in d.getAccesses())t.listen(L,n.soul);if(!(r.prop("size",c)||O.length||S.length||_)){e.next=20;break}return e.abrupt("return");case 20:return console.log("---STANDARD SPACE UPDATE---",n.soul,i),e.next=23,t.newScope().get(n.soul);case 23:A=e.sent,(D=p.ListingNode.itemKeys(A)).length&&n.write({size:0,...D.reduce(function(e,t){return e["".concat(t)]=null,e},{})}),t.work({id:"update:".concat(n.soul),soul:n.soul,method:"doUpdate",priority:n.priority||50});case 27:case"end":return e.stop()}},e,this)}),y=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=m.apply(e,t);function i(e){g(o,n,r,i,a,"next",e)}function a(e){g(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t,n){return y.apply(this,arguments)}),I=c.Path.withRoute({path:"/user/:authorId/spaces/:name/:sort",calculate:S,getSource:v,getSidebar:O,getSpec:b,onPut:P});t.SpaceListing=I},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InboxListing=void 0;var r=n(1),o=n(3),i=n(2),a=n(10),s=n(4),u=n(6),c=n(7),p=n(5),l=n(9),f=n(15);function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function g(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var h,m,y=(0,r.query)(function(e){return i.Query.wikiPage(e,o.Config.indexer,"listing:topic:sidebar")}),v=(0,r.query)(function(e,t){var n=t.authorId,r=t.type,i=t.sort,a=void 0===i?"new":i;return p.ListingSpec.getSource(e,o.Config.indexer,"listing:inbox",["replies to author ".concat(n),"type ".concat(r),"sort ".concat(a)].join("\n"))}),b=(0,r.query)(function(e,t){return v(e,t).then(p.ListingSpec.fromSource)}),O=(h=regeneratorRuntime.mark(function e(t,n,r){var o,i,c,p,g,h,m,y,v,O,S,P;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r.updatedSoul,o=r.diff,i=t.newScope(),c=a.GunNode.decodeSEA(o),p=l.ListingNode.categorizeDiff(c),g=d(p,1),h=g[0],e.next=6,b(i,n.match);case 6:m=e.sent,y=u.ThingSet.ids(c),v=0;case 9:if(!(v<h.length)){e.next=20;break}return O=h[v],e.t0=u.ThingSet,e.next=14,i.get(s.Schema.ThingComments.route.reverse({thingId:O})).then();case 14:e.t1=e.sent,S=e.t0.ids.call(e.t0,e.t1),y=y.concat(S);case 17:v++,e.next=9;break;case 20:if(!y.length){e.next=23;break}return e.next=23,f.ListingOracle.updateListing(t,n,i,m,y,[]);case 23:for(P in i.getAccesses())t.listen(P,n.soul);case 24:case"end":return e.stop()}},e,this)}),m=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=h.apply(e,t);function i(e){g(o,n,r,i,a,"next",e)}function a(e){g(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t,n){return m.apply(this,arguments)}),S=c.Path.withRoute({path:"/user/:authorId/replied/:type/:sort",getSidebar:y,getSource:v,getSpec:b,onPut:O});t.InboxListing=S},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProfileListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(2),s=n(7),u=n(5);function c(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var p=["overview","comments","submitted","commands"],l=(0,o.query)(function(e){return a.Query.wikiPage(e,i.Config.indexer,"listing:profile:sidebar")}),f=(0,o.query)(function(e,t){var n=t.authorId,o=t.type,a=t.sort;return u.ListingSpec.getSource(e,i.Config.indexer,"listing:profile",["author ".concat(n),"type ".concat(o),"submit to whatever","sort ".concat(a)].concat(c(r.map(function(e){return"tab ".concat(e," /user/").concat(n,"/").concat(e)},p))).join("\n"))}),d=(0,o.query)(function(e,t){return f(e,t).then(u.ListingSpec.fromSource)}),g=s.Path.withRoute({path:"/user/:authorId/:type/:sort",tabs:p,getSidebar:l,getSource:f,getSpec:d});t.ProfileListing=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tabulator=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(2),s=n(21);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function c(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var p,l,f={query:(0,o.query)((p=regeneratorRuntime.mark(function e(t,n){var c,p,l,f,d,g,h,m,y,v;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return c=i.Schema.Thing.route.reverse(n.match),e.next=3,(0,o.all)([t.get("".concat(c,"/votesup")).count(),t.get("".concat(c,"/votesdown")).count(),t.get("".concat(c,"/allcomments")).count(),t.get("".concat(c,"/comments")).souls()]);case 3:return p=e.sent,l=u(p,4),f=l[0],d=l[1],g=l[2],h=l[3],e.next=11,a.Query.thingDataFromSouls(h);case 11:return m=e.sent,y=s.CommentCommand.map(m),v={up:f,down:d,comment:g,replies:h.length,score:f-d},r.keys(y).length&&(v.commands=JSON.stringify(y)),e.abrupt("return",v);case 16:case"end":return e.stop()}},e,this)}),l=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=p.apply(e,t);function i(e){c(o,n,r,i,a,"next",e)}function a(e){c(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t){return l.apply(this,arguments)}))};t.Tabulator=f}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,