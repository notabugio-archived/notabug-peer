!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):"function"==typeof define&&define.amd?define("notabug-peer",["ramda","gun-scope","object-hash","gun-suppressor-sear","route-parser","uri-js","gun-suppressor","argon2"],t):"object"==typeof exports?exports["notabug-peer"]=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):e["notabug-peer"]=t(e.ramda,e["gun-scope"],e["object-hash"],e["gun-suppressor-sear"],e["route-parser"],e["uri-js"],e["gun-suppressor"],e.argon2)}("undefined"!=typeof self?self:this,function(e,t,r,o,n,i,s,a){return function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=29)}([function(t,r){t.exports=e},function(e,r){e.exports=t},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(3),s=r(8),a=r(4),u=r(6),c=r(9);const p=(0,n.resolve)(null),d=o.reduce(o.union,[]),l=e=>{const{topics:t=["all"]}=e||{},r=o.propOr(365,"days",e)||365,n=[],i=(new Date).getTime()-864e5*parseInt(r,10);for(let e=0;e<=r+1;e++)n.push(u.ThingSet.dayStr(i+864e5*e));return Object.keys(t.reduce((e,t)=>n.reduce((e,r)=>(e[`${s.Constants.PREFIX}/topics/${t}/days/${r}`]=!0,e),e),{}))},g=(0,n.query)((e,t)=>{const r=l({...t,topics:[t.topic]});let o=[],i=s.Constants.LISTING_SIZE;"new"===t.sort?i=s.Constants.LISTING_SIZE:("top"===t.sort&&(i*=3),"all"===t.topic&&(i*=3));const a=()=>{const t=r.pop();return o.length>i||!t?(0,n.resolve)(o):e.get(t).souls().then(e=>(o=[...o,...e],a()))};return a()}),h=(0,n.query)((e,{domain:t})=>e.get(a.Schema.Domain.route.reverse({domainName:t})).souls()),m=(0,n.query)((e,t)=>(0,n.all)([t.type&&"submitted"!==t.type&&"overview"!==t.type?(0,n.resolve)([]):e.get(`~${t.authorId}`).get("submissions").souls(),t.type&&"comments"!==t.type&&"overview"!==t.type&&"commands"!==t.type?(0,n.resolve)([]):e.get(`~${t.authorId}`).get("comments").souls()]).then(([e,t])=>d([e,t]))),f=(0,n.query)((e,t)=>e.get(t).then(c.ListingNode.sortedIds),"listingIds"),y=(0,n.query)((e,{listing:t,sort:r,indexer:n})=>f(e,`${s.Constants.PREFIX}${t}/${r}@~${n}.`).then(o.compose(o.map(e=>a.Schema.Thing.route.reverse({thingId:e})),o.filter(o.identity)))),b=(0,n.query)((e,{repliesToAuthorId:t,type:r="overview",...o})=>y(e,{listing:`/user/${t}/${r}`,sort:"new",...o}).then(t=>(0,n.all)(t.map(t=>e.get(`${t}/comments`).souls())).then(d))),O=(0,n.query)((e,t)=>e.get(a.Schema.ThingAllComments.route.reverse({thingId:t.submissionId})).souls(o.prepend(a.Schema.Thing.route.reverse({thingId:t.submissionId})))),P=(0,n.query)((e,t)=>e.get(t).then(e=>{if(!e||!e.id)return null;const t={id:e.id,timestamp:parseFloat(e.timestamp,10)},r=o.path(["replyTo","#"],e),n=o.path(["op","#"],e),i=n?a.Schema.Thing.route.match(n).thingid:null,s=r?a.Schema.Thing.route.match(r).thingid:null;return i&&(t.opId=i),s&&(t.replyToId=s),t})),S=(e,t,r,i=d)=>(0,n.query)((s,a)=>{const u=o.prop(t,a);return o.isNil(u)?p:(0,n.all)(o.map(t=>e(s,{...a,[r]:t}),o.propOr([],t,a))).then(i)}),I=S(g,"topics","topic"),v=S(h,"domains","domain"),j=S(m,"authorIds","authorId"),w=S(O,"submissionIds","submissionId"),T=e=>t=>(0,n.all)(t.filter(e=>!!e).map(t=>e.get(t).get("data").then(e=>e))),L=(0,n.query)((e,t,r=!1)=>(0,n.all)([j(e,{type:"comments",authorIds:t}).then(T(e)).then(o.compose(o.map(r?o.prop("opId"):o.prop("replyToId")),o.filter(o.prop("replyToId")))),j(e,{type:"submitted",authorIds:t}).then(o.map(e=>a.Schema.Thing.route.match(e).thingId))]).then(([e,t])=>o.uniq([...e,...t]))),_=(0,n.query)((e,t,r)=>t&&r?e.get(a.Schema.ThingVoteCounts.route.reverse({thingId:r,tabulator:t})).then():(0,n.resolve)(),"thingScores"),$=(0,n.query)((e,t)=>t?e.get(a.Schema.Thing.route.reverse({thingId:t})).get("data"):(0,n.resolve)(null),"thingData"),D=(0,n.query)((e,{thingSoul:t,tabulator:r,data:o=!1,scores:s=!1})=>{if(!t)return(0,n.resolve)(null);const a=c.ListingNode.soulToId(t);return(0,n.all)([P(e,t),s?_(e,r||i.Config.tabulator,a):(0,n.resolve)(),o?$(e,a):(0,n.resolve)()]).then(([e,t,r])=>e&&e.id?{...e,votes:t,data:r}:null)}),M=(0,n.query)((e,t)=>(0,n.all)(o.reduce((r,o)=>o?(r.push(D(e,{...t,thingSoul:o})),r):r,[],o.propOr([],"thingSouls",t)))),C=(0,n.query)((e,t)=>e.get(a.Schema.AuthorPages.route.reverse({authorId:t})),"userPages"),A=(0,n.query)((e,t,r)=>t&&r?e.get(a.Schema.AuthorPages.route.reverse({authorId:t})).get(r).get("id"):(0,n.resolve)(null),"wikiPageId"),q=(0,n.query)((e,t,r)=>A(e,t,r).then(t=>t&&$(e,t))),E=(0,n.query)((e,t)=>t?e.get(`~${t}`).then(e=>({alias:o.prop("alias",e),createdAt:o.path(["_",">","pub"],e)})):(0,n.resolve)(null),"userMeta"),N=o.curry((e,t)=>(0,n.scope)(o.assoc("gun",e.gun,t||{}))),x={singleTopic:g,singleDomain:h,singleAuthor:m,singleListing:y,repliesToAuthor:b,singleSubmission:O,thingMeta:D,multiThingMeta:M,multiTopic:I,multiDomain:v,multiAuthor:j,multiSubmission:w,thingScores:_,thingData:$,thingDataFromSouls:T,topicSouls:l,userPages:C,wikiPageId:A,wikiPage:q,userMeta:E,createScope:N,curated:L};t.Query=x},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Config=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(8);const i={tabulator:n.Constants.INDEXER,indexer:n.Constants.INDEXER,owner:n.Constants.INDEXER,update:o.compose(o.map(([e,t])=>i[e]=t),o.toPairs)};t.Config=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Schema=void 0;var o,n=u(r(0)),i=(o=r(20))&&o.__esModule?o:{default:o},s=u(r(19)),a=r(8);function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}const c={...s.AUTH_SCHEMA,topicName:{type:"string",minLength:1,maxLength:a.Constants.MAX_TOPIC_SIZE},TopicDay:{title:"Topic Day",description:"A single day of things in a topic",soul:{pattern:`${a.Constants.PREFIX}/topics/:topicName/days/:year/:month/:day`,properties:{topicName:{$ref:"schema.json#/definitions/topicName"},year:{type:"number",minimum:2018,maximum:2100},month:{type:"number",minimum:1,maximum:12},day:{type:"number",minimum:1,maximum:31}},required:["topicName","year","month","day"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},Topic:{title:"Topic",description:"All things in a topic",soul:{pattern:`${a.Constants.PREFIX}/topics/:topicName`,properties:{topicName:{$ref:"schema.json#/definitions/topicName"}},required:["topicName"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},domainName:{type:"string",minLength:1,maxLength:a.Constants.MAX_DOMAIN_SIZE},Domain:{title:"Domain",description:"All things in a domain",soul:{pattern:`${a.Constants.PREFIX}/domains/:domainName`,properties:{domainName:{$ref:"schema.json#/definitions/domainName"}},required:["domainName"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},url:{type:["null","string"],maxLength:a.Constants.MAX_URL_SIZE},URL:{title:"URL",description:"All things for a given URL",soul:{pattern:`${a.Constants.PREFIX}/urls/*url`,properties:{url:{$ref:"schema.json#/definitions/url"}},required:["url"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},thingId:{type:"string",maxLength:a.Constants.MAX_HASH_SIZE},thingSoul:{properties:{thingId:{"#ref":"#definitions/thingId"}}},ThingAllComments:{title:"Thing All Comments",description:"All comments for a given submission",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/allcomments`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},ThingComments:{title:"Thing Comments",description:"Direct replies to a thing",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/comments`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},timestamp:{type:["number","string"]},thingKind:{type:"string",maxLength:a.Constants.MAX_THING_KIND_SIZE},Thing:{title:"Thing Reference",description:"These are submissions, comments, chat messages and wiki pages",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},propsFromSoul:{id:"thingId"},properties:{id:{$ref:"#/definitions/thingId"},kind:{"#ref":"#/definitions/thingKind"},timestamp:{$ref:"#/definitions/timestamp"},originalHash:{$ref:"#/definitions/thingId"},data:{oneOf:[{$ref:"#/definitions/ThingDataEdge"},{$ref:"#/definitions/ThingDataSignedEdge"}]},topic:{anyOf:[{$ref:"#/definitions/TopicEdge"},{description:"Some old things had generic topic souls",type:"object",additionalProperties:!1,properties:{"#":{type:"string",maxLength:42}},required:["#"]}]},domain:{$ref:"#/definitions/DomainEdge"},url:{$ref:"#/definitions/URLEdge"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"},op:{$ref:"#/definitions/ThingEdge"},replyTo:{$ref:"#/definitions/ThingEdge"},author:{$ref:"#/definitions/SEAAuthorEdge"}},anyOf:[{allOf:[{thingHashMatchesSoul:!0},{anyOf:[{signedThingDataMatchesThing:!0},{thingDataMatchesOriginalHash:!0}]}]},{isLegacyThing:!0},{additionalProperties:!1,description:"Self verifying can be updated in isolation",properties:{id:{$ref:"#/definitions/thingId"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"}}}]},ProofOfWorkVotes:{$async:!0,keysAreProofsOfWork:{algorithm:"argon2d",config:{complexity:6,hashLength:32,timeCost:1,memoryCost:10240,parallelism:1}}},ThingVotesUp:{soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/votesup`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingVotesDown:{soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/votesdown`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingData:{title:"Unsigned Thing Data",description:"This is the actual content of a thing",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/data`,allOf:[{$ref:"schema.json#/definitions/thingSoul"}],required:["thingId"]},properties:{kind:{$ref:"#/definitions/thingKind"},title:{type:"string",minLength:1,maxLength:a.Constants.MAX_THING_TITLE_SIZE},topic:{$ref:"#/definitions/topicName"},body:{type:["null","string"],maxLength:a.Constants.MAX_THING_BODY_SIZE},author:{$ref:"#/definitions/seaAlias"},authorId:{$ref:"#/definitions/seaAuthorId"},opId:{$ref:"#/definitions/thingId"},replyToId:{$ref:"#/definitions/thingId"},domain:{$ref:"#/definitions/domainName"},url:{$ref:"#/definitions/url"},timestamp:{$ref:"#/definitions/timestamp"}},thingDataHashMatchesSoul:!0},ThingDataSigned:{title:"Signed Thing Data",description:"This is the actual content of a thing, cryptographically signed",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/data~:authorId.`,properties:{thingId:{$ref:"schema.json#/definitions/thingId"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["thingId","authorId"]},properties:{kind:{sea:{$ref:"schema.json#/definitions/thingKind"}},title:{sea:{type:"string",minLength:1,maxLength:a.Constants.MAX_THING_TITLE_SIZE}},topic:{sea:{$ref:"schema.json#/definitions/topicName"}},body:{sea:{type:["null","string"],maxLength:a.Constants.MAX_THING_BODY_SIZE}},author:{sea:{$ref:"schema.json#/definitions/seaAlias"}},authorId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},replyToId:{sea:{$ref:"schema.json#/definitions/thingId"}},domain:{sea:{$ref:"schema.json#/definitions/domainName"}},url:{sea:{$ref:"schema.json#/definitions/url"}},timestamp:{sea:{$ref:"schema.json#/definitions/timestamp"}}}},ThingVoteCounts:{title:"Thing Vote Counts",description:"Aggregated counts from a tabulator",soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/votecounts@~:tabulator.`,properties:{thingId:{$ref:"schema.json#/definitions/thingId"},tabulator:{$ref:"schema.json#/definitions/seaAuthorId"}}},properties:{up:{sea:{type:["number","string"]}},down:{sea:{type:["number","string"]}},comment:{sea:{type:["number","string"]}},score:{sea:{type:["number","string"]}},commands:{sea:{type:["object","string"]}}}},ListingData:{$async:!0,title:"Listing Node Data",description:"Shared description of listing properties",type:"object",additionalProperties:!1,patternProperties:{"^d+$":{sea:{type:["string","null","undefined"]}}}},sortName:{type:"string",enum:["new","old","active","top","comments","discussed","hot","best","controversial","random","firehose","chat"]},TopicListing:{soul:{pattern:`${a.Constants.PREFIX}/t/:topic/:sort@~:indexer.`,required:["topic","sort","indexer"],properties:{topic:{type:"string"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},DomainListing:{soul:{pattern:`${a.Constants.PREFIX}/domain/:domain/:sort@~:indexer.`,required:["domain","sort","indexer"],properties:{domain:{type:"string"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},ThingCommentsListing:{soul:{pattern:`${a.Constants.PREFIX}/things/:thingId/comments/:sort@~:indexer.`,properties:{thingId:{$ref:"schema.json#/definitions/thingId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},userListingType:{type:"string",enum:["overview","submitted","comments","commands","commented"]},AuthorRepliesListing:{soul:{pattern:`${a.Constants.PREFIX}/user/:authorId/replies/:type/:sort@~:indexer.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorProfileListing:{soul:{pattern:`${a.Constants.PREFIX}/user/:authorId/:type/:sort@~:indexer.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},SpaceListing:{soul:{pattern:`${a.Constants.PREFIX}/user/:authorId/spaces/:name/:sort@~:indexer.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},name:{$ref:"schema.json#/definitions/topicName"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorComments:{title:"Author's Comments",description:"All of an authors comments should be linked here",soul:{pattern:`${a.Constants.PREFIX}/comments~:authorId.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorSubmissions:{title:"Author's Submissions",description:"All of an author's submissions should be linked here",soul:{pattern:`${a.Constants.PREFIX}/submissions~:authorId.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}},AuthorThings:{title:"Author's Things",description:"All of an author's things should be linked here",soul:{pattern:`${a.Constants.PREFIX}/things~:authorId.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorPages:{title:"Author Page Map",description:"Mapping of page names to things",soul:{pattern:`${a.Constants.PREFIX}/pages~:authorId.`,properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}}},p=n.keys(c).reduce((e,t)=>{const r=n.path([t,"soul","pattern"],c);return r?n.assoc(t,new i.default(r),e):e}),d={...n.compose(n.reduce((e,[t,r])=>n.assoc(t,n.assoc("route",r,n.prop(t,c)),e),{}),n.toPairs)(p),definitions:c,routes:p};t.Schema=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSpec=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(2),s=r(6),a=r(26),u=r(12),c=r(11);const p={fromSource:o.compose(o.apply(o.mergeLeft),o.ap([c.ListingFilter.fromDefinition,o.identity]),o.of,o.apply(o.assoc("dataSource")),o.ap([u.ListingDataSource.fromDefinition,o.identity]),o.of,a.ListingDefinition.fromSource),getSource:(0,n.query)((e,t,r,n="")=>i.Query.wikiPage(e,t,r).then(o.compose(e=>`${e}\n# added by indexer\n${n||""}\nsourced from page ${t} ${r}\n`,s.ThingDataNode.body)))};t.ListingSpec=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return o.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return n.ThingDataNode}}),Object.defineProperty(t,"Thing",{enumerable:!0,get:function(){return i.Thing}});var o=r(21),n=r(22),i=r(33)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;var o,n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),i=(o=r(20))&&o.__esModule?o:{default:o};const s=n.compose(n.sortBy(n.identity),n.filter(n.identity),n.map(n.trim),n.split("+"),n.toLower,n.trim,n.defaultTo("")),a={splitDomains:s,splitTopics:n.compose(n.ifElse(n.prop("length"),n.identity,n.always(["all"])),s),withRoute:e=>n.assoc("route",new i.default(e.path),e)};t.Path=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Constants=void 0;const o={COMMAND_RE:/^ {4}~/,PREFIX:"nab",SOUL_DELIMETER:"|~~|",LISTING_SIZE:1e3,MAX_HASH_SIZE:64,MAX_POW_NONCE_SIZE:64,MAX_TOPIC_SIZE:42,MAX_AUTHOR_ALIAS_SIZE:256,MAX_AUTHOR_ID_SIZE:128,MAX_URL_SIZE:2048,MAX_DOMAIN_SIZE:256,MAX_THING_KIND_SIZE:16,MAX_THING_TITLE_SIZE:300,MAX_THING_BODY_SIZE:5e4,MAX_LISTING_IDS_SIZE:5e4,MAX_LISTING_SOURCE_SIZE:5e4,MAX_LISTING_TABS_SIZE:5e3,MAX_LISTING_SOUL_PREFIX_SIZE:42,MAX_LISTING_SOUL_IDENTIFIER_SIZE:128,MAX_LISTING_SOUL_SORT_SIZE:16,MAX_LISTING_SOUL_TYPE_SIZE:42,MAX_LISTING_SOUL_KIND_SIZE:16,CHAT_PRELOAD_ITEMS:10,INDEXER:"CEyKrDd1xyPXpWSV00MgvnZY2VJLHXgzCvhMeDwKTYA.yjSq0DyXzzhB_ZXr_DzfJgij3tXU0-3t0Q5bJAtZpj8"};t.Constants=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingNode=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(8),s=r(3),a=r(4);const[u,c,p]=[0,1,2,3],d=o.map(o.prop(c)),l=o.map(o.slice(1,3)),g=o.propOr("","source"),h=o.curry((e,t)=>`${i.Constants.PREFIX}${t}@~${e}.`),m=o.compose(o.replace(new RegExp(`^${i.Constants.PREFIX}`),""),o.replace(/@~.*\./,"")),f=e=>a.Schema.Thing.route.reverse({thingId:e}),y=o.map(f),b=e=>o.prop("thingId",a.Schema.Thing.route.match(e)),O=o.map(b),P=o.curry((e,t)=>o.compose(o.ifElse(o.prop("length"),o.insert(0,parseInt(t,10)),o.always(null)),e=>(e[1]=parseFloat(e[1]),e),o.map(o.trim),o.split(","),o.propOr("",`${t}`))(e)),S=o.compose(o.filter(o.compose(e=>!(0!==e&&!e),parseInt)),o.keys),I=o.curry((e,t)=>o.compose(o.addIndex(o.reduce)((e,t,r)=>o.assoc(`${r}`,t.join(","),e),{}),o.defaultTo([]))(t)),v=e=>o.compose(o.map(P(e)),S)(e),j=o.compose(d,v),w=o.sortWith([o.ascend(o.compose(o.cond([[o.isNil,o.always(1/0)],[o.T,parseFloat]]),o.prop(p)))]),T=o.compose(o.map(o.prop(c)),w,o.filter(o.identity),v),L=o.addIndex(o.map)((e,t)=>[t,...e]),_=o.compose(o.uniqBy(o.prop(c)),w,o.reduce(o.concat,[]),o.map(v)),$=(0,n.query)((e,t)=>Promise.all(o.map(e.get,t)).then(_)),D=(0,n.query)((e,t,r)=>{const{indexer:o=s.Config.indexer}=r||{};return $(e,[h(o,t)]).then(d)},"listingRows"),M=(0,n.query)((e,t)=>t?e.get(t):(0,n.resolve)(null),"listing"),C={POS_IDX:u,POS_ID:c,POS_VAL:p,source:g,get:M,getRow:P,itemKeys:S,serialize:I,rows:v,ids:j,idToSoul:f,idsToSouls:y,soulToId:b,soulsToIds:O,rowsToIds:d,rowsToItems:l,itemsToRows:L,sortRows:w,sortedIds:T,soulFromPath:h,pathFromSoul:m,rowsFromSouls:$,read:D,diff:async(e,t=[],r=[],{maxSize:n=1e3}={})=>{const i=o.indexBy(o.identity,r),s={},a={},d=[],l={};let g,h=[],m=0;for(g in e||{}){const t=parseInt(g,10);if(!t&&0!==t)continue;const r=P(e,g)||[t,null,null],[o,n=null,a=null]=r;r[p]=null===a?null:parseFloat(a),n&&i[n]&&(r[c]=r[p]=null),n&&(s[n]=r),r[c]?d.push(r):h.push(r),o>m&&(m=o)}for(let e=0;e<t.length;e++){const[r,o]=t[e]||[null,null];if(!r)continue;const n=s[r];if(n)n[p]!==o&&(n[p]=o,l[r]=!0);else{const e=[null,r,o];d.push(e)}}const f=w(d),y=n?f.slice(0,n):f,b=n?f.slice(n,f.length):[],O=o.filter(e=>null===e[u],y);h=h.concat(o.filter(e=>null!==e[u],b)).reverse();for(let e=0;e<y.length;e++){const t=y[e][c],r=y[e][u],o=y[e][p];null!==r&&l[t]&&(a[`${r}`]=[t,o].join(","))}const S=[];for(;O.length;){const e=O.pop(),t=h.pop();let[r]=t||[null];null===r&&(r=parseInt(m,10)+S.length+1,S.push(r)),a[`${r}`]=[e[c],e[p]].join(",")}for(;h.length;){const t=h.pop();if(t&&!t[c]){const r=`${t[u]}`;null!==e[r]&&(a[r]=null,console.log("nulling",r,e[r]))}}return o.keys(a).length?a:null},categorizeDiff:(e,t)=>{const r=S(o.mergeLeft(e,t)),n=[],i=[];for(let o=0;o<r.length;o++){const s=r[o],[a,u]=P(e,s)||[],[c,p]=P(t,s);u!==p&&(u&&n.push(u),p&&i.push(p))}return[n,i]},unionRows:_};t.ListingNode=C},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GunNode=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0));const n=o.pathOr("",["_","#"]),i=o.pathOr({},["_",">"]);const s={soul:n,state:i,latest:o.compose(o.last,o.sortBy(o.identity),o.values,i),edges:o.compose(o.map(o.prop("#")),o.values),decodeSEA:function(e){const t=e?{...e}:e,r=o.path(["_","#"],t);return r&&Gun.SEA&&-1!==r.indexOf("~")?(o.without(["_"],o.keys(t)).forEach(o=>{Gun.SEA.verify(Gun.SEA.opt.pack(e[o],o,e,r),!1,r=>t[o]=Gun.SEA.opt.unpack(r,o,e))}),t):e}};t.GunNode=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingFilter=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(8),i=r(4),s=r(2),a=r(6),u=r(9),c=r(12);const p=e=>o.compose(parseInt,o.path(e)),d=async(e,t,r,{limit:n=25,count:i=0,after:s=null,filterFn:a}={})=>{const c=parseInt(n,10),p=parseInt(i,10)||0,d=r.slice(),l=[],g=(e=30)=>Promise.all(o.map(async e=>{let t=!0;e[u.ListingNode.POS_ID]?(a&&(t=await a(e[u.ListingNode.POS_ID])),t&&l.push(e)):console.log("blankRow",e)},d.splice(p,e)));for(;d.length>p&&(await g(),!(c&&l.length>=c)););return o.compose(c?o.slice(0,c):o.identity,o.sortBy(o.prop(u.ListingNode.POS_VAL)))(l)},l={fromDefinition:e=>{const{filters:t,voteFilters:r,isPresent:i}=e,s=[],u=[],c=(...e)=>s.push(o.compose(...e)),d=(...e)=>u.push(o.compose(...e));t.allow.aliases.length&&c(e=>!!i(["alias",e]),o.path(["data","author"])),t.allow.authors.length&&c(e=>!!i(["author",e]),o.path(["data","authorId"])),t.allow.domains.length&&c(e=>!!i(["domain",e]),a.ThingDataNode.domain,o.prop("data")),t.allow.topics.length&&!o.find(o.compose(o.identical("all"),o.last,o.split(":")),t.allow.topics)&&c(e=>{let t=o.path(["data","topic"],e);const r=o.path(["data","kind"],e);return"chatmsg"===r&&(t=`chat:${t}`),"comment"===r&&(t=`comments:${t}`),!!i(["topic",t])}),t.allow.kinds.length&&c(e=>!!i(["kind",e]),o.path(["data","kind"])),"commands"===t.allow.type&&c(o.compose(o.test(n.Constants.COMMAND_RE),o.path(["data","body"]))),t.deny.aliases.length&&c(e=>!i(["ban","alias",e]),o.path(["data","author"])),t.deny.authors.length&&c(e=>!i(["ban","author",e]),o.path(["data","authorId"])),t.deny.domains.length&&c(e=>!e||!i(["ban","domain",e]),a.ThingDataNode.domain),t.deny.topics.length&&c(e=>!i(["ban","topic",e]),o.path(["data","topic"])),t.deny.anon&&c(o.path(["data","authorId"])),t.deny.signed&&c(o.compose(e=>!e,o.path(["data","authorId"]))),null!==r.upsMin&&d(o.lte(r.upsMin),p(["votes","up"])),null!==r.upsMax&&d(o.gte(r.upsMax),p(["votes","up"])),null!==r.downsMin&&d(o.lte(r.downsMin),p(["votes","down"])),null!==r.downsMax&&d(o.gte(r.downsMax),p(["votes","down"])),null!==r.scoreMin&&d(o.lte(r.scoreMin),p(["votes","score"])),null!==r.scoreMax&&d(o.gte(r.scoreMax),p(["votes","score"])),t.deny.tags.length&&d(e=>{const r=o.path(["votes","commands"],e)||{};return!t.deny.tags.find(([e,t])=>!!o.path([t,"tag",e],r))});const l=e=>!s.find(t=>!t(e)),g=e=>!u.find(t=>!t(e));return{thingFilter:t=>e.isIdSticky(o.prop("id",t))||l(t)&&g(t),contentFilter:l,voteFilter:g}},getFilteredRows:d,getFilteredIds:o.compose(e=>e.then(o.map(o.prop(u.ListingNode.POS_ID))),d),thingFilter:o.curry((e,t,r)=>s.Query.thingMeta(e,{tabulator:t.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:r}),scores:c.ListingDataSource.needsScores(t),data:c.ListingDataSource.needsData(t)}).then(t.thingFilter))};t.ListingFilter=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDataSource=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(6),s=r(4),a=r(2),u=r(13);const c=(0,n.query)((e,t,r)=>n.Promise.all(o.map(t=>u.ListingSort.itemFromSoul(e,t,r),t)).then(u.ListingSort.sortItems)),p=(0,n.query)((e,t,r)=>n.Promise.all(o.map(e.get,t)).then(o.reduce(o.mergeRight,{})).then(i.ThingSet.souls).then(t=>c(e,t,r))),d=e=>{const{sort:t}=e,r=o.path(["filters","allow","topics"],e)||[];r.length||r.push("all");return{listingPaths:[`/t/${r.sort().join("+")}/${t}`],query:o=>a.Query.multiTopic(o,{topics:r,sort:t}).then(t=>c(o,t,e))}},l={listing:e=>{const t=o.pathOr([],["filters","allow","listings"],e),{sort:r}=e;return{listingPaths:o.map(e=>`${e}/${r}`,t)}},replies:e=>{const{sort:t}=e,r=o.path(["filters","allow","repliesTo"],e),n=o.path(["filters","allow","type"],e);return{listingPaths:[`/user/${r}/replies/${n}/${t}`],query:t=>a.Query.repliesToAuthor(t,{type:n,repliesToAuthorId:r,indexer:e.indexer}).then(r=>c(t,r,e))}},op:e=>{const{sort:t}=e,r=o.path(["filters","allow","ops"],e);r.length||d(e);return{listingPaths:o.map(e=>`/things/${e}/comments/${t}`,r),query:t=>a.Query.multiSubmission(t,{submissionIds:r}).then(r=>c(t,r,e))}},curator:e=>{const{sort:t}=e,r=o.prop("curators",e)||[];if(!r.length)return d(e);return{listingPaths:o.map(e=>`/user/${e}/commented/${t}`,r),query:t=>a.Query.curated(t,r,!0).then(e=>e.map(e=>s.Schema.Thing.route.reverse({thingId:e}))).then(r=>c(t,r,e))}},author:e=>{const{sort:t}=e,r=o.path(["filters","allow","authors"],e),n=o.path(["filters","allow","type"],e);if(!r.length)return d(e);return{listingPaths:o.map(e=>`/user/${e}/${n}/${t}`,r),query:t=>a.Query.multiAuthor(t,{type:n,authorIds:r}).then(r=>c(t,r,e))}},domain:e=>{const{sort:t}=e,r=o.path(["filters","allow","domains"],e)||[];if(!r.length)return d(e);return{listingPaths:[`/domain/${r.sort().join("+")}/${t}`],query:o=>a.Query.multiDomain(o,{domains:r,sort:t}).then(t=>c(o,t,e))}},topic:d},g=o.keys(l),h={fromDefinition:e=>{const t=(e=>o.find(e.isPresent,g)||"topic")(e);return o.mergeLeft({name:t},l[t](e))},sources:l,needsScores:e=>!!o.find(e.isPresent,["sort hot","sort top","sort best","sort controversial","ups","downs","score","can remove"]),needsData:e=>!!o.find(e.isPresent,["topic","domain","author","unique by content","kind","type","require signed","require anon","alias","ban domain","ban topic","ban author","ban alias"]),itemsFromThingSets:p,itemsFromThingSouls:c};t.ListingDataSource=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSort=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(4),s=r(6),a=r(2),u=r(9);const[c,p]=[0,1],d=o.map(o.prop(c)),l=o.sortBy(o.prop(p)),g=e=>(0,n.query)((t,r,s)=>s.isIdSticky(r)?(0,n.resolve)(-1/0):o.contains(r,s.filters.allow.ops)?(0,n.resolve)(-1/0):a.Query.thingMeta(t,{tabulator:s.tabulator,scores:!0,thingSoul:i.Schema.Thing.route.reverse({thingId:r})}).then(t=>e(t,s))),h=e=>(0,n.query)((t,r,o)=>a.Query.thingMeta(t,{tabulator:o.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:r})}).then(e)),m={new:h(o.compose(o.multiply(-1),o.defaultTo(0),o.prop("timestamp"))),old:h(o.prop("timestamp")),active:g(({timestamp:e,lastActive:t})=>-1*(t||e)),top:g(o.compose(e=>-1*parseInt(e,10),o.pathOr(0,["votes","score"]))),comments:g(o.compose(e=>-1*parseFloat(e,10),o.pathOr(0,["votes","comment"]))),discussed:g(e=>{const t=o.prop("timestamp",e),r=parseInt(o.pathOr(0,["votes","comment"],e),10),n=t/1e3-1134028003,i=Math.log10(Math.max(Math.abs(r),1));return r?-1*(i+n/45e3):1e9-n}),hot:g(e=>{const t=o.prop("timestamp",e),r=parseInt(o.pathOr(0,["votes","score"],e),10),n=t/1e3-1134028003;let i=0;return r>0?i=1:r<0&&(i=-1),-1*(i*Math.log10(Math.max(Math.abs(r),1))+n/45e3)}),best:g(e=>{const t=parseInt(o.pathOr(0,["votes","up"],e),10),r=t+parseInt(o.pathOr(0,["votes","down"],e),10);if(0===r)return 0;const n=1.281551565545,i=t/r;return(i+1/(2*r)*n*n-n*Math.sqrt(i*(1-i)/r+n*n/(4*r*r)))/(1+1/r*n*n)*-1}),controversial:g(e=>{const t=parseInt(o.pathOr(0,["votes","up"],e),10),r=parseInt(o.pathOr(0,["votes","down"],e),10);return t<=0||r<=0?0:-1*(t+r)**(t>r?r/t:t/r)})},f=(0,n.query)((e,t,r)=>(m[r.sort]||m.new)(e,t,r).then(e=>[t,e])),y=(0,n.query)((e,t,r)=>(0,n.all)(o.map(t=>f(e,t,r),t))),b=(0,n.query)((e,t,r)=>(0,n.all)(o.map(e.get,t)).then(o.pipe(s.ThingSet.union,s.ThingSet.ids,t=>y(e,t,r))).then(l)),O={POS_ID:c,POS_VAL:p,sorts:m,isValidSort:e=>!!m[e],toItem:f,toItems:y,toIds:d,itemFromSoul:(e,t,r)=>f(e,u.ListingNode.soulToId(t),r),sortItems:l,fromThingSets:b};t.ListingSort=O},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingType=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(36),s=r(37),a=r(38),u=r(15),c=r(39),p=r(40),d=r(41),l=r(42),g=r(43);const h={ChatListing:i.ChatListing,FirehoseListing:s.FirehoseListing,TopicListing:u.TopicListing,DomainListing:c.DomainListing,CommentListing:p.CommentListing,SpaceListing:d.SpaceListing,InboxListing:l.InboxListing,CommentedListing:a.CommentedListing,ProfileListing:g.ProfileListing},m=o.values(h),f=e=>{let t;for(let r=0;r<m.length;r++)if(t=m[r].route.match(e))return o.assoc("match",t,m[r]);return null},y=(0,n.query)((e,t)=>{const r=f(t);return r&&r.getSidebar?r.getSidebar(e,r.match):(0,n.resolve)("")}),b=(0,n.query)((e,t)=>{const r=f(t);if(!r)throw new Error(`Can't find type for path: ${t}`);return r.getSpec(e,r.match).then(e=>{let n=e;return(n="default"===r.match.sort?o.assoc("path",r.route.reverse(o.assoc("sort",n.sort,r.match)),n):o.assoc("path",t,e)).submitTopic&&!n.submitPath&&(n=o.assoc("submitPath",`/t/${n.submitTopic}/submit`,n)),n})}),O={...h,types:h,fromPath:f,sidebarFromPath:y,specFromPath:b};t.ListingType=O},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TopicListing=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=["hot","new","discussed","controversial","top","firehose"],p=(0,n.query)(e=>s.Query.wikiPage(e,i.Config.indexer,"listing:topic:sidebar")),d=(0,n.query)((e,{topic:t,sort:r})=>{const n=a.Path.splitTopics(t),s="all"===n[0]?"whatever":n[0];return u.ListingSpec.getSource(e,i.Config.indexer,"listing:topic",[`name ${t}`,`submit to ${s}`,`sort ${r}`,-1===t.indexOf(":")?"kind submission":"",...o.map(e=>`topic ${e}`,n),...o.map(e=>`tab ${e} /t/${t}/${e}`,c)].join("\n"))}),l=(0,n.query)((e,t)=>d(e,t).then(o.pipe(u.ListingSpec.fromSource,o.assoc("basePath",`/t/${t.topic}`)))),g=a.Path.withRoute({tabs:c,path:"/t/:topic/:sort",getSidebar:p,getSource:d,getSpec:l});t.TopicListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingOracle=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(10),i=r(4),s=r(6),a=r(9),u=r(13),c=r(14);const p=async(e,t,r,o,n=[],i=[])=>{if(!n.length&&!i.length)return;const s=await e.newScope().get(t.soul),c=await u.ListingSort.toItems(r,n,o),p=await a.ListingNode.diff(s,c,i);p&&console.log("CHANGES",t.soul,p),p&&t.write(p)},d={updateListing:p,onPut:async(e,t,{soul:r,updatedSoul:u,diff:d,...l})=>{let g=[];const h=a.ListingNode.pathFromSoul(r),m=e.newScope(),f=await c.ListingType.specFromPath(m,h),{thingId:y}=i.Schema.ThingVoteCounts.route.match(u)||{};o.equals(t.match.thingId||null);y&&g.push(y),g=o.concat(g,s.ThingSet.ids(n.GunNode.decodeSEA(d))),await p(e,t,m,f,g,[]);for(const r in m.getAccesses())e.listen(r,t.soul)}};t.ListingOracle=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validation=t.suppressor=void 0;var o,n=c(r(0)),i=(o=r(18))&&o.__esModule?o:{default:o},s=r(31),a=c(r(19)),u=r(4);function c(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}const p=(e,t)=>{const r=n.path(["data","#"],t),o=n.without(["comments","allcomments","votesup","votesdown"],n.keys(n.path(["_",">"],t))).map(e=>n.path(["_",">",e],t)).sort().pop(),{thingId:i}=u.Schema.ThingData.route.match(r)||{},s=n.prop("id",t);return s&&s===i&&o&&o<1543102814945},d=(e,t)=>{const r=n.prop("id",t);return r&&r===(0,i.default)({authorId:(n.path(["author","#"],t)||"").substr(1)||void 0,timestamp:parseInt(n.prop("timestamp",t),10),kind:n.prop("kind",t),topic:n.prop("topicName",u.Schema.Topic.route.match(n.path(["topic","#"],t))),opId:n.prop("thingId",u.Schema.Thing.route.match(n.path(["op","#"],t))),replyToId:n.prop("thingId",u.Schema.Thing.route.match(n.path(["replyTo","#"],t))),originalHash:n.prop("originalHash",t)})},l=(e,t)=>{const r=(n.path(["author","#"],t)||"").substr(1)||void 0,o=n.prop("authorId",u.Schema.ThingDataSigned.route.match(n.path(["data","#"],t)));return r&&r===o},g=(e,t)=>{const r=n.prop("originalHash",t),o=n.prop("thingId",u.Schema.ThingData.route.match(n.path(["data","#"],t)));return o&&o===r},h=e=>(t,r,o,i,s)=>{const{thingId:a}=u.Schema.Thing.route.match(n.path(["_","#"],s)||"")||{},{thingId:c}=u.Schema[t].route.match(n.prop("#",r)||"");return!(!a||a!==c)&&e.compile({$ref:`schema.json#/definitions/${t}Edge`})(r)},m=(e,t)=>{const{_:r,...o}=t||{};o.timestamp=parseFloat(o.timestamp,10);const{thingId:s}=u.Schema.ThingData.route.match(n.path(["_","#"],t)||"")||{};return s&&s===(0,i.default)(o)},f=(e,t,r,o)=>{const{algorithm:n="argon2d",config:i={}}=t||{},s=Buffer.hasOwnProperty("from")?Buffer.from(o,"hex"):new Buffer(o,"hex"),a=Buffer.hasOwnProperty("from")?Buffer.from(s,"hex"):new Buffer(s,"hex"),u=e.hash(r,{salt:a,hashLength:i.hashLength,timeCost:i.timeCost,memoryCost:i.memoryCost,parallelism:i.parallelism,raw:!0,type:e[n]});let c,p=0;for(c=0;c<=i.complexity-8;c+=8,p++)if(0!==u[p])return!1;const d=255<<8+c-i.complexity;return 0==(u[p]&d)},y=(e,t)=>{const o=r(32);if(!o)return!0;const{algorithm:i="argon2d"}=e||{},s=n.path(["_","#"],t);if("argon2d"!==i)throw new Error("Only argon2 supported for vote hashes");return n.without(["_"],n.keys(t)).forEach(r=>{f(o,e,s,r)||(console.log("invalid vote",s,r),delete t[r])}),!0},b=(e,t,r,o,n,i)=>(delete n[i],!0),O=n.compose(e=>(e.addKeyword("isLegacyThing",{validate:p}),e.addKeyword("thingHashMatchesSoul",{validate:d}),e.addKeyword("signedThingDataMatchesThing",{validate:l}),e.addKeyword("thingDataMatchesOriginalHash",{validate:g}),e.addKeyword("thingRelatedEdge",{validate:h(e)}),e.addKeyword("thingDataHashMatchesSoul",{validate:m}),e.addKeyword("keysAreProofsOfWork",{validate:y,modifying:!0}),e.addKeyword("deleteLegacy",{validate:b}),e),a.initAjv),P=(0,s.createSuppressor)({definitions:u.Schema.definitions,init:n.compose(O,n.always({removeAdditional:!0}))});t.suppressor=P;const S=n.curry((e,t)=>t.on("in",function(t){const r=t._;delete t._,"ping"in t||"leech"in t||t.put&&!n.keys(t.put).length||(e.config.disableValidation?Promise.resolve(t):P.validate(t)).then(e=>e?(t._=r,this.to.next(t)):console.log("msg didn't validate",t)).catch(e=>console.error("validate err",t,e.stack||e))})),I={isLegacyThing:p,thingHashMatchesSoul:d,signedThingDataMatches:l,thingDataMatchesOriginalHash:g,getIsThingRelatedEdge:h,thingDataHashMatches:m,isVoteValid:f,keysAreProofsOfWork:y,initAjv:O,suppressor:P,gunWireInput:S};t.Validation=I},function(e,t){e.exports=r},function(e,t){e.exports=o},function(e,t){e.exports=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingSet=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(4),i=r(10);const s=i.GunNode.edges;const a={ids:o.compose(o.filter(o.identity),o.map(o.compose(o.prop("thingId"),n.Schema.Thing.route.match.bind(n.Schema.Thing.route))),i.GunNode.edges),union:o.compose(o.dissoc("_"),o.reduce(o.mergeRight,{})),souls:s,dayStr:function(e){const t=new Date(e||(new Date).getTime());return`${t.getUTCFullYear()}/${t.getUTCMonth()+1}/${t.getUTCDate()}`}};t.ThingSet=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingDataNode=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(23);const i=o.propOr("","body"),s=o.propOr("","url"),a={body:i,domain:o.compose(e=>{if(!e)return"";const t=(0,n.parse)(e);return(t.host||t.scheme||"").replace(/^www\./,"")},s)};t.ThingDataNode=a},function(e,t){e.exports=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentCommand=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(8);const i=o.compose(o.map(o.trim),o.split(" "),o.replace(n.Constants.COMMAND_RE,""),o.propOr("",0),o.split("\n")),s={tokenize:i,map:e=>o.reduce((t,r)=>{const s=o.path([r,"body"],e),a=o.path([r,"authorId"],e)||"anon",u=parseFloat(o.path([r,"timestamp"],e));if(!o.test(n.Constants.COMMAND_RE,s))return t;const c=[a,...i(s),r];return o.assocPath(c,u||0,t)},{},o.keys(e))};t.CommentCommand=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ListingQuery",{enumerable:!0,get:function(){return o.ListingQuery}}),Object.defineProperty(t,"ListingNode",{enumerable:!0,get:function(){return n.ListingNode}}),Object.defineProperty(t,"ListingSpec",{enumerable:!0,get:function(){return i.ListingSpec}}),Object.defineProperty(t,"ListingSort",{enumerable:!0,get:function(){return s.ListingSort}}),Object.defineProperty(t,"ListingType",{enumerable:!0,get:function(){return a.ListingType}}),Object.defineProperty(t,"ListingDataSource",{enumerable:!0,get:function(){return u.ListingDataSource}}),Object.defineProperty(t,"ListingDefinition",{enumerable:!0,get:function(){return c.ListingDefinition}}),Object.defineProperty(t,"ListingFilter",{enumerable:!0,get:function(){return p.ListingFilter}}),Object.defineProperty(t,"ListingOracle",{enumerable:!0,get:function(){return d.ListingOracle}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return l.SpaceSpec}}),t.Listing=void 0;var o=r(35),n=r(9),i=r(5),s=r(13),a=r(14),u=r(12),c=r(26),p=r(11),d=r(16),l=r(28);const g={...a.ListingType.types,ListingNode:n.ListingNode,ListingSpec:i.ListingSpec,isValidSort:s.ListingSort.isValidSort,idsToSouls:n.ListingNode.idsToSouls,get:n.ListingNode.get,fromSpec:o.ListingQuery.fromSpec,fromPath:o.ListingQuery.fromPath,typeFromPath:a.ListingType.fromPath,sidebarFromPath:a.ListingType.sidebarFromPath,specFromPath:a.ListingType.specFromPath,nodeFromPath:o.ListingQuery.nodeFromPath};t.Listing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDefinition=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(27),i=r(3);const s={fromSource:(e,t=null,r=null)=>{const s=n.Tokenizer.tokenize(e),a={...s},{isPresent:u,getValue:c,getValues:p,getValueChain:d,getPairs:l}=s;return[a.fromPageAuthor=t,a.fromPageName=(r?`space:${r}`:void 0)]=d("sourced from page"),a.displayName=s.getValue("name")||r,a.indexer=c("tabulator")||i.Config.indexer,a.tabulator=c("tabulator")||a.indexer,a.tabs=l("tab"),a.sort=c("sort"),"default"===a.sort&&(a.sort=c("tab")),a.uniqueByContent=!!u("unique by content"),a.curators=p("curator"),a.moderators=p("mod"),a.includeRanks=!!u("show ranks"),a.stickyIds=p("sticky"),a.isIdSticky=(e=>!!s.isPresent(["sticky",e])),a.isChat=!!u("display as chat"),a.submitTopics=p("submit to"),a.submitTopic=c("submit to"),a.chatTopic=c("chat in"),t&&r&&(a.spaceName=r,a.owner=t,a.useForComments=!s.isPresent("comments leave space"),a.basePath=`/user/${t}/spaces/${r}`,a.submitTopic&&(a.submitPath=`${a.basePath}/submit`),a.defaultTab=s.getValue("tab"),a.defaultTabPath=a.defaultTab?s.getValue(["tab",a.defaultTab]):null),a.filters={functions:[],allow:{repliesTo:c("replies to author"),type:c("type"),ops:p("op"),aliases:p("alias"),authors:p("author"),domains:p("domain"),topics:p("topic"),listings:p("listing"),kinds:p("kind"),anon:!u("require signed"),signed:!u("require anon")},deny:{aliases:p("ban alias"),authors:p("ban author"),domains:p("ban domain"),topics:p("ban topic"),anon:!!u("require signed"),signed:!!u("require anon"),tags:l("can remove")}},a.voteFilters={functions:[],upsMin:parseInt(c("ups above"),10)||null,upsMax:parseInt(c("ups below"),10)||null,downsMin:parseInt(c("downs above"),10)||null,downsMax:parseInt(c("downs below"),10)||null,scoreMin:parseInt(c("score above"),10)||null,scoreMax:parseInt(c("score below"),10)||null},a.censors=o.uniq(o.map(o.prop(1),a.filters.deny.tags)),a}};t.ListingDefinition=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tokenizer=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0));const n={tokenize:e=>{const t=(e||"").split("\n").reduce((e,t)=>{const r=t.trim().split(" ").map(o.trim).filter(e=>e);return r.length?o.assocPath(r,{},e):e},{}),r=e=>{let r=e;return"string"==typeof e&&(r=e.split(" ")),r&&o.path(r,t)},n=e=>o.keysIn(r(e)),i=e=>n(e)[0]||null;return{source:e,isPresent:r,getValue:i,getValues:n,getLastValue:e=>n(e).pop()||null,getValueChain:e=>{const t="string"==typeof e?e.split(" "):e,r=[];let o=e;for(;o;)(o=i([...t,...r]))&&r.push(o);return r},getPairs:e=>{const t="string"==typeof e?e.split(" "):e;return n(t).reduce((e,r)=>[...e,[r,i([...t,r])]],[])}}}};t.Tokenizer=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceSpec=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(3),s=r(27),a=r(2),u=r(5);const c=["hot","new","discussed","controversial","top"],p=e=>`space:${e}`,d=o.curry((e,t,r)=>{let o=[r||""];const n=s.Tokenizer.tokenize(r);n.getValue("tab")||c.map(r=>o.push(`tab ${r} /user/${e}/spaces/${t}/${r}`));let a=n.getValue("indexer");return a||(o.push(`indexer ${i.Config.indexer}`),a=i.Config.indexer),n.getValue("tabulator")||o.push(`tabulator ${a}`),o.join("\n")}),l=(0,n.query)((e,t,r,o)=>u.ListingSpec.getSource(e,t,p(r),o).then(d(t,r))),g=(0,n.query)((e,t,r,o)=>l(e,t,r,o).then(e=>u.ListingSpec.fromSource(e,t,r))),h=o.compose(o.sortBy(o.identity),o.map(o.replace(/^space:/,"")),o.filter(o.compose(o.prop("length"),o.match(/^space:[^:]*$/))),o.keys),m=(0,n.query)((e,t)=>a.Query.userPages(e,t).then(h)),f={configPageName:p,sidebarPageName:e=>`space:${e}:sidebar`,nodeToSpaceNames:h,userSpaceNames:m,tabs:c,getSource:l,getSpec:g};t.SpaceSpec=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Peer",{enumerable:!0,get:function(){return o.Peer}}),Object.defineProperty(t,"Config",{enumerable:!0,get:function(){return n.Config}}),Object.defineProperty(t,"Constants",{enumerable:!0,get:function(){return i.Constants}}),Object.defineProperty(t,"CommentCommand",{enumerable:!0,get:function(){return s.CommentCommand}}),Object.defineProperty(t,"Listing",{enumerable:!0,get:function(){return a.Listing}}),Object.defineProperty(t,"ListingOracle",{enumerable:!0,get:function(){return a.ListingOracle}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return a.SpaceSpec}}),Object.defineProperty(t,"Page",{enumerable:!0,get:function(){return u.Page}}),Object.defineProperty(t,"Query",{enumerable:!0,get:function(){return c.Query}}),Object.defineProperty(t,"Schema",{enumerable:!0,get:function(){return p.Schema}}),Object.defineProperty(t,"Thing",{enumerable:!0,get:function(){return d.Thing}}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return d.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return d.ThingDataNode}}),Object.defineProperty(t,"Validation",{enumerable:!0,get:function(){return l.Validation}}),Object.defineProperty(t,"Promise",{enumerable:!0,get:function(){return g.Promise}}),Object.defineProperty(t,"Tabulator",{enumerable:!0,get:function(){return h.Tabulator}}),t.default=void 0;var o=r(30),n=r(3),i=r(8),s=r(24),a=r(25),u=r(44),c=r(2),p=r(4),d=r(6),l=r(17),g=r(1),h=r(45),m=o.Peer.init;t.default=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Peer=void 0;var o=r(17),n=r(2),i=r(6),s=r(34);const a={init:function(e,t={}){const{leech:r,disableValidation:a,noGun:u,localStorage:c,persist:p,...d}=t||{},l={config:t};if(!u){const t={localStorage:!!c,radisk:!!p,...d};p&&(t.localStorage=!1),a||e.on("opt",o.Validation.gunWireInput(l)),t.storeFn&&(t.store=t.storeFn(t)),l.gun=e(t),t.localStorage&&l.gun.on("localStorage:error",e=>e.retry({})),r&&(()=>l.gun._.on("out",{leech:!0}))()}return l.newScope=(e=>n.Query.createScope(l,e)),l.onLogin=s.Authentication.onLogin(l),l.signup=s.Authentication.signup(l),l.login=s.Authentication.login(l),l.logout=(()=>s.Authentication.logout(l)),l.isLoggedIn=(()=>s.Authentication.isLoggedIn(l)),l.submit=i.Thing.submit(l),l.comment=i.Thing.comment(l),l.chat=i.Thing.chat(l),l.writePage=i.Thing.writePage(l),l.vote=i.Thing.vote(l),l.queries=n.Query,l}};t.Peer=a},function(e,t){e.exports=s},function(e,t){e.exports=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return c.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return p.ThingDataNode}}),t.Thing=void 0;var o,n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),i=r(1),s=(o=r(18))&&o.__esModule?o:{default:o},a=r(23),u=r(4),c=r(21),p=r(22);const d={chatmsg:"chat:",comment:"comments:"},l=n.compose(n.prop("thingId"),u.Schema.Thing.route.match.bind(u.Schema.Thing.route)),g=n.map(l),h=n.curry((e,t,r)=>{if(!r.topic&&!r.opId)return;if(r.opId&&!r.topic)return void e.gun.get(u.Schema.Thing.route.reverse({thingId:r.opId})).get("data").on(function(o){o&&(h(e,t,{...r,topic:o.topic||"all"}),this.off())});const o=e.gun.get(u.Schema.Thing.route.reverse({thingId:t})),n=c.ThingSet.dayStr(r.timestamp),[i,s,p]=n.split("/"),l=d[r.kind]||"",g=l+r.topic.toLowerCase().trim(),m=e.gun.get(u.Schema.Topic.route.reverse({topicName:g})),f=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:g,year:i,month:s,day:p}));if(!r.skipAll&&"all"!==r.topic){const t=`${l}all`,r=e.gun.get(u.Schema.Topic.route.reverse({topicName:t})),n=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:t,year:i,month:s,day:p}));r.set(o),n.set(o)}if("submission"===r.kind){const t=r.url?(0,a.parse)(r.url):{},n=(r.url?(t.host||t.scheme||"").replace(/^www\./,""):`self.${r.topic}`).toLowerCase();if(e.gun.get(u.Schema.Domain.route.reverse({domainName:n})).set(o),r.url){e.gun.get(u.Schema.URL.route.reverse({url:r.url})).set(o)}}if(r.opId){e.gun.get(u.Schema.ThingAllComments.route.reverse({thingId:r.opId})).set(o)}if(r.replyToId||r.opId){e.gun.get(u.Schema.ThingComments.route.reverse({thingId:r.replyToId||r.opId})).set(o)}m.set(o),f.set(o)}),m=n.curry((e,t)=>{t.timestamp=t.timestamp||(new Date).getTime();const r=(0,s.default)(t),{timestamp:o,kind:n,topic:i,authorId:a,opId:c,replyToId:p}=t,d=(0,s.default)({timestamp:o,kind:n,topic:i,authorId:a,opId:c,replyToId:p,originalHash:r}),l=e.gun.get(u.Schema.Thing.route.reverse({thingId:d})),g=a?u.Schema.ThingDataSigned.route.reverse({thingId:d,authorId:a}):u.Schema.ThingData.route.reverse({thingId:r}),m={id:d,timestamp:o,kind:n,originalHash:r,data:{"#":g},votesup:{"#":u.Schema.ThingVotesUp.route.reverse({thingId:d})},votesdown:{"#":u.Schema.ThingVotesDown.route.reverse({thingId:d})},allcomments:{"#":u.Schema.ThingAllComments.route.reverse({thingId:d})},comments:{"#":u.Schema.ThingComments.route.reverse({thingId:d})}};return i&&(m.topic={"#":u.Schema.Topic.route.reverse({topicName:i})}),a&&(m.author={"#":`~${a}`}),c&&(m.op={"#":u.Schema.Thing.route.reverse({thingId:c})}),p&&(m.replyTo={"#":u.Schema.Thing.route.reverse({thingId:p})}),e.gun.get(g).put(t),l.put(m),h(e,d,t),l}),f=n.curry((e,t)=>{const r=t.timestamp||(new Date).getTime(),o=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),t.domain&&(t.domain=t.domain.toLowerCase().trim()),o&&(t.author=o.alias,t.authorId=o.pub);const n=m(e,{...t,timestamp:r,kind:"submission"});if(o){const t=u.Schema.AuthorThings.route.reverse({authorId:o.pub}),r=u.Schema.AuthorSubmissions.route.reverse({authorId:o.pub}),i=e.gun.get(t),s=e.gun.get(r);e.gun.user().get("things").put(i),e.gun.user().get("submissions").put(s),i.set(n),s.set(n)}return n}),y=n.curry((e,t)=>{const r=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),r&&(t.author=r.alias,t.authorId=r.pub);const o=m(e,{...t,kind:"comment"});if(r){const t=u.Schema.AuthorThings.route.reverse({authorId:r.pub}),n=u.Schema.AuthorComments.route.reverse({authorId:r.pub}),i=e.gun.get(t),s=e.gun.get(n);e.gun.user().get("things").put(i),e.gun.user().get("comments").put(s),i.set(o),s.set(o)}return o}),b=n.curry((e,t)=>{const r=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),r&&(t.author=r.alias,t.authorId=r.pub);const o=m(e,{...t,kind:"chatmsg"});if(r){const t=u.Schema.AuthorThings.route.reverse({authorId:r.pub}),n=e.gun.get(t);e.gun.user().get("things").put(n),n.set(o)}return o}),O=n.curry((e,t,r)=>{const o=e.isLoggedIn();if(!o)return i.Promise.reject("not logged in");let n;const s=u.Schema.AuthorPages.route.reverse({authorId:o.pub}),a=e.gun.get(s).get(t);return a.then(i=>{if(i&&i.data)a.get("data").get("body").put(r);else{const i={body:r,title:t,kind:"wikipage",author:o.alias,authorId:o.pub};n=m(e,i),a.put(n)}})}),P=n.curry((e,t,r,o)=>{return e.gun.get(u.Schema["up"===r?"ThingVotesUp":"ThingVotesDown"].route.reverse({thingId:t})).get(o).put("1")}),S={soulToId:l,soulsToIds:g,put:m,submit:f,comment:y,chat:b,writePage:O,vote:P,index:h};t.Thing=S},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Authentication=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1);const i={signup:o.curry((e,t,r,o={})=>new n.Promise((i,s)=>{if(e&&e.gun&&e.gun.user){const a=e.gun.user();n.Promise.resolve(a.create(t,r,o=>{o.err?(s(o.err),a.leave(),e.gun.user().leave()):e.login(t,r).then(i)},o))}else s("SEA is not loaded")})),login:o.curry((e,t,r)=>new n.Promise((o,n)=>{if(e&&e.gun&&e.gun.user){e.gun.user().auth(t,r,t=>t.err?n(t.err):o(e.gun.user().is))}else n("SEA is not loaded")}).then(t=>(e._onLogin&&e._onLogin(t),t))),logout:e=>e.gun.user().leave(),isLoggedIn:e=>e.gun&&e.gun.user&&e.gun.user().is,onLogin:o.curry((e,t)=>e._onLogin=t)};t.Authentication=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingQuery=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(8),s=r(9),a=r(11),u=r(14);const c=(0,n.query)((e,t,r={})=>{const i=a.ListingFilter.thingFilter(e,t),u=o.map(e=>[e,-1/0],t.stickyIds);return t.dataSource.query?t.dataSource.query(e).then(o=>{const n=s.ListingNode.itemsToRows([...u,...o]);return a.ListingFilter.getFilteredRows(e,t,n,{...r,filterFn:i})}):(0,n.resolve)([])}),p=(0,n.query)((e,t,r={})=>{}),d=(0,n.query)((e,t,r)=>c(e,t,r).then(o.compose(s.ListingNode.serialize(t),s.ListingNode.rowsToItems))),l=(0,n.query)((e,t,r={})=>{const n=a.ListingFilter.thingFilter(e,t),i=o.pathOr([],["dataSource","listingPaths"],t),u=o.map(e=>[-1,e,-1/0],t.stickyIds),c=o.map(s.ListingNode.soulFromPath(r.indexer||t.indexer),i);return s.ListingNode.rowsFromSouls(e,c).then(o=>a.ListingFilter.getFilteredIds(e,t,[...u,...o],{...r,filterFn:n}))}),g=(0,n.query)((e,t,r={})=>(r.calculate?p:l)(e,t,r)),h=(0,n.query)((e,t,r)=>{const o=u.ListingType.fromPath(t);return o?o.getSpec(e,o.match).then(n=>n.hasIndexer&&!r.calculate?o&&o.read?o.read(e,o.match,r):s.ListingNode.read(e,t,r):g(e,n,r)):Promise.resolve([])}),m=(0,n.query)((e,t,r)=>u.ListingType.specFromPath(e,t).then(t=>d(e,t,o.mergeLeft(r,{limit:i.Constants.LISTING_SIZE})))),f={fromSpec:g,fromPath:h,calculateRows:c,toNode:d,nodeFromPath:m};t.ListingQuery=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChatListing=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=[...r(15).TopicListing.tabs,"chat"],p=(0,n.query)((e,{topic:t,sort:r})=>s.Query.wikiPage(e,i.Config.indexer,"listing:chat:sidebar")),d=(0,n.query)((e,{topic:t,sort:r})=>{const n=a.Path.splitTopics(t),s="all"===t?"whatever":n[0]||"whatever",p=n.reduce((e,t)=>[...e,`chat:${t}`],[]);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:chat",["sort new","display as chat",`submit to ${s}`,`sort ${r}`,...o.map(e=>`topic ${e}`,p),...o.map(e=>`tab ${e} /t/${t}/${e}`,c)].join("\n"))}),l=(0,n.query)((e,t)=>d(e,t).then(u.ListingSpec.fromSource)),g=a.Path.withRoute({path:"/t/:topic/chat",getSidebar:p,getSource:d,getSpec:l});t.ChatListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FirehoseListing=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=r(15).TopicListing.tabs,p=(0,n.query)(e=>s.Query.wikiPage(e,i.Config.indexer,"listing:firehose:sidebar")),d=(0,n.query)((e,{topic:t,sort:r})=>{const n=a.Path.splitTopics(t),s="all"===t?"whatever":n[0]||"whatever",p=n.reduce((e,t)=>[...e,t,`chat:${t}`,`comments:${t}`],[]);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:firehose",["sort new","display as chat",`submit to ${s}`,`sort ${r}`,...o.map(e=>`topic ${e}`,p),...o.map(e=>`tab ${e} /t/${t}/${e}`,c)].join("\n"))}),l=(0,n.query)((e,t)=>d(e,t).then(u.ListingSpec.fromSource)),g=a.Path.withRoute({tabs:c,path:"/t/:topic/firehose",getSidebar:p,getSource:d,getSpec:l});t.FirehoseListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentedListing=void 0;var o=r(1),n=r(3),i=r(2),s=r(7),a=r(5);const u=(0,o.query)(e=>i.Query.wikiPage(e,n.Config.indexer,"listing:commented:sidebar")),c=(0,o.query)((e,{authorId:t,sort:r})=>a.ListingSpec.getSource(e,n.Config.indexer,"listing:commented",[`curator ${t}`,`sort ${r}`].join("\n"))),p=(0,o.query)((e,t)=>c(e,t).then(a.ListingSpec.fromSource)),d=s.Path.withRoute({path:"/user/:authorId/commented/:sort",getSidebar:u,getSource:c,getSpec:p});t.CommentedListing=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomainListing=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=["hot","new","discussed","controversial","top"],p=(0,n.query)(e=>s.Query.wikiPage(e,i.Config.indexer,"listing:domain:sidebar")),d=(0,n.query)((e,{domain:t,sort:r})=>{const n=a.Path.splitTopics(t);return u.ListingSpec.getSource(e,i.Config.indexer,"listing:domain",[`name ${n[0]}`,"submit to whatever",`sort ${r}`,"kind submission",...o.map(e=>`domain ${e}`,n),...o.map(e=>`tab ${e} /domain/${t}/${e}`,c)].join("\n"))}),l=(0,n.query)((e,t)=>d(e,t).then(u.ListingSpec.fromSource)),g=a.Path.withRoute({path:"/domain/:domain/:sort",tabs:c,getSidebar:p,getSource:d,getSpec:l});t.DomainListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentListing=void 0;var o=r(1),n=r(3),i=r(2),s=r(7),a=r(5);const u=(0,o.query)(e=>i.Query.wikiPage(e,n.Config.indexer,"listing:comments:sidebar")),c=(0,o.query)((e,{thingId:t,sort:r})=>a.ListingSpec.getSource(e,n.Config.indexer,"listing:comments",[`op ${t}`,`sort ${r}`].join("\n"))),p=(0,o.query)((e,t)=>c(e,t).then(a.ListingSpec.fromSource)),d=s.Path.withRoute({path:"/things/:thingId/comments/:sort",getSidebar:u,getSource:c,getSpec:p});t.CommentListing=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceListing=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(4),s=r(10),a=r(2),u=r(7),c=r(9),p=r(16),d=r(28);const l=(0,n.query)((e,{authorId:t,name:r,sort:o})=>d.SpaceSpec.getSource(e,t,r,`sort ${o}`)),g=(0,n.query)((e,{authorId:t,name:r,sort:o})=>d.SpaceSpec.getSpec(e,t,r,`sort ${o}`)),h=(0,n.query)((e,{authorId:t,name:r,sort:o})=>a.Query.wikiPage(e,t,d.SpaceSpec.sidebarPageName(r))),m=u.Path.withRoute({path:"/user/:authorId/spaces/:name/:sort",getSource:l,getSidebar:h,getSpec:g,onPut:async(e,t,{updatedSoul:r,diff:n,original:a,latest:u=0})=>{const d=e.newScope(),l=s.GunNode.decodeSEA(a),h=s.GunNode.decodeSEA(n),[m,f]=c.ListingNode.categorizeDiff(h,l),y=await g(d,t.match),b=i.Schema.ThingVoteCounts.route.match(r),O=i.Schema.Thing.route.match(r),{thingId:P}=i.Schema.ThingDataSigned.route.match(r)||{},S=i.Schema.SEAAuthor.route.match(r);b&&m.push(b.thingId),O&&m.push(O.thingId),P&&P!==y.fromPageId&&m.push(P),await p.ListingOracle.updateListing(e,t,d,y,m,f);for(const r in d.getAccesses())e.listen(r,t.soul);if(o.prop("size",a)||m.length||f.length||S)return;console.log("---STANDARD SPACE UPDATE---",t.soul,r);const I=await e.newScope().get(t.soul),v=c.ListingNode.itemKeys(I);v.length&&t.write({size:0,...v.reduce((e,t)=>(e[`${t}`]=null,e),{})}),e.work({id:`update:${t.soul}`,soul:t.soul,method:"doUpdate",priority:t.priority||50})}});t.SpaceListing=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InboxListing=void 0;var o=r(1),n=r(3),i=r(2),s=r(10),a=r(4),u=r(6),c=r(7),p=r(5),d=r(9),l=r(16);const g=(0,o.query)(e=>i.Query.wikiPage(e,n.Config.indexer,"listing:topic:sidebar")),h=(0,o.query)((e,{authorId:t,type:r,sort:o="new"})=>p.ListingSpec.getSource(e,n.Config.indexer,"listing:inbox",[`replies to author ${t}`,"kind comment",`type ${r}`,`sort ${o}`].join("\n"))),m=(0,o.query)((e,t)=>h(e,t).then(p.ListingSpec.fromSource)),f=c.Path.withRoute({path:"/user/:authorId/replies/:type/:sort",getSidebar:g,getSource:h,getSpec:m,onPut:async(e,t,{updatedSoul:r,diff:o})=>{const n=e.newScope(),i=s.GunNode.decodeSEA(o),[c]=d.ListingNode.categorizeDiff(i),p=await m(n,t.match);let g=u.ThingSet.ids(i);for(let e=0;e<c.length;e++){const t=c[e],r=u.ThingSet.ids(await n.get(a.Schema.ThingComments.route.reverse({thingId:t})).then());g=g.concat(r)}g.length&&await l.ListingOracle.updateListing(e,t,n,p,g,[]);for(const r in n.getAccesses())e.listen(r,t.soul)}});t.InboxListing=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProfileListing=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(3),s=r(2),a=r(7),u=r(5);const c=["overview","comments","submitted","commands"],p=(0,n.query)(e=>s.Query.wikiPage(e,i.Config.indexer,"listing:profile:sidebar")),d=(0,n.query)((e,{authorId:t,type:r,sort:n})=>u.ListingSpec.getSource(e,i.Config.indexer,"listing:profile",[`author ${t}`,`type ${r}`,`sort ${n}`,...o.map(e=>`tab ${e} /user/${t}/${e}`,c)].join("\n"))),l=(0,n.query)((e,t)=>s.Query.userMeta(e,t.authorId).then(r=>d(e,t).then(o.pipe(u.ListingSpec.fromSource,o.mergeLeft({profileId:t.authorId,displayName:o.propOr("","alias",r)}))))),g=a.Path.withRoute({path:"/user/:authorId/:type/:sort",tabs:c,getSidebar:p,getSource:d,getSpec:l});t.ProfileListing=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Page=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(3),s=r(2),a=r(25);const u=o.mergeLeft({withMatch:({params:{authorId:e=i.Config.owner,name:t}})=>({preload:r=>s.Query.wikiPage(r,e,t)})}),c=(e,t)=>{if(!e)return{preload:(0,n.query)(o.always((0,n.resolve)({}))),sidebar:(0,n.query)(o.always((0,n.resolve)(""))),space:(0,n.query)(o.always((0,n.resolve)(a.ListingSpec.fromSource("")))),ids:(0,n.query)(o.always((0,n.resolve)([])))};const r=(0,n.query)((t,r={})=>a.Listing.fromPath(t,e,r),`ids:${e}`);return{preload:r=>p(r,e,t),sidebar:(0,n.query)(t=>a.Listing.sidebarFromPath(t,e),`sidebar:${e}`),space:(0,n.query)(t=>a.Listing.specFromPath(t,e)),ids:(0,n.query)((e,n={})=>r(e,o.mergeLeft(n,t)))}},p=async(e,t,r)=>{const n=c(t,r);let[u,d]=await Promise.all([n.space(e),n.ids(e,{}),n.sidebar(e)]);u||(u=a.ListingSpec.fromSource(""));const l=a.Listing.idsToSouls(d),[g]=await Promise.all([s.Query.multiThingMeta(e,{thingSouls:l,tabulator:u.tabulator||i.Config.tabulator,scores:!0,data:!0}),...o.map(t=>s.Query.userMeta(e,t),o.uniq([u&&u.indexer,u&&u.owner,u&&u.tabulator]))]),h=o.compose(o.without(d),o.filter(o.identity),o.uniq,o.map(o.pathOr(null,["data","opId"])))(g);if(h.length){const t=a.Listing.idsToSouls(h);await s.Query.multiThingMeta(e,{thingSouls:t,tabulator:u.tabulator||i.Config.tabulator,data:!0})}if(u.chatTopic){`/t/${u.chatTopic}/chat`!==t&&await p(e,`/t/${u.chatTopic}/chat`,{})}return e.getCache()},d={withListingMatch:c,preloadListing:p,wikiPage:u,thingComments:({prefix:e="t",identifier:t="all",sort:r="best",...n}={})=>({...n,withMatch:({params:{opId:n,prefix:i=e,identifier:s=t,sort:u=r},query:p})=>c(a.ListingType.CommentListing.route.reverse({thingId:n,sort:u}),o.assoc("limit",1e3,p))}),listing:({prefix:e="t",identifier:t="all",sort:r="hot",...o}={})=>({...o,withMatch:({params:{prefix:o=e,identifier:n=t,sort:i=r},query:s})=>c(`/${o}/${n}/${i}`,s)}),spaceListing:({name:e="default",authorId:t,sort:r="default",...o}={})=>({...o,withMatch:({params:{authorId:o=t,name:n=e,sort:s=r},query:u})=>c(a.ListingType.SpaceListing.route.reverse({authorId:o||i.Config.owner,name:n,sort:s}),u)}),spaceThingComments:({name:e="default",authorId:t,sort:r="hot",...o})=>({...o,withMatch:({params:{opId:o,authorId:n=t,name:s=e,sort:u=r},query:c})=>{const d=a.ListingType.SpaceListing.route.reverse({authorId:n||i.Config.owner,name:s,sort:u}),l=a.ListingType.CommentListing.route.reverse({thingId:o,sort:u});return{space:c(e=>a.Listing.specFromPath(e,d,c),`spec:${d}`),ids:c(e=>a.Listing.fromPath(e,l,c),l),preload:e=>p(e,l,c)}}}),profile:({sort:e="new",type:t="overview",...r}={})=>({...r,withMatch:({params:{authorId:r,type:o=t,sort:n=e},query:i})=>c(a.ListingType.ProfileListing.route.reverse({authorId:r,type:o,sort:n}),i)}),inbox:({sort:e="new",type:t="overview",...r}={})=>({...r,withMatch:({authorId:r,params:{type:o=t,sort:n=e},query:i})=>c(a.ListingType.InboxListing.route.reverse({authorId:r,type:o,sort:n}),i)})};t.Page=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tabulator=void 0;var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};o.get||o.set?Object.defineProperty(t,r,o):t[r]=e[r]}return t.default=e,t}(r(0)),n=r(1),i=r(4),s=r(2),a=r(24);const u={query:(0,n.query)(async(e,t)=>{const r=i.Schema.Thing.route.reverse(t.match),[u,c,p,d]=await(0,n.all)([e.get(`${r}/votesup`).count(),e.get(`${r}/votesdown`).count(),e.get(`${r}/allcomments`).count(),e.get(`${r}/comments`).souls()]),l=await s.Query.thingDataFromSouls(d),g=a.CommentCommand.map(l),h={up:u,down:c,comment:p,replies:d.length,score:u-c};return o.keys(g).length&&(h.commands=JSON.stringify(g)),h})};t.Tabulator=u}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,