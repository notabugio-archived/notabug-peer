!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):"function"==typeof define&&define.amd?define("notabug-peer",["ramda","gun-scope","object-hash","gun-suppressor-sear","route-parser","uri-js","gun-suppressor","argon2"],t):"object"==typeof exports?exports["notabug-peer"]=t(require("ramda"),require("gun-scope"),require("object-hash"),require("gun-suppressor-sear"),require("route-parser"),require("uri-js"),require("gun-suppressor"),require("argon2")):e["notabug-peer"]=t(e.ramda,e["gun-scope"],e["object-hash"],e["gun-suppressor-sear"],e["route-parser"],e["uri-js"],e["gun-suppressor"],e.argon2)}("undefined"!=typeof self?self:this,function(e,t,n,r,o,i,a,s){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=24)}([function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Schema=void 0;var r,o=u(n(0)),i=(r=n(18))&&r.__esModule?r:{default:r},a=u(n(17)),s=n(8);function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var p={...a.AUTH_SCHEMA,topicName:{type:"string",minLength:1,maxLength:s.Constants.MAX_TOPIC_SIZE},TopicDay:{title:"Topic Day",description:"A single day of things in a topic",soul:{pattern:"".concat(s.Constants.PREFIX,"/topics/:topicName/days/:year/:month/:day"),properties:{topicName:{$ref:"schema.json#/definitions/topicName"},year:{type:"number",minimum:2018,maximum:2100},month:{type:"number",minimum:1,maximum:12},day:{type:"number",minimum:1,maximum:31}},required:["topicName","year","month","day"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},Topic:{title:"Topic",description:"All things in a topic",soul:{pattern:"".concat(s.Constants.PREFIX,"/topics/:topicName"),properties:{topicName:{$ref:"schema.json#/definitions/topicName"}},required:["topicName"]},propsFromSoul:{name:"topicName"},properties:{name:{description:"Deprecated as unnecessary",type:"string"}},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"},{$ref:"#/definitions/TopicEdge"}]}},domainName:{type:"string",minLength:1,maxLength:s.Constants.MAX_DOMAIN_SIZE},Domain:{title:"Domain",description:"All things in a domain",soul:{pattern:"".concat(s.Constants.PREFIX,"/domains/:domainName"),properties:{domainName:{$ref:"schema.json#/definitions/domainName"}},required:["domainName"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},url:{type:["null","string"],maxLength:s.Constants.MAX_URL_SIZE},URL:{title:"URL",description:"All things for a given URL",soul:{pattern:"".concat(s.Constants.PREFIX,"/urls/*url"),properties:{url:{$ref:"schema.json#/definitions/url"}},required:["url"]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},thingId:{type:"string",maxLength:s.Constants.MAX_HASH_SIZE},thingSoul:{properties:{thingId:{"#ref":"#definitions/thingId"}}},ThingAllComments:{title:"Thing All Comments",description:"All comments for a given submission",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/allcomments"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},ThingComments:{title:"Thing Comments",description:"Direct replies to a thing",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/comments"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},additionalProperties:{edgeMatchesKey:!0,anyOf:[{$ref:"#/definitions/ThingEdge"}]}},timestamp:{type:["number","string"]},thingKind:{type:"string",maxLength:s.Constants.MAX_THING_KIND_SIZE},Thing:{title:"Thing Reference",description:"These are submissions, comments, chat messages and wiki pages",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},propsFromSoul:{id:"thingId"},properties:{id:{$ref:"#/definitions/thingId"},kind:{"#ref":"#/definitions/thingKind"},timestamp:{$ref:"#/definitions/timestamp"},originalHash:{$ref:"#/definitions/thingId"},data:{oneOf:[{$ref:"#/definitions/ThingDataEdge"},{$ref:"#/definitions/ThingDataSignedEdge"}]},topic:{anyOf:[{$ref:"#/definitions/TopicEdge"},{description:"Some old things had generic topic souls",type:"object",additionalProperties:!1,properties:{"#":{type:"string",maxLength:42}},required:["#"]}]},domain:{$ref:"#/definitions/DomainEdge"},url:{$ref:"#/definitions/URLEdge"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"},op:{$ref:"#/definitions/ThingEdge"},replyTo:{$ref:"#/definitions/ThingEdge"},author:{$ref:"#/definitions/SEAAuthorEdge"}},anyOf:[{allOf:[{thingHashMatchesSoul:!0},{anyOf:[{signedThingDataMatchesThing:!0},{thingDataMatchesOriginalHash:!0}]}]},{isLegacyThing:!0},{additionalProperties:!1,description:"Self verifying can be updated in isolation",properties:{id:{$ref:"#/definitions/thingId"},comments:{thingRelatedEdge:"ThingComments"},allcomments:{thingRelatedEdge:"ThingAllComments"},votesup:{thingRelatedEdge:"ThingVotesUp"},votesdown:{thingRelatedEdge:"ThingVotesDown"}}}]},ProofOfWorkVotes:{$async:!0,keysAreProofsOfWork:{algorithm:"argon2d",config:{complexity:6,hashLength:32,timeCost:1,memoryCost:10240,parallelism:1}}},ThingVotesUp:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votesup"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingVotesDown:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votesdown"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}]},allOf:[{$ref:"#/definitions/ProofOfWorkVotes"}]},ThingData:{title:"Unsigned Thing Data",description:"This is the actual content of a thing",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/data"),allOf:[{$ref:"schema.json#/definitions/thingSoul"}],required:["thingId"]},properties:{kind:{$ref:"#/definitions/thingKind"},title:{type:"string",minLength:1,maxLength:s.Constants.MAX_THING_TITLE_SIZE},topic:{$ref:"#/definitions/topicName"},body:{type:["null","string"],maxLength:s.Constants.MAX_THING_BODY_SIZE},author:{$ref:"#/definitions/seaAlias"},authorId:{$ref:"#/definitions/seaAuthorId"},opId:{$ref:"#/definitions/thingId"},replyToId:{$ref:"#/definitions/thingId"},domain:{$ref:"#/definitions/domainName"},url:{$ref:"#/definitions/url"},timestamp:{$ref:"#/definitions/timestamp"}},thingDataHashMatchesSoul:!0},ThingDataSigned:{title:"Signed Thing Data",description:"This is the actual content of a thing, cryptographically signed",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/data~:authorId."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["thingId","authorId"]},properties:{kind:{sea:{$ref:"schema.json#/definitions/thingKind"}},title:{sea:{type:"string",minLength:1,maxLength:s.Constants.MAX_THING_TITLE_SIZE}},topic:{sea:{$ref:"schema.json#/definitions/topicName"}},body:{sea:{type:["null","string"],maxLength:s.Constants.MAX_THING_BODY_SIZE}},author:{sea:{$ref:"schema.json#/definitions/seaAlias"}},authorId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},replyToId:{sea:{$ref:"schema.json#/definitions/thingId"}},domain:{sea:{$ref:"schema.json#/definitions/domainName"}},url:{sea:{$ref:"schema.json#/definitions/url"}},timestamp:{sea:{$ref:"schema.json#/definitions/timestamp"}}}},ThingVoteCounts:{title:"Thing Vote Counts",description:"Aggregated counts from a tabulator",soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/votecounts@~:tabulator."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},tabulator:{$ref:"schema.json#/definitions/seaAuthorId"}}},properties:{up:{sea:{type:["number","string"]}},down:{sea:{type:["number","string"]}},comment:{sea:{type:["number","string"]}},score:{sea:{type:["number","string"]}},commands:{sea:{type:["object","string"]}}}},ListingData:{$async:!0,title:"Listing Node Data",description:"Shared description of listing properties",type:"object",properties:{ids:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_IDS_SIZE}},source:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},name:{sea:{type:["string","null"],maxLength:s.Constants.MAX_TOPIC_SIZE}},submitTopic:{sea:{type:"string",maxLength:s.Constants.MAX_TOPIC_SIZE}},tabs:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_TABS_SIZE}},curators:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},censors:{sea:{type:"string",maxLength:s.Constants.MAX_LISTING_SOURCE_SIZE}},userId:{sea:{$ref:"schema.json#/definitions/seaAuthorId"}},opId:{sea:{$ref:"schema.json#/definitions/thingId"}},isChat:{sea:{type:["boolean","string"]}}},patternProperties:{"^d+$":{sea:{type:"string"}}}},sortName:{type:"string",enum:["new","old","active","top","comments","discussed","hot","best","controversial","random","firehose","chat"]},TopicListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/t/:topic/:sort@~:indexer."),properties:{topic:{$ref:"schema.json#/definitions/topicName"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},DomainListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/domain/:domain/:sort@~:indexer."),properties:{domain:{$ref:"schema.json#/definitions/domainName"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},ThingCommentsListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/things/:thingId/comments/:sort@~:indexer."),properties:{thingId:{$ref:"schema.json#/definitions/thingId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"}}},allOf:[{$ref:"#/definitions/ListingData"}]},userListingType:{type:"string",enum:["overview","submitted","comments","commands","commented"]},AuthorRepliesListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/replies/:type/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorProfileListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/:type/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},type:{$ref:"schema.json#/definitions/userListingType"}}},allOf:[{$ref:"#/definitions/ListingData"}]},SpaceListing:{soul:{pattern:"".concat(s.Constants.PREFIX,"/user/:authorId/spaces/:name/:sort@~:indexer."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"},sort:{$ref:"schema.json#/definitions/sortName"},indexer:{$ref:"schema.json#/definitions/seaAuthorId"},name:{$ref:"schema.json#/definitions/topicName"}}},allOf:[{$ref:"#/definitions/ListingData"}]},AuthorComments:{title:"Author's Comments",description:"All of an authors comments should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/comments~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorSubmissions:{title:"Author's Submissions",description:"All of an author's submissions should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/submissions~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]}},AuthorThings:{title:"Author's Things",description:"All of an author's things should be linked here",soul:{pattern:"".concat(s.Constants.PREFIX,"/things~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}},AuthorPages:{title:"Author Page Map",description:"Mapping of page names to things",soul:{pattern:"".concat(s.Constants.PREFIX,"/pages~:authorId."),properties:{authorId:{$ref:"schema.json#/definitions/seaAuthorId"}},required:["authorId"]},additionalProperties:{sea:{edgeMatchesKey:!0,anyOf:[{$ref:"schema.json#/definitions/ThingEdge"}]}}}},l=o.keys(p).reduce(function(e,t){var n=o.path([t,"soul","pattern"],p);return n?o.assoc(t,new i.default(n),e):e}),d={...o.compose(o.reduce(function(e,t){var n=c(t,2),r=n[0],i=n[1];return o.assoc(r,o.assoc("route",i,o.prop(r,p)),e)},{}),o.toPairs)(l),definitions:p,routes:l};t.Schema=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Config=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(8);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var a={tabulator:o.Constants.DEV_INDEXER,indexer:o.Constants.DEV_INDEXER,owner:o.Constants.DEV_INDEXER,update:r.compose(r.map(function(e){var t=i(e,2),n=t[0],r=t[1];return a[n]=r}),r.toPairs)};t.Config=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return c.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return p.ThingDataNode}}),t.Thing=void 0;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=n(1),a=(r=n(16))&&r.__esModule?r:{default:r},s=n(19),u=n(2),c=n(28),p=n(29);function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var d=o.curry(function(e,t){t.timestamp=t.timestamp||(new Date).getTime();var n=(0,a.default)(t),r=t.timestamp,o=t.kind,i=t.topic,s=t.authorId,c=t.opId,p=t.replyToId,l=(0,a.default)({timestamp:r,kind:o,topic:i,authorId:s,opId:c,replyToId:p,originalHash:n}),d=e.gun.get(u.Schema.Thing.route.reverse({thingId:l})),f=s?u.Schema.ThingDataSigned.route.reverse({thingId:l,authorId:s}):u.Schema.ThingData.route.reverse({thingId:n}),g={id:l,timestamp:r,kind:o,originalHash:n,data:{"#":f},votesup:{"#":u.Schema.ThingVotesUp.route.reverse({thingId:l})},votesdown:{"#":u.Schema.ThingVotesDown.route.reverse({thingId:l})},allcomments:{"#":u.Schema.ThingAllComments.route.reverse({thingId:l})},comments:{"#":u.Schema.ThingComments.route.reverse({thingId:l})}};return i&&(g.topic={"#":u.Schema.Topic.route.reverse({topicName:i})}),s&&(g.author={"#":"~".concat(s)}),c&&(g.op={"#":u.Schema.Thing.route.reverse({thingId:c})}),p&&(g.replyTo={"#":u.Schema.Thing.route.reverse({thingId:p})}),e.gun.get(f).put(t),d.put(g),e.index(l,t),d}),f=o.curry(function(e,t){var n=t.timestamp||(new Date).getTime(),r=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),t.domain&&(t.domain=t.domain.toLowerCase().trim()),r&&(t.author=r.alias,t.authorId=r.pub);var o=d(e,{...t,timestamp:n,kind:"submission"});if(r){var i=u.Schema.AuthorThings.route.reverse({authorId:r.pub}),a=u.Schema.AuthorSubmissions.route.reverse({authorId:r.pub}),s=e.gun.get(i),c=e.gun.get(a);e.gun.user().get("things").put(s),e.gun.user().get("submissions").put(c),s.set(o),c.set(o)}return o}),g=o.curry(function(e,t){var n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);var r=d(e,{...t,kind:"comment"});if(n){var o=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),i=u.Schema.AuthorComments.route.reverse({authorId:n.pub}),a=e.gun.get(o),s=e.gun.get(i);e.gun.user().get("things").put(a),e.gun.user().get("comments").put(s),a.set(r),s.set(r)}return r}),h=o.curry(function(e,t){var n=e.isLoggedIn();t.topic&&(t.topic=t.topic.toLowerCase().trim()),n&&(t.author=n.alias,t.authorId=n.pub);var r=d(e,{...t,kind:"chatmsg"});if(n){var o=u.Schema.AuthorThings.route.reverse({authorId:n.pub}),i=e.gun.get(o);e.gun.user().get("things").put(i),i.set(r)}return r}),m=o.curry(function(e,t,n){var r,o=e.isLoggedIn();if(!o)return i.Promise.reject("not logged in");var a=u.Schema.AuthorPages.route.reverse({authorId:o.pub}),s=e.gun.get(a).get(t);return s.then(function(i){if(i&&i.data)console.log("res",i),s.get("data").get("body").put(n);else{var a={body:n,title:t,kind:"wikipage",author:o.alias,authorId:o.pub};console.log("page data",a),r=d(e,a),s.put(r)}})}),y=o.curry(function(e,t,n,r){return e.gun.get(u.Schema["up"===n?"ThingVotesUp":"ThingVotesDown"].route.reverse({thingId:t})).get(r).put("1")}),v={chatmsg:"chat:",comment:"comments:"},b=o.curry(function(e,t,n){if(n.topic||n.opId)if(!n.opId||n.topic){var r=e.gun.get(u.Schema.Thing.route.reverse({thingId:t})),o=l(c.ThingSet.dayStr(n.timestamp).split("/"),3),i=o[0],a=o[1],p=o[2],d=v[n.kind]||"",f=d+n.topic.toLowerCase().trim(),g=e.gun.get(u.Schema.Topic.route.reverse({topicName:f})),h=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:f,year:i,month:a,day:p}));if(!n.skipAll&&"all"!==n.topic){var m="".concat(d,"all"),y=e.gun.get(u.Schema.Topic.route.reverse({topicName:m})),O=e.gun.get(u.Schema.TopicDay.route.reverse({topicName:m,year:i,month:a,day:p}));y.set(r),O.set(r)}if("submission"===n.kind){var I=n.url?(0,s.parse)(n.url):{},S=(n.url?(I.host||I.scheme||"").replace(/^www\./,""):"self.".concat(n.topic)).toLowerCase();if(e.gun.get(u.Schema.Domain.route.reverse({domainName:S})).set(r),n.url)e.gun.get(u.Schema.URL.route.reverse({url:n.url})).set(r)}if(n.opId)e.gun.get(u.Schema.ThingAllComments.route.reverse({thingId:n.opId})).set(r);if(n.replyToId||n.opId)e.gun.get(u.Schema.ThingComments.route.reverse({thingId:n.replyToId||n.opId})).set(r);g.set(r),h.set(r)}else e.gun.get(u.Schema.Thing.route.reverse({thingId:n.opId})).get("data").on(function(r){r&&(b(e,t,{...n,topic:r.topic||"all"}),this.off())})}),O={put:d,submit:f,comment:g,chat:h,writePage:m,vote:y,index:b};t.Thing=O},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(8),a=n(2),s=n(4),u=n(6);function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var d=(0,o.resolve)(null),f=r.reduce(r.union,[]),g=function(e){for(var t=(e||{}).topics,n=void 0===t?["all"]:t,o=r.propOr(365,"days",e)||365,a=[],u=(new Date).getTime()-864e5*parseInt(o,10),c=0;c<=o+1;c++)a.push(s.ThingSet.dayStr(u+864e5*c));return Object.keys(n.reduce(function(e,t){return a.reduce(function(e,n){return e["".concat(i.Constants.PREFIX,"/topics/").concat(t,"/days/").concat(n)]=!0,e},e)},{}))},h=(0,o.query)(function(e,t){var n=g({...t,topics:[t.topic]}),r=[],a=i.Constants.LISTING_SIZE;"new"===t.sort?a=i.Constants.LISTING_SIZE:("top"===t.sort&&(a*=3),"all"===t.topic&&(a*=3));return function t(){var i=n.pop();return r.length>a||!i?(0,o.resolve)(r):e.get(i).souls().then(function(e){return r=[].concat(l(r),l(e)),t()})}()}),m=(0,o.query)(function(e,t){var n=t.domain;return e.get(a.Schema.Domain.route.reverse({domainName:n})).souls()}),y=(0,o.query)(function(e,t){return(0,o.all)([t.type&&"submitted"!==t.type&&"overview"!==t.type?(0,o.resolve)([]):e.get(t.authorId).get("submissions").souls(),t.type&&"comments"!==t.type&&"overview"!==t.type&&"commands"!==t.type?(0,o.resolve)([]):e.get(t.authorId).get("comments").souls()]).then(function(e){var t=p(e,2),n=t[0],r=t[1];return f([n,r])})}),v=(0,o.query)(function(e,t){return e.get(t).then(u.ListingNode.sortedIds)},"listingIds"),b=(0,o.query)(function(e,t){var n=t.listing,o=t.sort,s=t.indexer;return v(e,"".concat(i.Constants.PREFIX).concat(n,"/").concat(o,"@~").concat(s,".")).then(r.compose(r.map(function(e){return a.Schema.Thing.route.reverse({thingId:e})}),r.filter(r.identity)))}),O=(0,o.query)(function(e,t){var n=t.repliesToAuthorId,r=t.type,i=void 0===r?"overview":r,a=c(t,["repliesToAuthorId","type"]);return b(e,{listing:"/user/".concat(n,"/").concat(i),sort:"new",...a}).then(function(t){return(0,o.all)(t.map(function(t){return e.get("".concat(t,"/comments")).souls()})).then(f)})}),I=(0,o.query)(function(e,t){return e.get(a.Schema.ThingAllComments.route.reverse({thingId:t.submissionId})).souls(r.prepend(a.Schema.Thing.route.reverse({thingId:t.submissionId})))}),S=(0,o.query)(function(e,t){return e.get(t).then(function(e){if(!e||!e.id)return null;var t={id:e.id,timestamp:parseFloat(e.timestamp,10)},n=r.path(["replyTo","#"],e),o=r.path(["op","#"],e),i=o?a.Schema.Thing.route.match(o).thingid:null,s=n?a.Schema.Thing.route.match(n).thingid:null;return i&&(t.opId=i),s&&(t.replyToId=s),t})}),P=function(e){return(0,o.query)(function(t,n){return t.get(n).get(e).count()})},j=P("votesup"),w=P("votesdown"),T=(0,o.query)(function(e,t){return e.get("".concat(t,"/allcomments")).count()}),_=(0,o.query)(function(e,t){return(0,o.all)([j(e,t),w(e,t),T(e,t)]).then(function(e){var t=p(e,3),n=t[0],r=t[1];return{up:n,down:r,comment:t[2],score:n-r}})}),L=(0,o.query)(function(e,t){var n=t.thingSoul,r=t.tabulator,i=t.data,a=void 0!==i&&i,s=t.scores,u=void 0!==s&&s;return n?(0,o.all)([S(e,n),u?r?e.get("".concat(n,"/votecounts@~").concat(r,".")).then():_(e,n).then():(0,o.resolve)(),a?e.get(n).get("data").then():(0,o.resolve)()]).then(function(e){var t=p(e,3),n=t[0],r=t[1],o=t[2];return n&&n.id?{...n,votes:r,data:o}:null}):(0,o.resolve)(null)}),A=(0,o.query)(function(e,t){return(0,o.all)(r.reduce(function(n,r){return r?(n.push(L(e,{...t,thingSoul:r})),n):n},[],r.propOr([],"thingSouls",t)))}),D=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:f;return(0,o.query)(function(a,s){var u=r.prop(t,s);return r.isNil(u)?d:(0,o.all)(r.map(function(t){return e(a,(r={...s},i=t,(o=n)in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r));var r,o,i},r.propOr([],t,s))).then(i)})},E=D(h,"topics","topic"),M=D(m,"domains","domain"),x=D(y,"authorIds","authorId"),C=D(I,"submissionIds","submissionId"),N=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return(0,o.all)([x(e,{type:"comments",authorIds:t}).then(function(e){return function(t){return(0,o.all)(t.filter(function(e){return!!e}).map(function(t){return e.get(t).get("data").then(function(e){return e})}))}}(e)).then(r.compose(r.map(n?r.prop("opId"):r.prop("replyToId")),r.filter(r.prop("replyToId")))),x(e,{type:"submitted",authorIds:t}).then(r.map(function(e){return a.Schema.Thing.route.match(e).thingId}))]).then(function(e){var t=p(e,2),n=t[0],o=t[1];return r.uniq([].concat(l(n),l(o)))})}),q=(0,o.query)(function(e,t,n){return t&&n?e.get(a.Schema.ThingVoteCounts.route.reverse({thingId:n,tabulator:t})).then():(0,o.resolve)()},"thingScores"),k=(0,o.query)(function(e,t){return e.get(a.Schema.ThingComments.route.reverse({thingId:t})).then()}),R=(0,o.query)(function(e,t){return t?e.get(a.Schema.Thing.route.reverse({thingId:t})).get("data"):(0,o.resolve)(null)},"thingData"),$=(0,o.query)(function(e,t){return e.get(a.Schema.AuthorPages.route.reverse({authorId:t}))},"userPages"),F=(0,o.query)(function(e,t,n){return e.get(a.Schema.AuthorPages.route.reverse({authorId:t})).get(n).get("id")},"wikiPageId"),X=(0,o.query)(function(e,t,n){return F(e,t,n).then(function(t){return t&&R(e,t)})}),V=(0,o.query)(function(e,t){return t?e.get("~".concat(t)).then(function(e){return{userAlias:r.prop("alias",e),createdAt:r.path(["_",">","pub"],e)}}):(0,o.resolve)(null)},"userMeta"),Z=r.curry(function(e,t){return(0,o.scope)(r.assoc("gun",e.gun,t||{}))}),G={singleTopic:h,singleDomain:m,singleAuthor:y,singleListing:b,repliesToAuthor:O,singleSubmission:I,computeThingScores:_,thingMeta:L,multiThingMeta:A,multiTopic:E,multiDomain:M,multiAuthor:x,multiSubmission:C,thingScores:q,thingReplies:k,thingData:R,topicSouls:g,userPages:$,wikiPageId:F,wikiPage:X,userMeta:V,createScope:Z,curated:N};t.Query=G},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(8),a=n(3);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function u(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var c,p,l=[0,1,2,3],d=l[0],f=l[1],g=l[2],h=r.map(r.prop(f)),m=r.map(r.slice(1,3)),y=r.propOr("","source"),v=r.curry(function(e,t){return"".concat(i.Constants.PREFIX).concat(t,"@~").concat(e,".")}),b=r.curry(function(e,t){return r.compose(r.ifElse(r.prop("length"),r.insert(0,parseInt(t,10)),r.always(null)),function(e){return e[1]=parseFloat(e[1]),e},r.map(r.trim),r.split(","),r.propOr("","".concat(t)))(e)}),O=r.compose(r.filter(r.compose(function(e){return!(0!==e&&!e)},parseInt)),r.keys),I=function(e){return r.compose(r.map(b(e)),O)(e)},S=r.compose(h,I),P=r.sortWith([r.ascend(r.compose(r.cond([[r.isNil,r.always(1/0)],[r.T,parseFloat]]),r.prop(g)))]),j=r.compose(r.map(r.prop(f)),P,r.filter(r.identity),I),w=(c=regeneratorRuntime.mark(function e(t){var n,o,i,a,u,c,p,l,h,m,y,v,O,I,S,j,w,T,_,L,A,D,E,M,x,C,N,q,k,R,$,F,X,V,Z,G,U,H,K,Q,z,B,W,Y=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=Y.length>1&&void 0!==Y[1]?Y[1]:[],o=Y.length>2&&void 0!==Y[2]?Y[2]:[],i=Y.length>3&&void 0!==Y[3]?Y[3]:{},a=i.maxSize,u=void 0===a?1e3:a,c=r.indexBy(r.identity,o),p={},l={},h=[],m={},y=[],v=0,e.t0=regeneratorRuntime.keys(t||{});case 11:if((e.t1=e.t0()).done){e.next=25;break}if(O=e.t1.value,(I=parseInt(O,10))||0===I){e.next=16;break}return e.abrupt("continue",11);case 16:S=b(t,O)||[I,null,null],j=s(S,3),w=j[0],T=j[1],_=void 0===T?null:T,L=j[2],A=void 0===L?null:L,S[g]=null===A?null:parseFloat(A),_&&c[_]&&(S[f]=S[g]=null),_&&(p[_]=S),S[f]?h.push(S):y.push(S),w>v&&(v=w),e.next=11;break;case 25:D=0;case 26:if(!(D<n.length)){e.next=35;break}if(E=n[D]||[null,null],M=s(E,2),x=M[0],C=M[1],x){e.next=30;break}return e.abrupt("continue",32);case 30:(N=p[x])?N[g]!==C&&(N[g]=C,m[x]=!0):(q=[null,x,C],h.push(q));case 32:D++,e.next=26;break;case 35:for(k=P(h),R=u?k.slice(0,u):k,$=u?k.slice(u,k.length):[],F=r.filter(function(e){return null===e[d]},R),y=y.concat(r.filter(function(e){return null!==e[d]},$)).reverse(),X=0;X<R.length;X++)V=R[X][f],Z=R[X][d],G=R[X][g],null!==Z&&m[V]&&(l["".concat(Z)]=[V,G].join(","));for(U=[];F.length;)H=F.pop(),K=y.pop(),Q=s(K||[null],1),null===(z=Q[0])&&(z=parseInt(v,10)+U.length+1,U.push(z)),l["".concat(z)]=[H[f],H[g]].join(",");for(;y.length;)(B=y.pop())&&!B[f]&&(W="".concat(B[d]),null!==t[W]&&(l[W]=null,console.log("nulling",W,t[W])));return e.abrupt("return",r.keys(l).length?l:null);case 45:case"end":return e.stop()}},e,this)}),p=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=c.apply(e,t);function i(e){u(o,n,r,i,a,"next",e)}function a(e){u(o,n,r,i,a,"throw",e)}i(void 0)})},function(e){return p.apply(this,arguments)}),T=r.compose(r.uniqBy(r.prop(f)),P,r.reduce(r.concat,[]),r.map(I)),_=(0,o.query)(function(e,t){return Promise.all(r.map(e.get,t)).then(T)}),L=(0,o.query)(function(e,t,n){var r=(n||{}).indexer,o=void 0===r?a.Config.indexer:r;return console.log("ListingNode.read",t),_(e,[v(o,t)]).then(h)},"listingRows"),A=(0,o.query)(function(e,t){return t?e.get(t):(0,o.resolve)(null)},"listing"),D={POS_IDX:d,POS_ID:f,POS_VAL:g,source:y,get:A,getRow:b,itemKeys:O,rows:I,ids:S,rowsToIds:h,rowsToItems:m,sortRows:P,sortedIds:j,soulFromPath:v,rowsFromSouls:_,read:L,diff:w,categorizeDiff:function(e,t){for(var n=O(r.mergeLeft(e,t)),o=[],i=[],a=0;a<n.length;a++){var u=n[a],c=s(b(e,u)||[],2),p=(c[0],c[1]),l=s(b(t,u),2),d=(l[0],l[1]);p!==d&&(p&&o.push(p),d&&i.push(d))}return[o,i]},unionRows:T};t.ListingNode=D},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSpec=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(5),a=n(4),s=n(21),u=n(12),c=n(11);var p={fromSource:r.compose(r.apply(r.mergeLeft),r.ap([c.ListingFilter.fromDefinition,r.identity]),r.of,r.apply(r.assoc("dataSource")),r.ap([u.ListingDataSource.fromDefinition,r.identity]),r.of,s.ListingDefinition.fromSource),getSource:(0,o.query)(function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return i.Query.wikiPage(e,t,n).then(r.compose(function(e){return"".concat(e,"\n# added by indexer\n").concat(o||"","\nsourced from page ").concat(t," ").concat(n,"\n")},a.ThingDataNode.body))})};t.ListingSpec=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Constants=void 0;var r={COMMAND_RE:/^ {4}~/,PREFIX:"nab",SOUL_DELIMETER:"|~~|",LISTING_SIZE:1e3,MAX_HASH_SIZE:64,MAX_POW_NONCE_SIZE:64,MAX_TOPIC_SIZE:42,MAX_AUTHOR_ALIAS_SIZE:256,MAX_AUTHOR_ID_SIZE:128,MAX_URL_SIZE:2048,MAX_DOMAIN_SIZE:256,MAX_THING_KIND_SIZE:16,MAX_THING_TITLE_SIZE:300,MAX_THING_BODY_SIZE:5e4,MAX_LISTING_IDS_SIZE:5e4,MAX_LISTING_SOURCE_SIZE:5e4,MAX_LISTING_TABS_SIZE:5e3,MAX_LISTING_SOUL_PREFIX_SIZE:42,MAX_LISTING_SOUL_IDENTIFIER_SIZE:128,MAX_LISTING_SOUL_SORT_SIZE:16,MAX_LISTING_SOUL_TYPE_SIZE:42,MAX_LISTING_SOUL_KIND_SIZE:16,DEFAULT_INDEXER:"CEyKrDd1xyPXpWSV00MgvnZY2VJLHXgzCvhMeDwKTYA.yjSq0DyXzzhB_ZXr_DzfJgij3tXU0-3t0Q5bJAtZpj8",DEV_INDEXER:"l2nSedlSlvomTqCYhmPnANoQLXe4sj5rR2OrC7YqPpU.zimaWwdlfyTrVITgwWoDVdbJQKReOTqV5zNjTRc-yQA"};t.Constants=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=(r=n(18))&&r.__esModule?r:{default:r};var a=o.compose(o.sortBy(o.identity),o.filter(o.identity),o.map(o.trim),o.split("+"),o.toLower,o.trim,o.defaultTo("")),s={splitDomains:a,splitTopics:o.compose(o.ifElse(o.prop("length"),o.identity,o.always(["all"])),a),withRoute:function(e){return o.assoc("route",new i.default(e.path),e)}};t.Path=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GunNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));var o=r.pathOr("",["_","#"]),i=r.pathOr({},["_",">"]);var a={soul:o,state:i,latest:r.compose(r.last,r.sortBy(r.identity),r.values,i),edges:r.compose(r.map(r.prop("#")),r.values),decodeSEA:function(e){var t=e?{...e}:e,n=r.path(["_","#"],t);return n&&Gun.SEA&&-1!==n.indexOf("~")?(r.without(["_"],r.keys(t)).forEach(function(r){Gun.SEA.verify(Gun.SEA.opt.pack(e[r],r,e,n),!1,function(n){return t[r]=Gun.SEA.opt.unpack(n,r,e)})}),t):e}};t.GunNode=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingFilter=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(8),i=n(2),a=n(5),s=n(4),u=n(6),c=n(12);function p(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function l(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){p(i,r,o,a,s,"next",e)}function s(e){p(i,r,o,a,s,"throw",e)}a(void 0)})}}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var f,g=function(e){return r.compose(parseInt,r.path(e))},h={fromDefinition:function(e){var t=e.filters,n=e.voteFilters,i=e.isPresent,a=[],u=[],c=function(){return a.push(r.compose.apply(r,arguments))},p=function(){return u.push(r.compose.apply(r,arguments))};t.allow.aliases.length&&c(function(e){return!!i(["alias",e])},r.path(["data","author"])),t.allow.authors.length&&c(function(e){return!!i(["author",e])},r.path(["data","authorId"])),t.allow.domains.length&&c(function(e){return!!i(["domain",e])},s.ThingDataNode.domain),t.allow.topics.length&&!r.find(r.compose(r.identical("all"),r.last,r.split(":")),t.allow.topics)&&c(function(e){return!!i(["topic",e])},r.path(["data","topic"])),t.allow.kinds.length&&c(function(e){return!!i(["kind",e])},r.path(["data","kind"])),"commands"===t.allow.type&&c(r.compose(r.test(o.Constants.COMMAND_RE),r.path(["data","body"]))),t.deny.aliases.length&&c(function(e){return!i(["ban","alias",e])},r.path(["data","author"])),t.deny.authors.length&&c(function(e){return!i(["ban","author",e])},r.path(["data","authorId"])),t.deny.domains.length&&c(function(e){return!e||!i(["ban","domain",e])},s.ThingDataNode.domain),t.deny.topics.length&&c(function(e){return!i(["ban","topic",e])},r.path(["data","topic"])),t.deny.anon&&c(r.path(["data","authorId"])),t.deny.signed&&c(r.compose(function(e){return!e},r.path(["data","authorId"]))),null!==n.upsMin&&p(r.lte(n.upsMin),g(["votes","up"])),null!==n.upsMax&&p(r.gte(n.upsMax),g(["votes","up"])),null!==n.downsMin&&p(r.lte(n.downsMin),g(["votes","down"])),null!==n.downsMax&&p(r.gte(n.downsMax),g(["votes","down"])),null!==n.scoreMin&&p(r.lte(n.scoreMin),g(["votes","score"])),null!==n.scoreMax&&p(r.gte(n.scoreMax),g(["votes","score"])),t.deny.tags.length&&p(function(e){var n=r.path(["votes","commands"],e)||{};return!t.deny.tags.find(function(e){var t=d(e,2),o=t[0],i=t[1];return!!r.path([i,"tag",o],n)})});var l=function(e){return!a.find(function(t){return!t(e)})},f=function(e){return!u.find(function(t){return!t(e)})};return{thingFilter:function(e){return l(e)&&f(e)},contentFilter:l,voteFilter:f}},getFilteredIds:(f=l(regeneratorRuntime.mark(function e(t,n){var o,i,a,s,c,p,d,f,g,h,m=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o=m.length>2&&void 0!==m[2]?m[2]:{},i=o.limit,a=void 0===i?25:i,s=o.count,c=void 0===s?0:s,p=o.after,void 0===p?null:p,d=o.filterFn,f=n.slice(),g=[],h=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30;return Promise.all(r.map((e=l(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!0,!d){e.next=5;break}return e.next=4,d(t[u.ListingNode.POS_ID]);case 4:n=e.sent;case 5:n&&g.push(t);case 6:case"end":return e.stop()}},e,this)})),function(t){return e.apply(this,arguments)}),f.splice(c,t)))};case 4:if(!f.length){e.next=11;break}return e.next=7,h();case 7:if(!(a&&g.length>=a)){e.next=9;break}return e.abrupt("break",11);case 9:e.next=4;break;case 11:return e.abrupt("return",r.compose(r.map(r.prop(u.ListingNode.POS_ID)),a?r.slice(0,a):r.identity,r.sortBy(r.prop(u.ListingNode.POS_VAL)))(g));case 12:case"end":return e.stop()}},e,this)})),function(e,t){return f.apply(this,arguments)}),thingFilter:r.curry(function(e,t,n){return a.Query.thingMeta(e,{tabulator:t.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:n}),scores:c.ListingDataSource.needsScores(t),data:c.ListingDataSource.needsData(t)}).then(t.thingFilter)})};t.ListingFilter=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDataSource=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(4),a=n(2),s=n(5),u=n(13);var c=(0,o.query)(function(e,t,n){return o.Promise.all(r.map(function(t){return u.ListingSort.itemFromSoul(e,t,n)},t)).then(u.ListingSort.sortItems)}),p=(0,o.query)(function(e,t,n){return o.Promise.all(r.map(e.get,t)).then(r.reduce(r.mergeRight,{})).then(i.ThingSet.souls).then(function(t){return c(e,t,n)})}),l=function(e){var t=e.sort,n=r.path(["filters","allow","topics"],e)||[];return{listingPaths:r.map(function(e){return"/t/".concat(e,"/").concat(t)},n),query:function(r){return s.Query.multiTopic(r,{topics:n,sort:t}).then(function(t){return c(r,t,e)})}}},d={listing:function(e){var t=r.pathOr([],["filters","allow","listings"],e),n=e.sort;return{listingPaths:r.map(function(e){return"".concat(e,"/").concat(n)},t)}},replies:function(e){var t=e.sort,n=r.path(["filters","allow","repliesTo"],e),o=r.path(["filters","allow","type"],e);return{listingPaths:["/user/".concat(n,"/replies/").concat(o,"/").concat(t)],query:function(t){return s.Query.repliesToAuthor(t,{type:o,repliesToAuthorId:n,indexer:e.indexer}).then(function(n){return c(t,n,e)})}}},op:function(e){var t=e.sort,n=r.path(["filters","allow","ops"],e);n.length||l(e);return{listingPaths:r.map(function(e){return"/things/".concat(e,"/comments/").concat(t)},n),query:function(t){return s.Query.multiSubmission(t,{submissionIds:n}).then(function(n){return c(t,n,e)})}}},curator:function(e){var t=e.sort,n=r.prop("curators",e)||[];if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/user/".concat(e,"/commented/").concat(t)},n),query:function(t){return s.Query.curate(t,n,!0).then(function(e){return e.map(function(e){return a.Schema.Thing.route.reverse({thingId:e})})}).then(function(n){return c(t,n,e)})}}},author:function(e){var t=e.sort,n=r.path(["filters","allow","authors"],e),o=r.path(["filters","allow","type"],e);if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/user/".concat(e,"/").concat(o,"/").concat(t)},n),query:function(t){return s.Query.multiAuthor(t,{type:o,authorIds:n}).then(function(n){return c(t,n,e)})}}},domain:function(e){var t=e.sort,n=r.path(["filters","allow","domains"],e)||[];if(!n.length)return l(e);return{listingPaths:r.map(function(e){return"/domain/".concat(e,"/").concat(t)},n),query:function(r){return s.Query.multiDomain(r,{domains:n,sort:t}).then(function(t){return c(r,t,e)})}}},topic:l},f=r.keys(d),g={fromDefinition:function(e){var t,n=(t=e,r.find(t.isPresent,f)||"topic");return r.mergeLeft({name:n},d[n](e))},sources:d,needsScores:function(e){return!!r.find(e.isPresent,["sort hot","sort top","sort best","sort controversial","ups","downs","score","can remove"])},needsData:function(e){return!!r.find(e.isPresent,["topic","domain","author","unique by content","kind","type","require signed","require anon","alias","ban domain","ban topic","ban author","ban alias"])},itemsFromThingSets:p,itemsFromThingSouls:c};t.ListingDataSource=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingSort=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(2),a=n(4),s=n(5);var u=r.map(r.prop(0)),c=r.sortWith(r.prop(1)),p=function(e){return(0,o.query)(function(t,n,a){return a.isIdSticky(n)?(0,o.resolve)(-1/0):r.contains(n,a.filters.allow.ops)?(0,o.resolve)(-1/0):s.Query.thingMeta(t,{tabulator:a.tabulator,scores:!0,thingSoul:i.Schema.Thing.route.reverse({thingId:n})}).then(function(t){return e(t,a)})})},l=function(e){return(0,o.query)(function(t,n,r){return s.Query.thingMeta(t,{tabulator:r.tabulator,thingSoul:i.Schema.Thing.route.reverse({thingId:n})}).then(e)})},d={new:l(r.compose(r.multiply(-1),function(e){return e||(new Date).getTime()},r.prop("timestamp"))),old:l(r.prop("timestamp")),active:p(function(e){var t=e.timestamp;return-1*(e.lastActive||t)}),top:p(r.compose(function(e){return-1*parseInt(e,10)},r.pathOr(0,["votes","score"]))),comments:p(r.compose(function(e){return-1*parseFloat(e,10)},r.pathOr(0,["votes","comment"]))),discussed:p(function(e){var t=r.prop("timestamp",e),n=parseInt(r.pathOr(0,["votes","comment"],e),10),o=t/1e3-1134028003,i=Math.log10(Math.max(Math.abs(n),1));return n?-1*(i+o/45e3):1e9-o}),hot:p(function(e){var t=r.prop("timestamp",e),n=parseInt(r.pathOr(0,["votes","score"],e),10),o=t/1e3-1134028003,i=0;return n>0?i=1:n<0&&(i=-1),-1*(i*Math.log10(Math.max(Math.abs(n),1))+o/45e3)}),best:p(function(e){var t=parseInt(r.pathOr(0,["votes","up"],e),10),n=t+parseInt(r.pathOr(0,["votes","down"],e),10);if(0===n)return 0;var o=1.281551565545,i=t/n;return(i+1/(2*n)*o*o-o*Math.sqrt(i*(1-i)/n+o*o/(4*n*n)))/(1+1/n*o*o)*-1}),controversial:p(function(e){var t=parseInt(r.pathOr(0,["votes","up"],e),10),n=parseInt(r.pathOr(0,["votes","down"],e),10);if(t<=0||n<=0)return 0;var o=t+n,i=t>n?n/t:t/n;return-1*Math.pow(o,i)})},f=(0,o.query)(function(e,t,n){return(d[n.sort]||d.new)(t,n).then(function(e){return[t,e]})}),g=(0,o.query)(function(e,t,n){return(0,o.all)(r.map(function(t){return f(e,t,n)},t))}),h=(0,o.query)(function(e,t,n){return(0,o.all)(r.map(e.get,t)).then(r.pipe(a.ThingSet.union,a.ThingSet.ids,function(t){return g(e,t,n)})).then(c)}),m={POS_ID:0,POS_VAL:1,sorts:d,toItem:f,toItems:g,toIds:u,sortItems:c,fromThingSets:h};t.ListingSort=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingOracle=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(10),i=n(2),a=n(4),s=n(6),u=n(13);function c(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function p(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){c(i,r,o,a,s,"next",e)}function s(e){c(i,r,o,a,s,"throw",e)}a(void 0)})}}var l,d,f=(l=p(regeneratorRuntime.mark(function e(t,n,r,o){var i,a,c,p,l,d=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(i=d.length>4&&void 0!==d[4]?d[4]:[],a=d.length>5&&void 0!==d[5]?d[5]:[],i.length||a.length){e.next=4;break}return e.abrupt("return");case 4:return e.next=6,t.newScope().get(n.soul);case 6:return c=e.sent,e.next=9,u.ListingSort.toItems(r,i,o);case 9:p=e.sent,(l=s.ListingNode.diff(c,p,a))&&console.log("CHANGES",n.soul,l),l&&n.write(l);case 13:case"end":return e.stop()}},e,this)})),function(e,t,n,r){return l.apply(this,arguments)}),g=(d=p(regeneratorRuntime.mark(function e(t,n,s){var u,c,p,l,d,g,h,m,y;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return u=s.sort,c=s.updatedSoul,p=s.diff,l=[],d=t.newScope(),g=i.Schema.ThingVoteCounts.route.match(c)||{},h=g.thingId,m=r.equals(n.match.thingId||null),h&&l.push(h),l=r.concat(l,a.ThingSet.ids(o.GunNode.decodeSEA(p))),e.next=9,f(t,n,d,u,l,[],m);case 9:for(y in d.getAccesses())t.listen(y,n.soul);case 10:case"end":return e.stop()}},e,this)})),function(e,t,n){return d.apply(this,arguments)}),h={updateListing:f,onPut:g};t.ListingOracle=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validation=t.suppressor=void 0;var r,o=c(n(0)),i=(r=n(16))&&r.__esModule?r:{default:r},a=n(26),s=c(n(17)),u=n(2);function c(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=function(e,t){var n=o.path(["data","#"],t),r=o.without(["comments","allcomments","votesup","votesdown"],o.keys(o.path(["_",">"],t))).map(function(e){return o.path(["_",">",e],t)}).sort().pop(),i=(e.ThingData.route.match(n)||{}).thingId,a=o.prop("id",t);return a&&a===i&&r&&r<1543102814945},d=function(e,t){var n=o.prop("id",t);return n&&n===(0,i.default)({authorId:(o.path(["author","#"],t)||"").substr(1)||void 0,timestamp:parseInt(o.prop("timestamp",t),10),kind:o.prop("kind",t),topic:o.prop("topicName",u.Schema.Topic.route.match(o.path(["topic","#"],t))),opId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["op","#"],t))),replyToId:o.prop("thingId",u.Schema.Thing.route.match(o.path(["replyTo","#"],t))),originalHash:o.prop("originalHash",t)})},f=function(e,t){var n=(o.path(["author","#"],t)||"").substr(1)||void 0,r=o.prop("authorId",u.Schema.ThingDataSigned.route.match(o.path(["data","#"],t)));return n&&n===r},g=function(e,t){var n=o.prop("originalHash",t),r=o.prop("thingId",u.Schema.ThingData.route.match(o.path(["data","#"],t)));return r&&r===n},h=function(e){return function(t,n,r,i,a){var s=(u.Schema.Thing.route.match(o.path(["_","#"],a)||"")||{}).thingId,c=u.Schema[t].route.match(o.prop("#",n)||"").thingId;return!(!s||s!==c)&&e.compile({$ref:"schema.json#/definitions/".concat(t,"Edge")})(n)}},m=function(e,t){var n=t||{},r=(n._,p(n,["_"]));r.timestamp=parseFloat(r.timestamp,10);var a=(u.Schema.ThingData.route.match(o.path(["_","#"],t)||"")||{}).thingId;return a&&a===(0,i.default)(r)},y=function(e,t,n,r){var o,i=t||{},a=i.algorithm,s=void 0===a?"argon2d":a,u=i.config,c=void 0===u?{}:u,p=Buffer.hasOwnProperty("from")?Buffer.from(r,"hex"):new Buffer(r,"hex"),l=Buffer.hasOwnProperty("from")?Buffer.from(p,"hex"):new Buffer(p,"hex"),d=e.hash(n,{salt:l,hashLength:c.hashLength,timeCost:c.timeCost,memoryCost:c.memoryCost,parallelism:c.parallelism,raw:!0,type:e[s]}),f=0;for(o=0;o<=c.complexity-8;o+=8,f++)if(0!==d[f])return!1;var g=255<<8+o-c.complexity;return 0==(d[f]&g)},v=function(e,t){var r=n(27);if(!r)return!0;var i=(e||{}).algorithm,a=void 0===i?"argon2d":i,s=o.path(["_","#"],t);if("argon2d"!==a)throw new Error("Only argon2 supported for vote hashes");return o.without(["_"],o.keys(t)).forEach(function(n){y(r,e,s,n)||(console.log("invalid vote",s,n),delete t[n])}),!0},b=o.compose(function(e){return e.addKeyword("isLegacyThing",{validate:l}),e.addKeyword("thingHashMatchesSoul",{validate:d}),e.addKeyword("signedThingDataMatchesThing",{validate:f}),e.addKeyword("thingDataMatchesOriginalHash",{validate:g}),e.addKeyword("thingRelatedEdge",{validate:h(e)}),e.addKeyword("thingDataHashMatchesSoul",{validate:m}),e.addKeyword("keysAreProofsOfWork",{validate:v,modifying:!0}),e},s.initAjv),O=(0,a.createSuppressor)({definitions:u.Schema.definitions,init:b});t.suppressor=O;var I=o.curry(function(e,t){return t.on("in",function(t){var n=this,r=t._;(delete t._,"ping"in t||"leech"in t)||(t.put&&!o.keys(t.put).length||(e.config.disableValidation?Promise.resolve(t):O.validate(t)).then(function(e){return e?(t._=r,n.to.next(t)):console.log("msg didn't validate",t)}).catch(function(e){return console.error("validate err",t,e.stack||e)}))})}),S={isLegacyThing:l,thingHashMatchesSoul:d,signedThingDataMatches:f,thingDataMatchesOriginalHash:g,getIsThingRelatedEdge:h,thingDataHashMatches:m,isVoteValid:y,keysAreProofsOfWork:v,initAjv:b,suppressor:O,gunWireInput:I};t.Validation=S},function(e,t){e.exports=n},function(e,t){e.exports=r},function(e,t){e.exports=o},function(e,t){e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingType=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(33),i=n(34),a=n(35),s=n(36),u=n(37),c=n(38);var p=[o.TopicListing,i.DomainListing,a.CommentListing,s.SpaceListing,u.InboxListing,c.ProfileListing],l={...p,types:p,fromPath:function(e){for(var t,n=0;n<p.length;n++)if(t=p[n].route.match(e))return r.assoc("match",t,p[n]);return null}};t.ListingType=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingDefinition=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(22),i=n(3);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s={fromSource:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=o.Tokenizer.tokenize(e),u={...s},c=s.isPresent,p=s.getValue,l=s.getValues,d=s.getValueChain,f=s.getPairs,g=a(d("sourced from page"),2),h=g[0];u.fromPageAuthor=void 0===h?t:h;var m=g[1];return u.fromPageName=void 0===m?n?"space:".concat(n):void 0:m,u.displayName=s.getValue("name")||n,u.indexer=p("tabulator")||i.Config.indexer,u.tabulator=p("tabulator")||u.indexer,u.tabs=f("tab"),u.sort=p("sort"),u.uniqueByContent=!!c("unique by content"),u.curators=l("curator"),u.moderators=l("mod"),u.includeRanks=!!c("show ranks"),u.stickyIds=l("sticky"),u.isIdSticky=function(e){return!!s.isPresent(["sticky",e])},u.submitTopics=l("submit to"),u.submitTopic=p("submit to"),u.chatTopic=p("chat in"),t&&n&&(u.spaceName=n,u.owner=t,u.useForComments=!s.isPresent("comments leave space"),u.path="/user/".concat(t,"/spaces/").concat(n),u.defaultTab=s.getValue("tab"),u.defaultTabPath=u.defaultTab?s.getValue(["tab",u.defaultTab]):null),u.filters={functions:[],allow:{repliesTo:p("replies to author"),type:p("type"),ops:l("op"),aliases:l("alias"),authors:l("author"),domains:l("domain"),topics:l("topic"),listings:l("listing"),kinds:l("kind"),anon:!c("require signed"),signed:!c("require anon")},deny:{aliases:l("ban alias"),authors:l("ban author"),domains:l("ban domain"),topics:l("ban topic"),anon:!!c("require signed"),signed:!!c("require anon"),tags:f("can remove")}},u.voteFilters={functions:[],upsMin:parseInt(p("ups above"),10)||null,upsMax:parseInt(p("ups below"),10)||null,downsMin:parseInt(p("downs above"),10)||null,downsMax:parseInt(p("downs below"),10)||null,scoreMin:parseInt(p("score above"),10)||null,scoreMax:parseInt(p("score below"),10)||null},u.censors=r.uniq(r.map(r.prop(1),u.filters.deny.tags)),u}};t.ListingDefinition=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tokenizer=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0));function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i={tokenize:function(e){var t=(e||"").split("\n").reduce(function(e,t){var n=t.trim().split(" ").map(r.trim).filter(function(e){return e});return n.length?r.assocPath(n,{},e):e},{}),n=function(e){var n=e;return"string"==typeof e&&(n=e.split(" ")),n&&r.path(n,t)},i=function(e){return r.keysIn(n(e))},a=function(e){return i(e)[0]||null};return{source:e,isPresent:n,getValue:a,getValues:i,getLastValue:function(e){return i(e).pop()||null},getValueChain:function(e){for(var t="string"==typeof e?e.split(" "):e,n=[],r=e;r;)(r=a([].concat(o(t),n)))&&n.push(r);return n},getPairs:function(e){var t="string"==typeof e?e.split(" "):e;return i(t).reduce(function(e,n){var r=a([].concat(o(t),[n]));return[].concat(o(e),[[n,r]])},[])}}}};t.Tokenizer=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceSpec=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(22),s=n(5),u=n(7);var c=["hot","new","discussed","controversial","top"],p=r.curry(function(e,t,n){var r=[n||""],o=a.Tokenizer.tokenize(n);o.getValue("tab")||c.map(function(n){return r.push("tab ".concat(n," /user/").concat(e,"/spaces/").concat(t,"/").concat(n))});var s=o.getValue("indexer");return s||(r.push("indexer ".concat(i.Config.indexer)),s=i.Config.indexer),o.getValue("tabulator")||r.push("tabulator ".concat(s)),r.join("\n")}),l=(0,o.query)(function(e,t,n,r){return u.ListingSpec.getSource(e,t,function(e){return"space:".concat(e)}(n),r).then(p(t,n))}),d=(0,o.query)(function(e,t,n,r){return l(e,t,n,r).then(function(e){return u.ListingSpec.fromSource(e,t,n)})}),f=r.compose(r.sortBy(r.identity),r.map(r.replace(/^space:/,"")),r.filter(r.compose(r.prop("length"),r.match(/^space:[^:]*$/))),r.keys),g=(0,o.query)(function(e,t){return s.Query.userPages(e,t).then(f)}),h={nodeToSpaceNames:f,userSpaceNames:g,tabs:c,getSource:l,getSpec:d};t.SpaceSpec=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Peer",{enumerable:!0,get:function(){return r.Peer}}),Object.defineProperty(t,"Config",{enumerable:!0,get:function(){return o.Config}}),Object.defineProperty(t,"Constants",{enumerable:!0,get:function(){return i.Constants}}),Object.defineProperty(t,"Listing",{enumerable:!0,get:function(){return a.Listing}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return a.SpaceSpec}}),Object.defineProperty(t,"Query",{enumerable:!0,get:function(){return s.Query}}),Object.defineProperty(t,"Schema",{enumerable:!0,get:function(){return u.Schema}}),Object.defineProperty(t,"Thing",{enumerable:!0,get:function(){return c.Thing}}),Object.defineProperty(t,"ThingSet",{enumerable:!0,get:function(){return c.ThingSet}}),Object.defineProperty(t,"ThingDataNode",{enumerable:!0,get:function(){return c.ThingDataNode}}),Object.defineProperty(t,"Validation",{enumerable:!0,get:function(){return p.Validation}}),Object.defineProperty(t,"Promise",{enumerable:!0,get:function(){return l.Promise}}),t.default=void 0;var r=n(25),o=n(3),i=n(8),a=n(31),s=n(5),u=n(2),c=n(4),p=n(15),l=n(1),d=r.Peer.init;t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Peer=void 0;var r=n(15),o=n(5),i=n(4),a=n(30);function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u={init:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t||{},u=n.leech,c=n.disableValidation,p=n.noGun,l=n.localStorage,d=n.persist,f=s(n,["leech","disableValidation","noGun","localStorage","persist"]),g={config:t};if(!p){var h={localStorage:!!l,radisk:!!d,...f};d&&(h.localStorage=!1),c||e.on("opt",r.Validation.gunWireInput(g)),h.storeFn&&(h.store=h.storeFn(h)),g.gun=e(h),h.localStorage&&g.gun.on("localStorage:error",function(e){return e.retry({})}),u&&g.gun._.on("out",{leech:!0})}return g.newScope=function(e){return o.Query.createScope(g,e)},g.onLogin=a.Authentication.onLogin(g),g.signup=a.Authentication.signup(g),g.login=a.Authentication.login(g),g.logout=function(){return a.Authentication.logout(g)},g.isLoggedIn=function(){return a.Authentication.isLoggedIn(g)},g.submit=i.Thing.submit(g),g.comment=i.Thing.comment(g),g.chat=i.Thing.chat(g),g.writePage=i.Thing.writePage(g),g.vote=i.Thing.vote(g),g.queries=o.Query,g}};t.Peer=u},function(e,t){e.exports=a},function(e,t){e.exports=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingSet=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(2),i=n(10);var a=i.GunNode.edges;var s={ids:r.compose(r.filter(r.identity),r.map(r.compose(r.prop("thingId"),o.Schema.Thing.route.match.bind(o.Schema.Thing.route))),i.GunNode.edges),union:r.compose(r.dissoc("_"),r.reduce(r.mergeRight,{})),souls:a,dayStr:function(e){var t=new Date(e||(new Date).getTime()),n=t.getUTCFullYear(),r=t.getUTCMonth()+1,o=t.getUTCDate();return"".concat(n,"/").concat(r,"/").concat(o)}};t.ThingSet=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThingDataNode=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(19);var i=r.propOr("","body"),a=r.propOr("","url"),s={body:i,domain:r.compose(function(e){if(!e)return"";var t=(0,o.parse)(e);return(t.host||t.scheme||"").replace(/^www\./,"")},a)};t.ThingDataNode=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Authentication=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1);var i={signup:r.curry(function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return new o.Promise(function(i,a){if(e&&e.gun&&e.gun.user){var s=e.gun.user();o.Promise.resolve(s.create(t,n,function(r){r.err?(a(r.err),s.leave(),e.gun.user().leave()):e.login(t,n).then(i)},r))}else a("SEA is not loaded")})}),login:r.curry(function(e,t,n){return new o.Promise(function(r,o){e&&e.gun&&e.gun.user?e.user().auth(t,n,function(t){return t.err?o(t.err):r(e.user().is)}):o("SEA is not loaded")}).then(function(t){return e._onLogin&&e._onLogin(t),t})}),logout:function(e){return e.gun.user().leave()},isLoggedIn:function(e){return e.gun&&e.gun.user&&e.user().is},onLogin:r.curry(function(e,t){return e._onLogin=t})};t.Authentication=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ListingQuery",{enumerable:!0,get:function(){return r.ListingQuery}}),Object.defineProperty(t,"ListingNode",{enumerable:!0,get:function(){return o.ListingNode}}),Object.defineProperty(t,"ListingSpec",{enumerable:!0,get:function(){return i.ListingSpec}}),Object.defineProperty(t,"ListingDataSource",{enumerable:!0,get:function(){return a.ListingDataSource}}),Object.defineProperty(t,"ListingDefinition",{enumerable:!0,get:function(){return s.ListingDefinition}}),Object.defineProperty(t,"ListingFilter",{enumerable:!0,get:function(){return u.ListingFilter}}),Object.defineProperty(t,"ListingOracle",{enumerable:!0,get:function(){return c.ListingOracle}}),Object.defineProperty(t,"ListingSort",{enumerable:!0,get:function(){return p.ListingSort}}),Object.defineProperty(t,"ListingType",{enumerable:!0,get:function(){return l.ListingType}}),Object.defineProperty(t,"SpaceSpec",{enumerable:!0,get:function(){return d.SpaceSpec}}),t.Listing=void 0;var r=n(32),o=n(6),i=n(7),a=n(12),s=n(21),u=n(11),c=n(14),p=n(13),l=n(20),d=n(23),f={ListingNode:o.ListingNode,ListingSpec:i.ListingSpec,get:o.ListingNode.get,fromSpec:r.ListingQuery.fromSpec,fromPath:r.ListingQuery.fromPath};t.Listing=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ListingQuery=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(6),a=n(11),s=n(20);var u=(0,o.query)(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=a.ListingFilter.thingFilter(e,t),s=r.pathOr([],["dataSource","listingPaths"],t),u=r.map(i.ListingNode.soulFromPath(n.indexer||t.indexer),s);return i.ListingNode.rowsFromSouls(e,u).then(function(t){return a.ListingFilter.getFilteredIds(e,t,{...n,filterFn:o})})}),c=(0,o.query)(function(e,t,n){var r=s.ListingType.fromPath(t);return r?r.getSpec(e,r.match).then(function(o){return o.hasIndexer&&!n.calculate?r&&r.read?r.read(e,r.match,n):i.ListingNode.read(e,t,n):u(e,o,n)}):Promise.resolve([])}),p={fromSpec:u,fromPath:c};t.ListingQuery=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TopicListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(9),s=n(7);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["hot","new","discussed","controversial","top","firehose"],p=(0,o.query)(function(e,t){var n=t.topic,o=t.sort,p=a.Path.splitTopics(n),l="all"===p[0]?"whatever":p[0];return s.ListingSpec.getSource(e,i.Config.indexer,"listing:topic",["name ".concat(n),"submit to ".concat(l),"sort ".concat(o),-1===n.indexOf(":")?"kind submission":""].concat(u(r.map(function(e){return"topic ".concat(e)},p)),u(r.map(function(e){return"tab ".concat(e," /t/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/t/:topic/:sort",getSource:p,getSpec:l});t.TopicListing=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomainListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(9),s=n(7);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["hot","new","discussed","controversial","top"],p=(0,o.query)(function(e,t){var n=t.domain,o=t.sort,p=a.Path.splitTopics(n);return s.ListingSpec.getSource(e,i.Config.indexer,"listing:domain",["name ".concat(p[0]),"submit to whatever","sort ".concat(o),"kind submission"].concat(u(r.map(function(e){return"domain ".concat(e)},p)),u(r.map(function(e){return"tab ".concat(e," /domain/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/domain/:domain/:sort",tabs:c,getSource:p,getSpec:l});t.DomainListing=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommentListing=void 0;var r=n(1),o=n(3),i=n(9),a=n(7),s=(0,r.query)(function(e,t){var n=t.thingId,r=t.sort;return a.ListingSpec.getSource(e,o.Config.indexer,"listing:comments",["op ".concat(n),"sort ".concat(r)].join("\n"))}),u=i.Path.withRoute({path:"/things/:thingId/comments/:sort",getSpec:s});t.CommentListing=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SpaceListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(2),s=n(10),u=n(9),c=n(6),p=n(11),l=n(14),d=n(23);function f(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var h,m,y=(0,o.query)(function(e,t){var n=t.authorId,r=t.name,o=t.sort;return d.SpaceSpec.getSource(e,n,r,"sort ".concat(o))}),v=(0,o.query)(function(e,t){var n=t.authorId,r=t.name,o=t.sort;return d.SpaceSpec.getSpec(e,n,r,"sort ".concat(o))}),b=(0,o.query)(function(e,t,n){var r={authorId:t.authorId,name:t.name,sort:t.sort,indexer:i.Config.indexer},s=[a.Schema.SpaceListing.route.reverse(r)];return(0,o.all)([v(e,t),c.ListingNode.getRowsFromSouls(e,s)]).then(function(t){var r=g(t,2),o=r[0],i=r[1],a=p.ListingFilter.thingFilter(e,o);return p.ListingFilter.getFilteredIds(e,i,{...n,filterFn:a})})}),O=(h=regeneratorRuntime.mark(function e(t,n,o){var i,u,p,d,f,h,m,y,b,O,I,S,P,j,w,T,_,L,A,D;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=o.updatedSoul,u=o.diff,p=o.original,d=o.latest,void 0===d?0:d,f=t.newScope(),h=s.GunNode.decodeSEA(p),m=s.GunNode.decodeSEA(u),y=c.ListingNode.categorizeDiff(m,h),b=g(y,2),O=b[0],I=b[1],e.next=7,v(f,n.match);case 7:return S=e.sent,P=a.Schema.ThingVoteCounts.route.match(i),j=a.Schema.Thing.route.match(i),w=a.Schema.ThingDataSigned.route.match(i)||{},T=w.thingId,_=a.Schema.SEAAuthor.route.match(i),P&&O.push(P.thingId),j&&O.push(j.thingId),T&&T!==S.fromPageId&&O.push(T),e.next=17,l.ListingOracle.updateListing(t,n,f,S,O,I);case 17:for(L in f.getAccesses())t.listen(L,n.soul);if(!(r.prop("size",p)||O.length||I.length||_)){e.next=20;break}return e.abrupt("return");case 20:return console.log("---STANDARD SPACE UPDATE---",n.soul,i),e.next=23,t.newScope().get(n.soul);case 23:A=e.sent,(D=c.ListingNode.itemKeys(A)).length&&n.write({size:0,...D.reduce(function(e,t){return e["".concat(t)]=null,e},{})}),t.work({id:"update:".concat(n.soul),soul:n.soul,method:"doUpdate",priority:n.priority||50});case 27:case"end":return e.stop()}},e,this)}),m=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=h.apply(e,t);function i(e){f(o,n,r,i,a,"next",e)}function a(e){f(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t,n){return m.apply(this,arguments)}),I=u.Path.withRoute({path:"/user/:authorId/spaces/:name/:sort",calculate:b,getSource:y,getSpec:v,onPut:O});t.SpaceListing=I},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InboxListing=void 0;var r=n(1),o=n(3),i=n(10),a=n(2),s=n(4),u=n(9),c=n(7),p=n(6),l=n(14);function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var g,h,m=(0,r.query)(function(e,t){var n=t.authorId,r=t.type,i=t.sort,a=void 0===i?"new":i;return c.ListingSpec.getSource(e,o.Config.indexer,"listing:inbox",["replies to author ".concat(n),"type ".concat(r),"sort ".concat(a)].join("\n"))}),y=(0,r.query)(function(e,t){return m(e,t).then(c.ListingSpec.fromSource)}),v=(g=regeneratorRuntime.mark(function e(t,n,r){var o,u,c,f,g,h,m,v,b,O,I,S;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r.updatedSoul,o=r.diff,u=t.newScope(),c=i.GunNode.decodeSEA(o),f=p.ListingNode.categorizeDiff(c),g=d(f,1),h=g[0],e.next=6,y(u,n.match);case 6:m=e.sent,v=s.ThingSet.ids(c),b=0;case 9:if(!(b<h.length)){e.next=20;break}return O=h[b],e.t0=s.ThingSet,e.next=14,u.get(a.Schema.ThingComments.route.reverse({thingId:O})).then();case 14:e.t1=e.sent,I=e.t0.ids.call(e.t0,e.t1),v=v.concat(I);case 17:b++,e.next=9;break;case 20:if(!v.length){e.next=23;break}return e.next=23,l.ListingOracle.updateListing(t,n,u,m,v,[]);case 23:for(S in u.getAccesses())t.listen(S,n.soul);case 24:case"end":return e.stop()}},e,this)}),h=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=g.apply(e,t);function i(e){f(o,n,r,i,a,"next",e)}function a(e){f(o,n,r,i,a,"throw",e)}i(void 0)})},function(e,t,n){return h.apply(this,arguments)}),b=u.Path.withRoute({path:"/user/:authorId/replied/:type/:sort",getSource:m,getSpec:y,onPut:v});t.InboxListing=b},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProfileListing=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=n(1),i=n(3),a=n(9),s=n(7);function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var c=["overview","comments","submitted","commands"],p=(0,o.query)(function(e,t){var n=t.authorId,o=t.type,a=t.sort;return s.ListingSpec.getSource(e,i.Config.indexer,"listing:profile",["author ".concat(n),"type ".concat(o),"submit to whatever","sort ".concat(a)].concat(u(r.map(function(e){return"tab ".concat(e," /user/").concat(n,"/").concat(e)},c))).join("\n"))}),l=(0,o.query)(function(e,t){return p(e,t).then(s.ListingSpec.fromSource)}),d=a.Path.withRoute({path:"/user/:authorId/:type/:sort",tabs:c,getSource:p,getSpec:l});t.ProfileListing=d}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL25vdGFidWctcGVlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvZXh0ZXJuYWwgXCJyYW1kYVwiIiwid2VicGFjazovL25vdGFidWctcGVlci9leHRlcm5hbCBcImd1bi1zY29wZVwiIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9TY2hlbWEuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0NvbmZpZy5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvVGhpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL1F1ZXJ5LmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdOb2RlLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdTcGVjLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9Db25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvUGF0aC5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvR3VuTm9kZS5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9MaXN0aW5nRmlsdGVyLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdEYXRhU291cmNlLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdTb3J0LmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdPcmFjbGUuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL1ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyL2V4dGVybmFsIFwib2JqZWN0LWhhc2hcIiIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvZXh0ZXJuYWwgXCJndW4tc3VwcHJlc3Nvci1zZWFyXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyL2V4dGVybmFsIFwicm91dGUtcGFyc2VyXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyL2V4dGVybmFsIFwidXJpLWpzXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1R5cGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ0RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9TcGFjZVNwZWMuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9QZWVyLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci9leHRlcm5hbCBcImd1bi1zdXBwcmVzc29yXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyL2V4dGVybmFsIFwiYXJnb24yXCIiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL1RoaW5nL1RoaW5nU2V0LmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9UaGluZy9UaGluZ0RhdGFOb2RlLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9BdXRoZW50aWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9MaXN0aW5nUXVlcnkuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1R5cGUvVG9waWNMaXN0aW5nLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdUeXBlL0RvbWFpbkxpc3RpbmcuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1R5cGUvQ29tbWVudExpc3RpbmcuanMiLCJ3ZWJwYWNrOi8vbm90YWJ1Zy1wZWVyLy4vc3JjL0xpc3RpbmcvTGlzdGluZ1R5cGUvU3BhY2VMaXN0aW5nLmpzIiwid2VicGFjazovL25vdGFidWctcGVlci8uL3NyYy9MaXN0aW5nL0xpc3RpbmdUeXBlL0luYm94TGlzdGluZy5qcyIsIndlYnBhY2s6Ly9ub3RhYnVnLXBlZXIvLi9zcmMvTGlzdGluZy9MaXN0aW5nVHlwZS9Qcm9maWxlTGlzdGluZy5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTdfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE4X18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xOV9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMjZfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzI3X18iLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JvdXRlUGFyc2VyIiwic2VhIiwiX0NvbnN0YW50cyIsImRlZmluaXRpb25zIiwiQVVUSF9TQ0hFTUEiLCJ0b3BpY05hbWUiLCJ0eXBlIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwiQ29uc3RhbnRzIiwiTUFYX1RPUElDX1NJWkUiLCJUb3BpY0RheSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJzb3VsIiwicGF0dGVybiIsImNvbmNhdCIsIlBSRUZJWCIsInByb3BlcnRpZXMiLCIkcmVmIiwieWVhciIsIm1pbmltdW0iLCJtYXhpbXVtIiwibW9udGgiLCJkYXkiLCJyZXF1aXJlZCIsInByb3BzRnJvbVNvdWwiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsImVkZ2VNYXRjaGVzS2V5IiwiYW55T2YiLCJUb3BpYyIsImRvbWFpbk5hbWUiLCJNQVhfRE9NQUlOX1NJWkUiLCJEb21haW4iLCJ1cmwiLCJNQVhfVVJMX1NJWkUiLCJVUkwiLCJ0aGluZ0lkIiwiTUFYX0hBU0hfU0laRSIsInRoaW5nU291bCIsIiNyZWYiLCJUaGluZ0FsbENvbW1lbnRzIiwiYWxsT2YiLCJUaGluZ0NvbW1lbnRzIiwidGltZXN0YW1wIiwidGhpbmdLaW5kIiwiTUFYX1RISU5HX0tJTkRfU0laRSIsIlRoaW5nIiwiaWQiLCJraW5kIiwib3JpZ2luYWxIYXNoIiwiZGF0YSIsIm9uZU9mIiwidG9waWMiLCIjIiwiZG9tYWluIiwiY29tbWVudHMiLCJ0aGluZ1JlbGF0ZWRFZGdlIiwiYWxsY29tbWVudHMiLCJ2b3Rlc3VwIiwidm90ZXNkb3duIiwib3AiLCJyZXBseVRvIiwiYXV0aG9yIiwidGhpbmdIYXNoTWF0Y2hlc1NvdWwiLCJzaWduZWRUaGluZ0RhdGFNYXRjaGVzVGhpbmciLCJ0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoIiwiaXNMZWdhY3lUaGluZyIsIlByb29mT2ZXb3JrVm90ZXMiLCIkYXN5bmMiLCJrZXlzQXJlUHJvb2ZzT2ZXb3JrIiwiYWxnb3JpdGhtIiwiY29uZmlnIiwiY29tcGxleGl0eSIsImhhc2hMZW5ndGgiLCJ0aW1lQ29zdCIsIm1lbW9yeUNvc3QiLCJwYXJhbGxlbGlzbSIsIlRoaW5nVm90ZXNVcCIsIlRoaW5nVm90ZXNEb3duIiwiVGhpbmdEYXRhIiwiTUFYX1RISU5HX1RJVExFX1NJWkUiLCJib2R5IiwiTUFYX1RISU5HX0JPRFlfU0laRSIsImF1dGhvcklkIiwib3BJZCIsInJlcGx5VG9JZCIsInRoaW5nRGF0YUhhc2hNYXRjaGVzU291bCIsIlRoaW5nRGF0YVNpZ25lZCIsIlRoaW5nVm90ZUNvdW50cyIsInRhYnVsYXRvciIsInVwIiwiZG93biIsImNvbW1lbnQiLCJzY29yZSIsImNvbW1hbmRzIiwiTGlzdGluZ0RhdGEiLCJpZHMiLCJNQVhfTElTVElOR19JRFNfU0laRSIsInNvdXJjZSIsIk1BWF9MSVNUSU5HX1NPVVJDRV9TSVpFIiwic3VibWl0VG9waWMiLCJ0YWJzIiwiTUFYX0xJU1RJTkdfVEFCU19TSVpFIiwiY3VyYXRvcnMiLCJjZW5zb3JzIiwidXNlcklkIiwiaXNDaGF0IiwicGF0dGVyblByb3BlcnRpZXMiLCJeZCskIiwic29ydE5hbWUiLCJlbnVtIiwiVG9waWNMaXN0aW5nIiwic29ydCIsImluZGV4ZXIiLCJEb21haW5MaXN0aW5nIiwiVGhpbmdDb21tZW50c0xpc3RpbmciLCJ1c2VyTGlzdGluZ1R5cGUiLCJBdXRob3JSZXBsaWVzTGlzdGluZyIsIkF1dGhvclByb2ZpbGVMaXN0aW5nIiwiU3BhY2VMaXN0aW5nIiwiQXV0aG9yQ29tbWVudHMiLCJBdXRob3JTdWJtaXNzaW9ucyIsIkF1dGhvclRoaW5ncyIsIkF1dGhvclBhZ2VzIiwicm91dGVzIiwia2V5cyIsInJlZHVjZSIsInJlc3VsdCIsInBhdGgiLCJhc3NvYyIsImRlZmF1bHQiLCJTY2hlbWEiLCJjb21wb3NlIiwicmVzIiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJyb3V0ZSIsInByb3AiLCJ0b1BhaXJzIiwiQ29uZmlnIiwiREVWX0lOREVYRVIiLCJvd25lciIsInVwZGF0ZSIsIm1hcCIsInZhbCIsIl9ndW5TY29wZSIsIl9vYmplY3RIYXNoIiwiX3VyaUpzIiwiX1NjaGVtYSIsIl9UaGluZ1NldCIsIl9UaGluZ0RhdGFOb2RlIiwicHV0IiwiY3VycnkiLCJwZWVyIiwiRGF0ZSIsImdldFRpbWUiLCJub2RlIiwiZ3VuIiwicmV2ZXJzZSIsImRhdGFTb3VsIiwibWV0YURhdGEiLCJpbmRleCIsInN1Ym1pdCIsInVzZXIiLCJpc0xvZ2dlZEluIiwidG9Mb3dlckNhc2UiLCJ0cmltIiwiYWxpYXMiLCJwdWIiLCJ0aGluZyIsInRoaW5nc1NvdWwiLCJzdWJtaXNzaW9uc1NvdWwiLCJ0aGluZ3MiLCJzdWJtaXNzaW9ucyIsInNldCIsImNvbW1lbnRzU291bCIsImNoYXQiLCJ3cml0ZVBhZ2UiLCJQcm9taXNlIiwicmVqZWN0IiwicGFnZXNTb3VsIiwiY2hhaW4iLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsInZvdGUiLCJub25jZSIsInRvcGljUHJlZml4ZXMiLCJjaGF0bXNnIiwiX2RheVN0ciRzcGxpdDIiLCJUaGluZ1NldCIsImRheVN0ciIsInNwbGl0IiwidG9waWNQcmVmaXgiLCJ0b3BpY0RheSIsInNraXBBbGwiLCJhbGxuYW1lIiwiYWxsVG9waWMiLCJhbGxUb3BpY0RheSIsInVybEluZm8iLCJwYXJzZSIsImhvc3QiLCJzY2hlbWUiLCJyZXBsYWNlIiwib24iLCJ0ZCIsIm9mZiIsIl9UaGluZyIsIl9MaXN0aW5nTm9kZSIsImVtcHR5UHJvbWlzZSIsInJlc29sdmUiLCJ1bmlvbkFycmF5cyIsInVuaW9uIiwidG9waWNTb3VscyIsInBhcmFtcyIsIl9yZWYkdG9waWNzIiwidG9waWNzIiwiZGF5cyIsInByb3BPciIsImRheVN0cmluZ3MiLCJzdGFydCIsInBhcnNlSW50IiwicHVzaCIsImRzIiwic2luZ2xlVG9waWMiLCJxdWVyeSIsInNjb3BlIiwidFNvdWxzIiwic291bHMiLCJpdGVtTWF4IiwiTElTVElOR19TSVpFIiwiZmV0Y2hNb3JlIiwidG9waWNTb3VsIiwicG9wIiwibGVuZ3RoIiwibW9yZSIsIl90b0NvbnN1bWFibGVBcnJheSIsInNpbmdsZURvbWFpbiIsInNpbmdsZUF1dGhvciIsImFsbCIsIl9yZWYzIiwiX3JlZjQiLCJsaXN0aW5nSWRzIiwiTGlzdGluZ05vZGUiLCJzb3J0ZWRJZHMiLCJzaW5nbGVMaXN0aW5nIiwiX3JlZjUiLCJsaXN0aW5nIiwiZmlsdGVyIiwiaWRlbnRpdHkiLCJyZXBsaWVzVG9BdXRob3IiLCJfcmVmNiIsInJlcGxpZXNUb0F1dGhvcklkIiwiX3JlZjYkdHlwZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImF1dGhvcmVkU291bHMiLCJhdXRob3JlZFNvdWwiLCJzaW5nbGVTdWJtaXNzaW9uIiwic3VibWlzc2lvbklkIiwicHJlcGVuZCIsIm1ldGEiLCJwYXJzZUZsb2F0IiwicmVwbHlUb1NvdWwiLCJvcFNvdWwiLCJtYXRjaCIsInRoaW5naWQiLCJ0aGluZ1ZvdGVDb3VudCIsInZvdGVUeXBlIiwiY291bnQiLCJ0aGluZ1ZvdGVzVXAiLCJ0aGluZ1ZvdGVzRG93biIsInRoaW5nQWxsQ29tbWVudHNDb3VudCIsImNvbXB1dGVUaGluZ1Njb3JlcyIsIl9yZWY3IiwiX3JlZjgiLCJ0aGluZ01ldGEiLCJfcmVmOSIsIl9yZWY5JGRhdGEiLCJfcmVmOSRzY29yZXMiLCJzY29yZXMiLCJfcmVmMTAiLCJfcmVmMTEiLCJ2b3RlcyIsIm11bHRpVGhpbmdNZXRhIiwicHJvbWlzZXMiLCJtdWx0aVF1ZXJ5Iiwic2luZ2xlUXVlcnkiLCJwbHVyYWwiLCJzaW5nbGUiLCJjb2xsYXRlIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiaXRlbXMiLCJpc05pbCIsIm11bHRpVG9waWMiLCJtdWx0aURvbWFpbiIsIm11bHRpQXV0aG9yIiwibXVsdGlTdWJtaXNzaW9uIiwiY3VyYXRlZCIsImF1dGhvcklkcyIsInN1Ym1pc3Npb25Pbmx5IiwieCIsInRoaW5nRGF0YUZyb21Tb3VscyIsIl9yZWYxMiIsIl9yZWYxMyIsImlkczEiLCJpZHMyIiwidW5pcSIsInRoaW5nU2NvcmVzIiwidGhpbmdSZXBsaWVzIiwidGhpbmdEYXRhIiwidXNlclBhZ2VzIiwid2lraVBhZ2VJZCIsIndpa2lQYWdlIiwidXNlck1ldGEiLCJ1c2VyQWxpYXMiLCJjcmVhdGVkQXQiLCJjcmVhdGVTY29wZSIsIm5hYiIsIm9wdHMiLCJRdWVyeSIsIl9Db25maWciLCJQT1NfSURYIiwiUE9TX0lEIiwiUE9TX1ZBTCIsInJvd3NUb0lkcyIsInJvd3NUb0l0ZW1zIiwic2xpY2UiLCJzb3VsRnJvbVBhdGgiLCJnZXRSb3ciLCJpZHgiLCJpZkVsc2UiLCJpbnNlcnQiLCJhbHdheXMiLCJyb3ciLCJpdGVtS2V5cyIsInJvd3MiLCJzb3J0Um93cyIsInNvcnRXaXRoIiwiYXNjZW5kIiwiY29uZCIsIkluZmluaXR5IiwiVCIsImRpZmYiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsInVwZGF0ZWRJdGVtcyIsInJlbW92ZUlkcyIsIl9yZWYzJG1heFNpemUiLCJtYXhTaXplIiwicmVtb3ZlZCIsImJ5SWQiLCJjaGFuZ2VzIiwidXBkYXRlZCIsInRvUmVwbGFjZSIsIm1heElkeCIsInBhcnNlZCIsIl9yb3ciLCJfcm93JCIsIl9yb3ckMiIsInJhd1ZhbHVlIiwiX2lkIiwiZXhpc3RpbmciLCJfcm93MiIsImFsbFNvcnRlZCIsInNvcnRlZCIsIm1pc3NpbmciLCJhZGRlZCIsIl9pMiIsIl9pZDIiLCJfaWR4IiwiaW5zZXJ0ZWQiLCJfcm93MyIsInJlcGxhY2VkIiwiX2lkeDIiLCJfcm93NCIsIl9pZHgzIiwiX2FyZ3MiLCJ3cmFwIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsImluZGV4QnkiLCJ0MCIsInQxIiwiZG9uZSIsImFicnVwdCIsImpvaW4iLCJzdG9wIiwiX3giLCJhcHBseSIsInVuaW9uUm93cyIsInVuaXFCeSIsInJvd3NGcm9tU291bHMiLCJyZWFkIiwiX3JlZjEwJGluZGV4ZXIiLCJjYXRlZ29yaXplRGlmZiIsIm9yaWdpbmFsIiwiYWxsS2V5cyIsIm1lcmdlTGVmdCIsImRpZmZJZCIsIl9nZXRSb3cyIiwib3JpZ0lkIiwiX1F1ZXJ5IiwiX0xpc3RpbmdEZWZpbml0aW9uIiwiX0xpc3RpbmdEYXRhU291cmNlIiwiX0xpc3RpbmdGaWx0ZXIiLCJMaXN0aW5nU3BlYyIsImZyb21Tb3VyY2UiLCJhcCIsIkxpc3RpbmdGaWx0ZXIiLCJmcm9tRGVmaW5pdGlvbiIsIm9mIiwiTGlzdGluZ0RhdGFTb3VyY2UiLCJMaXN0aW5nRGVmaW5pdGlvbiIsImdldFNvdXJjZSIsImV4dHJhIiwiVGhpbmdEYXRhTm9kZSIsIkNPTU1BTkRfUkUiLCJTT1VMX0RFTElNRVRFUiIsIk1BWF9QT1dfTk9OQ0VfU0laRSIsIk1BWF9BVVRIT1JfQUxJQVNfU0laRSIsIk1BWF9BVVRIT1JfSURfU0laRSIsIk1BWF9MSVNUSU5HX1NPVUxfUFJFRklYX1NJWkUiLCJNQVhfTElTVElOR19TT1VMX0lERU5USUZJRVJfU0laRSIsIk1BWF9MSVNUSU5HX1NPVUxfU09SVF9TSVpFIiwiTUFYX0xJU1RJTkdfU09VTF9UWVBFX1NJWkUiLCJNQVhfTElTVElOR19TT1VMX0tJTkRfU0laRSIsIkRFRkFVTFRfSU5ERVhFUiIsInNwbGl0RG9tYWlucyIsInNvcnRCeSIsInRvTG93ZXIiLCJkZWZhdWx0VG8iLCJQYXRoIiwic3BsaXRUb3BpY3MiLCJ3aXRoUm91dGUiLCJvYmoiLCJwYXRoT3IiLCJzdGF0ZSIsIkd1bk5vZGUiLCJsYXRlc3QiLCJsYXN0IiwidmFsdWVzIiwiZWRnZXMiLCJkZWNvZGVTRUEiLCJyYXdEYXRhIiwiR3VuIiwiU0VBIiwiaW5kZXhPZiIsIndpdGhvdXQiLCJmb3JFYWNoIiwidmVyaWZ5Iiwib3B0IiwicGFjayIsInVucGFjayIsImludFBhdGgiLCJkZWZpbml0aW9uIiwiZmlsdGVycyIsInZvdGVGaWx0ZXJzIiwiaXNQcmVzZW50IiwiZmlsdGVyRnVuY3Rpb25zIiwidm90ZUZpbHRlckZ1bmN0aW9ucyIsImFkZEZpbHRlciIsImFkZFZvdGVGaWx0ZXIiLCJhbGxvdyIsImFsaWFzZXMiLCJhdXRob3JzIiwiZG9tYWlucyIsImZpbmQiLCJpZGVudGljYWwiLCJraW5kcyIsInRlc3QiLCJkZW55IiwiYW5vbiIsInNpZ25lZCIsInVwc01pbiIsImx0ZSIsInVwc01heCIsImd0ZSIsImRvd25zTWluIiwiZG93bnNNYXgiLCJzY29yZU1pbiIsInNjb3JlTWF4IiwidGFncyIsImNtZHMiLCJ0YWdOYW1lIiwiY29udGVudEZpbHRlciIsImZuIiwidm90ZUZpbHRlciIsInRoaW5nRmlsdGVyIiwiZ2V0RmlsdGVyZWRJZHMiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9jYWxsZWUyIiwic29ydGVkUm93cyIsIl9yZWY0JGxpbWl0IiwibGltaXQiLCJfcmVmNCRjb3VudCIsIl9yZWY0JGFmdGVyIiwiZmlsdGVyRm4iLCJmaWx0ZXJlZCIsImZldGNoQmF0Y2giLCJfYXJnczIiLCJfY29udGV4dDIiLCJhZnRlciIsInNpemUiLCJpbkxpc3RpbmciLCJzZW50IiwiX3gzIiwic3BsaWNlIiwiX3gyIiwic3BlYyIsIm5lZWRzU2NvcmVzIiwibmVlZHNEYXRhIiwiX0xpc3RpbmdTb3J0IiwiaXRlbXNGcm9tVGhpbmdTb3VscyIsIkxpc3RpbmdTb3J0IiwiaXRlbUZyb21Tb3VsIiwic29ydEl0ZW1zIiwiaXRlbXNGcm9tVGhpbmdTZXRzIiwibWVyZ2VSaWdodCIsInRvcGljU291cmNlIiwibGlzdGluZ1BhdGhzIiwic291cmNlcyIsImxpc3RpbmdzIiwicmVwbGllcyIsInN1Ym1pc3Npb25JZHMiLCJjdXJhdG9yIiwiY3VyYXRlIiwic291cmNlTmFtZXMiLCJkZWYiLCJ0b0lkcyIsInZvdGVTb3J0IiwiaXNJZFN0aWNreSIsImNvbnRhaW5zIiwib3BzIiwidGltZVNvcnQiLCJzb3J0cyIsIm5ldyIsIm11bHRpcGx5Iiwib2xkIiwiYWN0aXZlIiwibGFzdEFjdGl2ZSIsInRvcCIsImRpc2N1c3NlZCIsInNlY29uZHMiLCJvcmRlciIsIk1hdGgiLCJsb2cxMCIsIm1heCIsImFicyIsImhvdCIsInNpZ24iLCJiZXN0IiwidXBzIiwieiIsInNxcnQiLCJjb250cm92ZXJzaWFsIiwiZG93bnMiLCJtYWduaXR1ZGUiLCJiYWxhbmNlIiwicG93IiwidG9JdGVtIiwidG9JdGVtcyIsImZyb21UaGluZ1NldHMiLCJwaXBlIiwiX0d1bk5vZGUiLCJ1cGRhdGVMaXN0aW5nIiwib3JjIiwibmV3U2NvcGUiLCJ3cml0ZSIsIl94NCIsIm9uUHV0IiwidXBkYXRlZFNvdWwiLCJ1cGRhdGVkSWRzIiwiaXNTdGlja3kiLCJlcXVhbHMiLCJnZXRBY2Nlc3NlcyIsImxpc3RlbiIsIl94NSIsIl94NiIsIl94NyIsIkxpc3RpbmdPcmFjbGUiLCJfZ3VuU3VwcHJlc3NvciIsInNjaGVtYSIsIm5ld2VzdCIsIl9zY2hlbWEiLCJzdWJzdHIiLCJzaWduZWRUaGluZ0RhdGFNYXRjaGVzIiwic2lnbmVkSWQiLCJnZXRJc1RoaW5nUmVsYXRlZEVkZ2UiLCJhanYiLCJub2RlVHlwZU5hbWUiLCJfcFNjaGVtYSIsIl9jUGF0aCIsInBhcmVudERhdGEiLCJwcm9wVGhpbmdJZCIsImNvbXBpbGUiLCJ0aGluZ0RhdGFIYXNoTWF0Y2hlcyIsInJlY29yZCIsIl8iLCJpc1ZvdGVWYWxpZCIsImFyZ29uMiIsInByZWZpeCIsIl9yZWY1JGFsZ29yaXRobSIsIl9yZWY1JGNvbmZpZyIsIkJ1ZmZlciIsImZyb20iLCJzYWx0IiwiaGFzaCIsInJhdyIsIm1hc2siLCJfcmVmNiRhbGdvcml0aG0iLCJFcnJvciIsImluaXRBanYiLCJhZGRLZXl3b3JkIiwidmFsaWRhdGUiLCJtb2RpZnlpbmciLCJzdXBwcmVzc29yIiwiY3JlYXRlU3VwcHJlc3NvciIsImluaXQiLCJndW5XaXJlSW5wdXQiLCJjb250ZXh0IiwibXNnIiwiX3RoaXMiLCJkaXNhYmxlVmFsaWRhdGlvbiIsInZhbGlkYXRlZCIsInRvIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsInN0YWNrIiwiVmFsaWRhdGlvbiIsIl9Ub3BpY0xpc3RpbmciLCJfRG9tYWluTGlzdGluZyIsIl9Db21tZW50TGlzdGluZyIsIl9TcGFjZUxpc3RpbmciLCJfSW5ib3hMaXN0aW5nIiwiX1Byb2ZpbGVMaXN0aW5nIiwidHlwZXMiLCJDb21tZW50TGlzdGluZyIsIkluYm94TGlzdGluZyIsIlByb2ZpbGVMaXN0aW5nIiwiTGlzdGluZ1R5cGUiLCJmcm9tUGF0aCIsIl9Ub2tlbml6ZXIiLCJvd25lcklkIiwic3BhY2VOYW1lIiwidG9rZW5pemVkIiwiVG9rZW5pemVyIiwidG9rZW5pemUiLCJnZXRWYWx1ZSIsImdldFZhbHVlcyIsImdldFZhbHVlQ2hhaW4iLCJnZXRQYWlycyIsIl9nZXRWYWx1ZUNoYWluMiIsIl9nZXRWYWx1ZUNoYWluMiQiLCJmcm9tUGFnZUF1dGhvciIsIl9nZXRWYWx1ZUNoYWluMiQyIiwiZnJvbVBhZ2VOYW1lIiwiZGlzcGxheU5hbWUiLCJ1bmlxdWVCeUNvbnRlbnQiLCJtb2RlcmF0b3JzIiwiaW5jbHVkZVJhbmtzIiwic3RpY2t5SWRzIiwic3VibWl0VG9waWNzIiwiY2hhdFRvcGljIiwidXNlRm9yQ29tbWVudHMiLCJkZWZhdWx0VGFiIiwiZGVmYXVsdFRhYlBhdGgiLCJmdW5jdGlvbnMiLCJyZXBsaWVzVG8iLCJ0b2tlbk1hcCIsImxpbmUiLCJ0b2tlbnMiLCJhc3NvY1BhdGgiLCJjaGVjayIsImtleXNJbiIsImdldExhc3RWYWx1ZSIsInBhaXJzIiwiX0xpc3RpbmdTcGVjIiwic291cmNlV2l0aERlZmF1bHRzIiwidGFiIiwic3BhY2VDb25maWdQYWdlTmFtZSIsImdldFNwZWMiLCJub2RlVG9TcGFjZU5hbWVzIiwidXNlclNwYWNlTmFtZXMiLCJTcGFjZVNwZWMiLCJfUGVlciIsIl9MaXN0aW5nIiwiX1ZhbGlkYXRpb24iLCJQZWVyIiwiX0F1dGhlbnRpY2F0aW9uIiwibGVlY2giLCJub0d1biIsImxvY2FsU3RvcmFnZSIsInBlcnNpc3QiLCJyZXN0IiwiY2ZnIiwicmFkaXNrIiwic3RvcmVGbiIsInN0b3JlIiwiYSIsInJldHJ5Iiwib25Mb2dpbiIsIkF1dGhlbnRpY2F0aW9uIiwic2lnbnVwIiwibG9naW4iLCJsb2dvdXQiLCJxdWVyaWVzIiwiZGlzc29jIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImRheU51bSIsImdldFVUQ0RhdGUiLCJ1cmxTdHIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwib2siLCJmYWlsIiwiYWNrIiwibGVhdmUiLCJhdXRoIiwiaXMiLCJfb25Mb2dpbiIsIl9MaXN0aW5nUXVlcnkiLCJfTGlzdGluZ09yYWNsZSIsIl9MaXN0aW5nVHlwZSIsIl9TcGFjZVNwZWMiLCJMaXN0aW5nIiwiZnJvbVNwZWMiLCJMaXN0aW5nUXVlcnkiLCJwYXRocyIsImhhc0luZGV4ZXIiLCJjYWxjdWxhdGUiLCJfUGF0aCIsInN1Ym1pdFRvIiwicm91dGVQcm9wcyIsImdldFJvd3NGcm9tU291bHMiLCJfcmVmNSRsYXRlc3QiLCJvcmlnaW5hbERhdGEiLCJkaWZmRGF0YSIsIl9MaXN0aW5nTm9kZSRjYXRlZ29yaSIsIl9MaXN0aW5nTm9kZSRjYXRlZ29yaTIiLCJyZW1vdmVkSWRzIiwidm90ZUNvdW50c01hdGNoIiwidGhpbmdNYXRjaCIsImF1dGhvck1hdGNoIiwiZXhpc3RpbmdLZXlzIiwiU0VBQXV0aG9yIiwiZnJvbVBhZ2VJZCIsIndvcmsiLCJtZXRob2QiLCJwcmlvcml0eSIsIl9yZWYkc29ydCIsInVwZGF0ZWRBdXRob3JlZCIsInJlcGx5SWRzIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGlCQUFBQyxTQUFBLGlCQUFBQyxPQUNBQSxPQUFBRCxRQUFBRCxFQUFBRyxRQUFBLFNBQUFBLFFBQUEsYUFBQUEsUUFBQSxlQUFBQSxRQUFBLHVCQUFBQSxRQUFBLGdCQUFBQSxRQUFBLFVBQUFBLFFBQUEsa0JBQUFBLFFBQUEs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QUcsYUFBQTVwQixPQUFXNHBCLEVBQVgsV0FBQTVwQixPQUF3Qm9FLEVBQXhCLEtBQUFwRSxPQUFvQzRwQixJQUFPdGtCLEtBQ3ZEZ1MsS0FBSyxTQUlMd1MsR0FBVSxFQUFBM2hCLEVBQUFnRixPQUFNLFNBQUNDLEVBQU9zQyxHQUFSLE9BQ3BCd0osRUFBVTlMLEVBQU9zQyxHQUFPbEYsS0FBS2tmLEVBQUFoUixZQUFZQyxjQUc5QnlPLEVBQWlCNkYsRUFBQTdTLEtBQUtFLFVBQVUsQ0FBRXJULEtBdEJsQyw4QkFzQndDM0IsT0FBTTRULFlBQVc0USIsImZpbGUiOiJub3RhYnVnLXBlZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmFtZGFcIiksIHJlcXVpcmUoXCJndW4tc2NvcGVcIiksIHJlcXVpcmUoXCJvYmplY3QtaGFzaFwiKSwgcmVxdWlyZShcImd1bi1zdXBwcmVzc29yLXNlYXJcIiksIHJlcXVpcmUoXCJyb3V0ZS1wYXJzZXJcIiksIHJlcXVpcmUoXCJ1cmktanNcIiksIHJlcXVpcmUoXCJndW4tc3VwcHJlc3NvclwiKSwgcmVxdWlyZShcImFyZ29uMlwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIm5vdGFidWctcGVlclwiLCBbXCJyYW1kYVwiLCBcImd1bi1zY29wZVwiLCBcIm9iamVjdC1oYXNoXCIsIFwiZ3VuLXN1cHByZXNzb3Itc2VhclwiLCBcInJvdXRlLXBhcnNlclwiLCBcInVyaS1qc1wiLCBcImd1bi1zdXBwcmVzc29yXCIsIFwiYXJnb24yXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIm5vdGFidWctcGVlclwiXSA9IGZhY3RvcnkocmVxdWlyZShcInJhbWRhXCIpLCByZXF1aXJlKFwiZ3VuLXNjb3BlXCIpLCByZXF1aXJlKFwib2JqZWN0LWhhc2hcIiksIHJlcXVpcmUoXCJndW4tc3VwcHJlc3Nvci1zZWFyXCIpLCByZXF1aXJlKFwicm91dGUtcGFyc2VyXCIpLCByZXF1aXJlKFwidXJpLWpzXCIpLCByZXF1aXJlKFwiZ3VuLXN1cHByZXNzb3JcIiksIHJlcXVpcmUoXCJhcmdvbjJcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm5vdGFidWctcGVlclwiXSA9IGZhY3Rvcnkocm9vdFtcInJhbWRhXCJdLCByb290W1wiZ3VuLXNjb3BlXCJdLCByb290W1wib2JqZWN0LWhhc2hcIl0sIHJvb3RbXCJndW4tc3VwcHJlc3Nvci1zZWFyXCJdLCByb290W1wicm91dGUtcGFyc2VyXCJdLCByb290W1widXJpLWpzXCJdLCByb290W1wiZ3VuLXN1cHByZXNzb3JcIl0sIHJvb3RbXCJhcmdvbjJcIl0pO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xN19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xOF9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xOV9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yNl9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yN19fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI0KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fOyIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcInJvdXRlLXBhcnNlclwiO1xuaW1wb3J0ICogYXMgc2VhIGZyb20gXCJndW4tc3VwcHJlc3Nvci1zZWFyXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcblxuY29uc3QgZGVmaW5pdGlvbnMgPSB7XG4gIC4uLnNlYS5BVVRIX1NDSEVNQSxcbiAgdG9waWNOYW1lOiB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBtaW5MZW5ndGg6IDEsXG4gICAgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX1RPUElDX1NJWkVcbiAgfSxcblxuICBUb3BpY0RheToge1xuICAgIHRpdGxlOiBcIlRvcGljIERheVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkEgc2luZ2xlIGRheSBvZiB0aGluZ3MgaW4gYSB0b3BpY1wiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RvcGljcy86dG9waWNOYW1lL2RheXMvOnllYXIvOm1vbnRoLzpkYXlgLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB0b3BpY05hbWU6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdG9waWNOYW1lXCIgfSxcbiAgICAgICAgeWVhcjogeyB0eXBlOiBcIm51bWJlclwiLCBtaW5pbXVtOiAyMDE4LCBtYXhpbXVtOiAyMTAwIH0sXG4gICAgICAgIG1vbnRoOiB7IHR5cGU6IFwibnVtYmVyXCIsIG1pbmltdW06IDEsIG1heGltdW06IDEyIH0sXG4gICAgICAgIGRheTogeyB0eXBlOiBcIm51bWJlclwiLCBtaW5pbXVtOiAxLCBtYXhpbXVtOiAzMSB9XG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFtcInRvcGljTmFtZVwiLCBcInllYXJcIiwgXCJtb250aFwiLCBcImRheVwiXVxuICAgIH0sXG4gICAgcHJvcHNGcm9tU291bDogeyBuYW1lOiBcInRvcGljTmFtZVwiIH0sXG4gICAgcHJvcGVydGllczoge1xuICAgICAgbmFtZToge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJEZXByZWNhdGVkIGFzIHVubmVjZXNzYXJ5XCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XG4gICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgIGFueU9mOiBbXG4gICAgICAgIHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH0sXG4gICAgICAgIHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1RvcGljRWRnZVwiIH1cbiAgICAgIF1cbiAgICB9XG4gIH0sXG5cbiAgVG9waWM6IHtcbiAgICB0aXRsZTogXCJUb3BpY1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkFsbCB0aGluZ3MgaW4gYSB0b3BpY1wiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RvcGljcy86dG9waWNOYW1lYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdG9waWNOYW1lOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RvcGljTmFtZVwiIH1cbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogW1widG9waWNOYW1lXCJdXG4gICAgfSxcbiAgICBwcm9wc0Zyb21Tb3VsOiB7IG5hbWU6IFwidG9waWNOYW1lXCIgfSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBuYW1lOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkRlcHJlY2F0ZWQgYXMgdW5uZWNlc3NhcnlcIixcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxuICAgICAgfVxuICAgIH0sXG4gICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHtcbiAgICAgIGVkZ2VNYXRjaGVzS2V5OiB0cnVlLFxuICAgICAgYW55T2Y6IFtcbiAgICAgICAgeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVGhpbmdFZGdlXCIgfSxcbiAgICAgICAgeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVG9waWNFZGdlXCIgfVxuICAgICAgXVxuICAgIH1cbiAgfSxcblxuICBkb21haW5OYW1lOiB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBtaW5MZW5ndGg6IDEsXG4gICAgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX0RPTUFJTl9TSVpFXG4gIH0sXG5cbiAgRG9tYWluOiB7XG4gICAgdGl0bGU6IFwiRG9tYWluXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWxsIHRoaW5ncyBpbiBhIGRvbWFpblwiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L2RvbWFpbnMvOmRvbWFpbk5hbWVgLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBkb21haW5OYW1lOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL2RvbWFpbk5hbWVcIiB9XG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFtcImRvbWFpbk5hbWVcIl1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XG4gICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgIGFueU9mOiBbeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVGhpbmdFZGdlXCIgfV1cbiAgICB9XG4gIH0sXG5cbiAgdXJsOiB7IHR5cGU6IFtcIm51bGxcIiwgXCJzdHJpbmdcIl0sIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9VUkxfU0laRSB9LFxuICBVUkw6IHtcbiAgICB0aXRsZTogXCJVUkxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBbGwgdGhpbmdzIGZvciBhIGdpdmVuIFVSTFwiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3VybHMvXFwqdXJsYCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB1cmw6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdXJsXCIgfVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiBbXCJ1cmxcIl1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XG4gICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgIGFueU9mOiBbeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVGhpbmdFZGdlXCIgfV1cbiAgICB9XG4gIH0sXG5cbiAgdGhpbmdJZDoge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX0hBU0hfU0laRVxuICB9LFxuXG4gIHRoaW5nU291bDoge1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHRoaW5nSWQ6IHsgXCIjcmVmXCI6IFwiI2RlZmluaXRpb25zL3RoaW5nSWRcIiB9XG4gICAgfVxuICB9LFxuXG4gIFRoaW5nQWxsQ29tbWVudHM6IHtcbiAgICB0aXRsZTogXCJUaGluZyBBbGwgQ29tbWVudHNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBbGwgY29tbWVudHMgZm9yIGEgZ2l2ZW4gc3VibWlzc2lvblwiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5ncy86dGhpbmdJZC9hbGxjb21tZW50c2AsXG4gICAgICBhbGxPZjogW3sgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdTb3VsXCIgfV1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XG4gICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgIGFueU9mOiBbeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVGhpbmdFZGdlXCIgfV1cbiAgICB9XG4gIH0sXG5cbiAgVGhpbmdDb21tZW50czoge1xuICAgIHRpdGxlOiBcIlRoaW5nIENvbW1lbnRzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiRGlyZWN0IHJlcGxpZXMgdG8gYSB0aGluZ1wiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5ncy86dGhpbmdJZC9jb21tZW50c2AsXG4gICAgICBhbGxPZjogW3sgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdTb3VsXCIgfV1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XG4gICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgIGFueU9mOiBbeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVGhpbmdFZGdlXCIgfV1cbiAgICB9XG4gIH0sXG5cbiAgdGltZXN0YW1wOiB7IHR5cGU6IFtcIm51bWJlclwiLCBcInN0cmluZ1wiXSB9LFxuICB0aGluZ0tpbmQ6IHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9USElOR19LSU5EX1NJWkVcbiAgfSxcblxuICBUaGluZzoge1xuICAgIHRpdGxlOiBcIlRoaW5nIFJlZmVyZW5jZVwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJUaGVzZSBhcmUgc3VibWlzc2lvbnMsIGNvbW1lbnRzLCBjaGF0IG1lc3NhZ2VzIGFuZCB3aWtpIHBhZ2VzXCIsXG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vdGhpbmdzLzp0aGluZ0lkYCxcbiAgICAgIGFsbE9mOiBbeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90aGluZ1NvdWxcIiB9XVxuICAgIH0sXG4gICAgcHJvcHNGcm9tU291bDogeyBpZDogXCJ0aGluZ0lkXCIgfSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBpZDogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvdGhpbmdJZFwiIH0sXG4gICAgICBraW5kOiB7IFwiI3JlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdGhpbmdLaW5kXCIgfSxcbiAgICAgIHRpbWVzdGFtcDogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvdGltZXN0YW1wXCIgfSxcbiAgICAgIG9yaWdpbmFsSGFzaDogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvdGhpbmdJZFwiIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIG9uZU9mOiBbXG4gICAgICAgICAgeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVGhpbmdEYXRhRWRnZVwiIH0sXG4gICAgICAgICAgeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVGhpbmdEYXRhU2lnbmVkRWRnZVwiIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHRvcGljOiB7XG4gICAgICAgIGFueU9mOiBbXG4gICAgICAgICAgeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVG9waWNFZGdlXCIgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTb21lIG9sZCB0aGluZ3MgaGFkIGdlbmVyaWMgdG9waWMgc291bHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIFwiI1wiOiB7IHR5cGU6IFwic3RyaW5nXCIsIG1heExlbmd0aDogNDIgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBbXCIjXCJdXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZG9tYWluOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9Eb21haW5FZGdlXCIgfSxcbiAgICAgIHVybDogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvVVJMRWRnZVwiIH0sXG4gICAgICBjb21tZW50czogeyB0aGluZ1JlbGF0ZWRFZGdlOiBcIlRoaW5nQ29tbWVudHNcIiB9LFxuICAgICAgYWxsY29tbWVudHM6IHsgdGhpbmdSZWxhdGVkRWRnZTogXCJUaGluZ0FsbENvbW1lbnRzXCIgfSxcbiAgICAgIHZvdGVzdXA6IHsgdGhpbmdSZWxhdGVkRWRnZTogXCJUaGluZ1ZvdGVzVXBcIiB9LFxuICAgICAgdm90ZXNkb3duOiB7IHRoaW5nUmVsYXRlZEVkZ2U6IFwiVGhpbmdWb3Rlc0Rvd25cIiB9LFxuICAgICAgb3A6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH0sXG4gICAgICByZXBseVRvOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9UaGluZ0VkZ2VcIiB9LFxuICAgICAgYXV0aG9yOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9TRUFBdXRob3JFZGdlXCIgfVxuICAgIH0sXG5cbiAgICBhbnlPZjogW1xuICAgICAge1xuICAgICAgICBhbGxPZjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaW5nSGFzaE1hdGNoZXNTb3VsOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhbnlPZjogW1xuICAgICAgICAgICAgICB7IHNpZ25lZFRoaW5nRGF0YU1hdGNoZXNUaGluZzogdHJ1ZSB9LFxuICAgICAgICAgICAgICB7IHRoaW5nRGF0YU1hdGNoZXNPcmlnaW5hbEhhc2g6IHRydWUgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHsgaXNMZWdhY3lUaGluZzogdHJ1ZSB9LFxuICAgICAge1xuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlNlbGYgdmVyaWZ5aW5nIGNhbiBiZSB1cGRhdGVkIGluIGlzb2xhdGlvblwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgaWQ6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3RoaW5nSWRcIiB9LFxuICAgICAgICAgIGNvbW1lbnRzOiB7IHRoaW5nUmVsYXRlZEVkZ2U6IFwiVGhpbmdDb21tZW50c1wiIH0sXG4gICAgICAgICAgYWxsY29tbWVudHM6IHsgdGhpbmdSZWxhdGVkRWRnZTogXCJUaGluZ0FsbENvbW1lbnRzXCIgfSxcbiAgICAgICAgICB2b3Rlc3VwOiB7IHRoaW5nUmVsYXRlZEVkZ2U6IFwiVGhpbmdWb3Rlc1VwXCIgfSxcbiAgICAgICAgICB2b3Rlc2Rvd246IHsgdGhpbmdSZWxhdGVkRWRnZTogXCJUaGluZ1ZvdGVzRG93blwiIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcblxuICBQcm9vZk9mV29ya1ZvdGVzOiB7XG4gICAgJGFzeW5jOiB0cnVlLFxuICAgIGtleXNBcmVQcm9vZnNPZldvcms6IHtcbiAgICAgIGFsZ29yaXRobTogXCJhcmdvbjJkXCIsXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgY29tcGxleGl0eTogNixcbiAgICAgICAgaGFzaExlbmd0aDogMzIsXG4gICAgICAgIHRpbWVDb3N0OiAxLFxuICAgICAgICBtZW1vcnlDb3N0OiAxMDI0MCxcbiAgICAgICAgcGFyYWxsZWxpc206IDFcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgVGhpbmdWb3Rlc1VwOiB7XG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vdGhpbmdzLzp0aGluZ0lkL3ZvdGVzdXBgLFxuICAgICAgYWxsT2Y6IFt7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nU291bFwiIH1dXG4gICAgfSxcbiAgICBhbGxPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL1Byb29mT2ZXb3JrVm90ZXNcIiB9XVxuICB9LFxuXG4gIFRoaW5nVm90ZXNEb3duOiB7XG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vdGhpbmdzLzp0aGluZ0lkL3ZvdGVzZG93bmAsXG4gICAgICBhbGxPZjogW3sgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdTb3VsXCIgfV1cbiAgICB9LFxuICAgIGFsbE9mOiBbeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvUHJvb2ZPZldvcmtWb3Rlc1wiIH1dXG4gIH0sXG5cbiAgVGhpbmdEYXRhOiB7XG4gICAgdGl0bGU6IFwiVW5zaWduZWQgVGhpbmcgRGF0YVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlRoaXMgaXMgdGhlIGFjdHVhbCBjb250ZW50IG9mIGEgdGhpbmdcIixcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90aGluZ3MvOnRoaW5nSWQvZGF0YWAsXG4gICAgICBhbGxPZjogW3sgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdTb3VsXCIgfV0sXG4gICAgICByZXF1aXJlZDogW1widGhpbmdJZFwiXVxuICAgIH0sXG4gICAgcHJvcGVydGllczoge1xuICAgICAga2luZDogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvdGhpbmdLaW5kXCIgfSxcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG1pbkxlbmd0aDogMSxcbiAgICAgICAgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX1RISU5HX1RJVExFX1NJWkVcbiAgICAgIH0sXG4gICAgICB0b3BpYzogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvdG9waWNOYW1lXCIgfSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgdHlwZTogW1wibnVsbFwiLCBcInN0cmluZ1wiXSxcbiAgICAgICAgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX1RISU5HX0JPRFlfU0laRVxuICAgICAgfSxcbiAgICAgIGF1dGhvcjogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvc2VhQWxpYXNcIiB9LFxuICAgICAgYXV0aG9ySWQ6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfSxcbiAgICAgIG9wSWQ6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3RoaW5nSWRcIiB9LFxuICAgICAgcmVwbHlUb0lkOiB7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy90aGluZ0lkXCIgfSxcbiAgICAgIGRvbWFpbjogeyAkcmVmOiBcIiMvZGVmaW5pdGlvbnMvZG9tYWluTmFtZVwiIH0sXG4gICAgICB1cmw6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3VybFwiIH0sXG4gICAgICB0aW1lc3RhbXA6IHsgJHJlZjogXCIjL2RlZmluaXRpb25zL3RpbWVzdGFtcFwiIH1cbiAgICB9LFxuICAgIHRoaW5nRGF0YUhhc2hNYXRjaGVzU291bDogdHJ1ZVxuICB9LFxuXG4gIFRoaW5nRGF0YVNpZ25lZDoge1xuICAgIHRpdGxlOiBcIlNpZ25lZCBUaGluZyBEYXRhXCIsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICBcIlRoaXMgaXMgdGhlIGFjdHVhbCBjb250ZW50IG9mIGEgdGhpbmcsIGNyeXB0b2dyYXBoaWNhbGx5IHNpZ25lZFwiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5ncy86dGhpbmdJZC9kYXRhfjphdXRob3JJZC5gLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB0aGluZ0lkOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nSWRcIiB9LFxuICAgICAgICBhdXRob3JJZDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH1cbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogW1widGhpbmdJZFwiLCBcImF1dGhvcklkXCJdXG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBraW5kOiB7IHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90aGluZ0tpbmRcIiB9IH0sXG4gICAgICB0aXRsZToge1xuICAgICAgICBzZWE6IHtcbiAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgIG1pbkxlbmd0aDogMSxcbiAgICAgICAgICBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfVEhJTkdfVElUTEVfU0laRVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9waWM6IHsgc2VhOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RvcGljTmFtZVwiIH0gfSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgc2VhOiB7XG4gICAgICAgICAgdHlwZTogW1wibnVsbFwiLCBcInN0cmluZ1wiXSxcbiAgICAgICAgICBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfVEhJTkdfQk9EWV9TSVpFXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhdXRob3I6IHtcbiAgICAgICAgc2VhOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUFsaWFzXCIgfVxuICAgICAgfSxcbiAgICAgIGF1dGhvcklkOiB7IHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH0gfSxcbiAgICAgIG9wSWQ6IHsgc2VhOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nSWRcIiB9IH0sXG4gICAgICByZXBseVRvSWQ6IHsgc2VhOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3RoaW5nSWRcIiB9IH0sXG4gICAgICBkb21haW46IHsgc2VhOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL2RvbWFpbk5hbWVcIiB9IH0sXG4gICAgICB1cmw6IHsgc2VhOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3VybFwiIH0gfSxcbiAgICAgIHRpbWVzdGFtcDogeyBzZWE6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGltZXN0YW1wXCIgfSB9XG4gICAgfVxuICB9LFxuXG4gIFRoaW5nVm90ZUNvdW50czoge1xuICAgIHRpdGxlOiBcIlRoaW5nIFZvdGUgQ291bnRzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWdncmVnYXRlZCBjb3VudHMgZnJvbSBhIHRhYnVsYXRvclwiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5ncy86dGhpbmdJZC92b3RlY291bnRzQH46dGFidWxhdG9yLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHRoaW5nSWQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdGhpbmdJZFwiIH0sXG4gICAgICAgIHRhYnVsYXRvcjogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHVwOiB7IHNlYTogeyB0eXBlOiBbXCJudW1iZXJcIiwgXCJzdHJpbmdcIl0gfSB9LFxuICAgICAgZG93bjogeyBzZWE6IHsgdHlwZTogW1wibnVtYmVyXCIsIFwic3RyaW5nXCJdIH0gfSxcbiAgICAgIGNvbW1lbnQ6IHsgc2VhOiB7IHR5cGU6IFtcIm51bWJlclwiLCBcInN0cmluZ1wiXSB9IH0sXG4gICAgICBzY29yZTogeyBzZWE6IHsgdHlwZTogW1wibnVtYmVyXCIsIFwic3RyaW5nXCJdIH0gfSxcbiAgICAgIGNvbW1hbmRzOiB7IHNlYTogeyB0eXBlOiBbXCJvYmplY3RcIiwgXCJzdHJpbmdcIl0gfSB9XG4gICAgfVxuICB9LFxuXG4gIExpc3RpbmdEYXRhOiB7XG4gICAgJGFzeW5jOiB0cnVlLFxuICAgIHRpdGxlOiBcIkxpc3RpbmcgTm9kZSBEYXRhXCIsXG4gICAgZGVzY3JpcHRpb246IFwiU2hhcmVkIGRlc2NyaXB0aW9uIG9mIGxpc3RpbmcgcHJvcGVydGllc1wiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgaWRzOiB7XG4gICAgICAgIHNlYTogeyB0eXBlOiBcInN0cmluZ1wiLCBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfTElTVElOR19JRFNfU0laRSB9XG4gICAgICB9LFxuICAgICAgc291cmNlOiB7XG4gICAgICAgIHNlYTogeyB0eXBlOiBcInN0cmluZ1wiLCBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfTElTVElOR19TT1VSQ0VfU0laRSB9XG4gICAgICB9LFxuXG4gICAgICAvLyBYWFg6IHJlc3QgYXJlIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2Ygc291cmNlXG4gICAgICBuYW1lOiB7XG4gICAgICAgIHNlYTogeyB0eXBlOiBbXCJzdHJpbmdcIiwgXCJudWxsXCJdLCBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfVE9QSUNfU0laRSB9XG4gICAgICB9LFxuICAgICAgc3VibWl0VG9waWM6IHtcbiAgICAgICAgc2VhOiB7IHR5cGU6IFwic3RyaW5nXCIsIG1heExlbmd0aDogQ29uc3RhbnRzLk1BWF9UT1BJQ19TSVpFIH1cbiAgICAgIH0sXG4gICAgICB0YWJzOiB7XG4gICAgICAgIHNlYTogeyB0eXBlOiBcInN0cmluZ1wiLCBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfTElTVElOR19UQUJTX1NJWkUgfVxuICAgICAgfSxcbiAgICAgIGN1cmF0b3JzOiB7XG4gICAgICAgIHNlYTogeyB0eXBlOiBcInN0cmluZ1wiLCBtYXhMZW5ndGg6IENvbnN0YW50cy5NQVhfTElTVElOR19TT1VSQ0VfU0laRSB9XG4gICAgICB9LFxuICAgICAgY2Vuc29yczoge1xuICAgICAgICBzZWE6IHsgdHlwZTogXCJzdHJpbmdcIiwgbWF4TGVuZ3RoOiBDb25zdGFudHMuTUFYX0xJU1RJTkdfU09VUkNFX1NJWkUgfVxuICAgICAgfSxcbiAgICAgIHVzZXJJZDogeyBzZWE6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9IH0sXG4gICAgICBvcElkOiB7IHNlYTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90aGluZ0lkXCIgfSB9LFxuICAgICAgaXNDaGF0OiB7IHNlYTogeyB0eXBlOiBbXCJib29sZWFuXCIsIFwic3RyaW5nXCJdIH0gfVxuICAgIH0sXG4gICAgcGF0dGVyblByb3BlcnRpZXM6IHtcbiAgICAgIFwiXmQrJFwiOiB7IHNlYTogeyB0eXBlOiBcInN0cmluZ1wiIH0gfVxuICAgIH1cbiAgfSxcblxuICBzb3J0TmFtZToge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgZW51bTogW1xuICAgICAgXCJuZXdcIixcbiAgICAgIFwib2xkXCIsXG4gICAgICBcImFjdGl2ZVwiLFxuICAgICAgXCJ0b3BcIixcbiAgICAgIFwiY29tbWVudHNcIixcbiAgICAgIFwiZGlzY3Vzc2VkXCIsXG4gICAgICBcImhvdFwiLFxuICAgICAgXCJiZXN0XCIsXG4gICAgICBcImNvbnRyb3ZlcnNpYWxcIixcbiAgICAgIFwicmFuZG9tXCIsXG4gICAgICBcImZpcmVob3NlXCIsXG4gICAgICBcImNoYXRcIlxuICAgIF1cbiAgfSxcblxuICBUb3BpY0xpc3Rpbmc6IHtcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS90Lzp0b3BpYy86c29ydEB+OmluZGV4ZXIuYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdG9waWM6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdG9waWNOYW1lXCIgfSxcbiAgICAgICAgc29ydDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zb3J0TmFtZVwiIH0sXG4gICAgICAgIGluZGV4ZXI6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhbGxPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL0xpc3RpbmdEYXRhXCIgfV1cbiAgfSxcblxuICBEb21haW5MaXN0aW5nOiB7XG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vZG9tYWluLzpkb21haW4vOnNvcnRAfjppbmRleGVyLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGRvbWFpbjogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9kb21haW5OYW1lXCIgfSxcbiAgICAgICAgc29ydDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zb3J0TmFtZVwiIH0sXG4gICAgICAgIGluZGV4ZXI6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhbGxPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL0xpc3RpbmdEYXRhXCIgfV1cbiAgfSxcblxuICBUaGluZ0NvbW1lbnRzTGlzdGluZzoge1xuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5ncy86dGhpbmdJZC9jb21tZW50cy86c29ydEB+OmluZGV4ZXIuYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdGhpbmdJZDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90aGluZ0lkXCIgfSxcbiAgICAgICAgc29ydDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zb3J0TmFtZVwiIH0sXG4gICAgICAgIGluZGV4ZXI6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhbGxPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL0xpc3RpbmdEYXRhXCIgfV1cbiAgfSxcblxuICB1c2VyTGlzdGluZ1R5cGU6IHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIGVudW06IFtcIm92ZXJ2aWV3XCIsIFwic3VibWl0dGVkXCIsIFwiY29tbWVudHNcIiwgXCJjb21tYW5kc1wiLCBcImNvbW1lbnRlZFwiXVxuICB9LFxuXG4gIEF1dGhvclJlcGxpZXNMaXN0aW5nOiB7XG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7XG4gICAgICAgIENvbnN0YW50cy5QUkVGSVhcbiAgICAgIH0vdXNlci86YXV0aG9ySWQvcmVwbGllcy86dHlwZS86c29ydEB+OmluZGV4ZXIuYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0aG9ySWQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9LFxuICAgICAgICBzb3J0OiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NvcnROYW1lXCIgfSxcbiAgICAgICAgaW5kZXhlcjogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH0sXG4gICAgICAgIHR5cGU6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdXNlckxpc3RpbmdUeXBlXCIgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWxsT2Y6IFt7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9MaXN0aW5nRGF0YVwiIH1dXG4gIH0sXG5cbiAgQXV0aG9yUHJvZmlsZUxpc3Rpbmc6IHtcbiAgICBzb3VsOiB7XG4gICAgICBwYXR0ZXJuOiBgJHtDb25zdGFudHMuUFJFRklYfS91c2VyLzphdXRob3JJZC86dHlwZS86c29ydEB+OmluZGV4ZXIuYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0aG9ySWQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9LFxuICAgICAgICBzb3J0OiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NvcnROYW1lXCIgfSxcbiAgICAgICAgaW5kZXhlcjogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH0sXG4gICAgICAgIHR5cGU6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvdXNlckxpc3RpbmdUeXBlXCIgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWxsT2Y6IFt7ICRyZWY6IFwiIy9kZWZpbml0aW9ucy9MaXN0aW5nRGF0YVwiIH1dXG4gIH0sXG5cbiAgU3BhY2VMaXN0aW5nOiB7XG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7XG4gICAgICAgIENvbnN0YW50cy5QUkVGSVhcbiAgICAgIH0vdXNlci86YXV0aG9ySWQvc3BhY2VzLzpuYW1lLzpzb3J0QH46aW5kZXhlci5gLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBhdXRob3JJZDogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9zZWFBdXRob3JJZFwiIH0sXG4gICAgICAgIHNvcnQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc29ydE5hbWVcIiB9LFxuICAgICAgICBpbmRleGVyOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfSxcbiAgICAgICAgbmFtZTogeyAkcmVmOiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy90b3BpY05hbWVcIiB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhbGxPZjogW3sgJHJlZjogXCIjL2RlZmluaXRpb25zL0xpc3RpbmdEYXRhXCIgfV1cbiAgfSxcblxuICBBdXRob3JDb21tZW50czoge1xuICAgIHRpdGxlOiBcIkF1dGhvcidzIENvbW1lbnRzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWxsIG9mIGFuIGF1dGhvcnMgY29tbWVudHMgc2hvdWxkIGJlIGxpbmtlZCBoZXJlXCIsXG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vY29tbWVudHN+OmF1dGhvcklkLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGF1dGhvcklkOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiBbXCJhdXRob3JJZFwiXVxuICAgIH0sXG4gICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHtcbiAgICAgIHNlYToge1xuICAgICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgICAgYW55T2Y6IFt7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH1dXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIEF1dGhvclN1Ym1pc3Npb25zOiB7XG4gICAgdGl0bGU6IFwiQXV0aG9yJ3MgU3VibWlzc2lvbnNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBbGwgb2YgYW4gYXV0aG9yJ3Mgc3VibWlzc2lvbnMgc2hvdWxkIGJlIGxpbmtlZCBoZXJlXCIsXG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vc3VibWlzc2lvbnN+OmF1dGhvcklkLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGF1dGhvcklkOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiBbXCJhdXRob3JJZFwiXVxuICAgIH1cbiAgfSxcblxuICBBdXRob3JUaGluZ3M6IHtcbiAgICB0aXRsZTogXCJBdXRob3IncyBUaGluZ3NcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBbGwgb2YgYW4gYXV0aG9yJ3MgdGhpbmdzIHNob3VsZCBiZSBsaW5rZWQgaGVyZVwiLFxuICAgIHNvdWw6IHtcbiAgICAgIHBhdHRlcm46IGAke0NvbnN0YW50cy5QUkVGSVh9L3RoaW5nc346YXV0aG9ySWQuYCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0aG9ySWQ6IHsgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvc2VhQXV0aG9ySWRcIiB9XG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFtcImF1dGhvcklkXCJdXG4gICAgfSxcbiAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xuICAgICAgc2VhOiB7XG4gICAgICAgIGVkZ2VNYXRjaGVzS2V5OiB0cnVlLFxuICAgICAgICBhbnlPZjogW3sgJHJlZjogXCJzY2hlbWEuanNvbiMvZGVmaW5pdGlvbnMvVGhpbmdFZGdlXCIgfV1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgQXV0aG9yUGFnZXM6IHtcbiAgICB0aXRsZTogXCJBdXRob3IgUGFnZSBNYXBcIixcbiAgICBkZXNjcmlwdGlvbjogXCJNYXBwaW5nIG9mIHBhZ2UgbmFtZXMgdG8gdGhpbmdzXCIsXG4gICAgc291bDoge1xuICAgICAgcGF0dGVybjogYCR7Q29uc3RhbnRzLlBSRUZJWH0vcGFnZXN+OmF1dGhvcklkLmAsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGF1dGhvcklkOiB7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3NlYUF1dGhvcklkXCIgfVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiBbXCJhdXRob3JJZFwiXVxuICAgIH0sXG4gICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHtcbiAgICAgIHNlYToge1xuICAgICAgICBlZGdlTWF0Y2hlc0tleTogdHJ1ZSxcbiAgICAgICAgYW55T2Y6IFt7ICRyZWY6IFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL1RoaW5nRWRnZVwiIH1dXG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCByb3V0ZXMgPSBSLmtleXMoZGVmaW5pdGlvbnMpLnJlZHVjZSgocmVzdWx0LCBuYW1lKSA9PiB7XG4gIGNvbnN0IHBhdHRlcm4gPSBSLnBhdGgoW25hbWUsIFwic291bFwiLCBcInBhdHRlcm5cIl0sIGRlZmluaXRpb25zKTtcblxuICBpZiAoIXBhdHRlcm4pIHJldHVybiByZXN1bHQ7XG4gIHJldHVybiBSLmFzc29jKG5hbWUsIG5ldyBSb3V0ZShwYXR0ZXJuKSwgcmVzdWx0KTtcbn0pO1xuXG5jb25zdCBkZWZzV2l0aFJvdXRlcyA9IFIuY29tcG9zZShcbiAgUi5yZWR1Y2UoXG4gICAgKHJlcywgW25hbWUsIHJvdXRlXSkgPT5cbiAgICAgIFIuYXNzb2MobmFtZSwgUi5hc3NvYyhcInJvdXRlXCIsIHJvdXRlLCBSLnByb3AobmFtZSwgZGVmaW5pdGlvbnMpKSwgcmVzKSxcbiAgICB7fVxuICApLFxuICBSLnRvUGFpcnNcbikocm91dGVzKTtcblxuZXhwb3J0IGNvbnN0IFNjaGVtYSA9IHtcbiAgLi4uZGVmc1dpdGhSb3V0ZXMsXG4gIGRlZmluaXRpb25zLFxuICByb3V0ZXNcbn07XG4iLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBDb25maWcgPSB7XG4gIHRhYnVsYXRvcjogQ29uc3RhbnRzLkRFVl9JTkRFWEVSLFxuICBpbmRleGVyOiBDb25zdGFudHMuREVWX0lOREVYRVIsXG4gIG93bmVyOiBDb25zdGFudHMuREVWX0lOREVYRVIsXG4gIHVwZGF0ZTogUi5jb21wb3NlKFxuICAgIFIubWFwKChba2V5LCB2YWxdKSA9PiAoQ29uZmlnW2tleV0gPSB2YWwpKSxcbiAgICBSLnRvUGFpcnNcbiAgKVxufTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBQcm9taXNlIH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IG9iakhhc2ggZnJvbSBcIm9iamVjdC1oYXNoXCI7XG5pbXBvcnQgeyBwYXJzZSBhcyBwYXJzZVVSSSB9IGZyb20gXCJ1cmktanNcIjtcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gXCIuLi9TY2hlbWFcIjtcbmltcG9ydCB7IFRoaW5nU2V0IH0gZnJvbSBcIi4vVGhpbmdTZXRcIjtcblxuZXhwb3J0IHsgVGhpbmdTZXQgfSBmcm9tIFwiLi9UaGluZ1NldFwiO1xuZXhwb3J0IHsgVGhpbmdEYXRhTm9kZSB9IGZyb20gXCIuL1RoaW5nRGF0YU5vZGVcIjtcblxuY29uc3QgcHV0ID0gUi5jdXJyeSgocGVlciwgZGF0YSkgPT4ge1xuICBkYXRhLnRpbWVzdGFtcCA9IGRhdGEudGltZXN0YW1wIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGNvbnN0IG9yaWdpbmFsSGFzaCA9IG9iakhhc2goZGF0YSk7XG4gIGNvbnN0IHsgdGltZXN0YW1wLCBraW5kLCB0b3BpYywgYXV0aG9ySWQsIG9wSWQsIHJlcGx5VG9JZCB9ID0gZGF0YTtcbiAgY29uc3QgdGhpbmdJZCA9IG9iakhhc2goe1xuICAgIHRpbWVzdGFtcCxcbiAgICBraW5kLFxuICAgIHRvcGljLFxuICAgIGF1dGhvcklkLFxuICAgIG9wSWQsXG4gICAgcmVwbHlUb0lkLFxuICAgIG9yaWdpbmFsSGFzaFxuICB9KTtcblxuICBjb25zdCBub2RlID0gcGVlci5ndW4uZ2V0KFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCB9KSk7XG4gIGNvbnN0IGRhdGFTb3VsID0gYXV0aG9ySWRcbiAgICA/IFNjaGVtYS5UaGluZ0RhdGFTaWduZWQucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQsIGF1dGhvcklkIH0pXG4gICAgOiBTY2hlbWEuVGhpbmdEYXRhLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkOiBvcmlnaW5hbEhhc2ggfSk7XG5cbiAgY29uc3QgbWV0YURhdGEgPSB7XG4gICAgaWQ6IHRoaW5nSWQsXG4gICAgdGltZXN0YW1wLFxuICAgIGtpbmQsXG4gICAgb3JpZ2luYWxIYXNoLFxuICAgIGRhdGE6IHsgXCIjXCI6IGRhdGFTb3VsIH0sXG4gICAgdm90ZXN1cDogeyBcIiNcIjogU2NoZW1hLlRoaW5nVm90ZXNVcC5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCB9KSB9LFxuICAgIHZvdGVzZG93bjogeyBcIiNcIjogU2NoZW1hLlRoaW5nVm90ZXNEb3duLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkIH0pIH0sXG4gICAgYWxsY29tbWVudHM6IHsgXCIjXCI6IFNjaGVtYS5UaGluZ0FsbENvbW1lbnRzLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkIH0pIH0sXG4gICAgY29tbWVudHM6IHsgXCIjXCI6IFNjaGVtYS5UaGluZ0NvbW1lbnRzLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkIH0pIH1cbiAgfTtcblxuICBpZiAodG9waWMpXG4gICAgbWV0YURhdGEudG9waWMgPSB7IFwiI1wiOiBTY2hlbWEuVG9waWMucm91dGUucmV2ZXJzZSh7IHRvcGljTmFtZTogdG9waWMgfSkgfTtcbiAgaWYgKGF1dGhvcklkKSBtZXRhRGF0YS5hdXRob3IgPSB7IFwiI1wiOiBgfiR7YXV0aG9ySWR9YCB9O1xuICBpZiAob3BJZClcbiAgICBtZXRhRGF0YS5vcCA9IHsgXCIjXCI6IFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZDogb3BJZCB9KSB9O1xuICBpZiAocmVwbHlUb0lkKVxuICAgIG1ldGFEYXRhLnJlcGx5VG8gPSB7XG4gICAgICBcIiNcIjogU2NoZW1hLlRoaW5nLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkOiByZXBseVRvSWQgfSlcbiAgICB9O1xuXG4gIHBlZXIuZ3VuLmdldChkYXRhU291bCkucHV0KGRhdGEpO1xuICBub2RlLnB1dChtZXRhRGF0YSk7XG4gIHBlZXIuaW5kZXgodGhpbmdJZCwgZGF0YSk7XG4gIHJldHVybiBub2RlO1xufSk7XG5cbmNvbnN0IHN1Ym1pdCA9IFIuY3VycnkoKHBlZXIsIGRhdGEpID0+IHtcbiAgY29uc3QgdGltZXN0YW1wID0gZGF0YS50aW1lc3RhbXAgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGNvbnN0IHVzZXIgPSBwZWVyLmlzTG9nZ2VkSW4oKTtcblxuICBpZiAoZGF0YS50b3BpYykgZGF0YS50b3BpYyA9IGRhdGEudG9waWMudG9Mb3dlckNhc2UoKS50cmltKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKGRhdGEuZG9tYWluKSBkYXRhLmRvbWFpbiA9IGRhdGEuZG9tYWluLnRvTG93ZXJDYXNlKCkudHJpbSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGlmICh1c2VyKSB7XG4gICAgZGF0YS5hdXRob3IgPSB1c2VyLmFsaWFzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZGF0YS5hdXRob3JJZCA9IHVzZXIucHViOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cblxuICBjb25zdCB0aGluZyA9IHB1dChwZWVyLCB7IC4uLmRhdGEsIHRpbWVzdGFtcCwga2luZDogXCJzdWJtaXNzaW9uXCIgfSk7XG5cbiAgaWYgKHVzZXIpIHtcbiAgICBjb25zdCB0aGluZ3NTb3VsID0gU2NoZW1hLkF1dGhvclRoaW5ncy5yb3V0ZS5yZXZlcnNlKHtcbiAgICAgIGF1dGhvcklkOiB1c2VyLnB1YlxuICAgIH0pO1xuICAgIGNvbnN0IHN1Ym1pc3Npb25zU291bCA9IFNjaGVtYS5BdXRob3JTdWJtaXNzaW9ucy5yb3V0ZS5yZXZlcnNlKHtcbiAgICAgIGF1dGhvcklkOiB1c2VyLnB1YlxuICAgIH0pO1xuICAgIGNvbnN0IHRoaW5ncyA9IHBlZXIuZ3VuLmdldCh0aGluZ3NTb3VsKTtcbiAgICBjb25zdCBzdWJtaXNzaW9ucyA9IHBlZXIuZ3VuLmdldChzdWJtaXNzaW9uc1NvdWwpO1xuXG4gICAgcGVlci5ndW5cbiAgICAgIC51c2VyKClcbiAgICAgIC5nZXQoXCJ0aGluZ3NcIilcbiAgICAgIC5wdXQodGhpbmdzKTtcbiAgICBwZWVyLmd1blxuICAgICAgLnVzZXIoKVxuICAgICAgLmdldChcInN1Ym1pc3Npb25zXCIpXG4gICAgICAucHV0KHN1Ym1pc3Npb25zKTtcbiAgICB0aGluZ3Muc2V0KHRoaW5nKTtcbiAgICBzdWJtaXNzaW9ucy5zZXQodGhpbmcpO1xuICB9XG5cbiAgcmV0dXJuIHRoaW5nO1xufSk7XG5cbmNvbnN0IGNvbW1lbnQgPSBSLmN1cnJ5KChwZWVyLCBkYXRhKSA9PiB7XG4gIGNvbnN0IHVzZXIgPSBwZWVyLmlzTG9nZ2VkSW4oKTtcblxuICBpZiAoZGF0YS50b3BpYykgZGF0YS50b3BpYyA9IGRhdGEudG9waWMudG9Mb3dlckNhc2UoKS50cmltKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKHVzZXIpIHtcbiAgICBkYXRhLmF1dGhvciA9IHVzZXIuYWxpYXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBkYXRhLmF1dGhvcklkID0gdXNlci5wdWI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIGNvbnN0IHRoaW5nID0gcHV0KHBlZXIsIHsgLi4uZGF0YSwga2luZDogXCJjb21tZW50XCIgfSk7XG5cbiAgaWYgKHVzZXIpIHtcbiAgICBjb25zdCB0aGluZ3NTb3VsID0gU2NoZW1hLkF1dGhvclRoaW5ncy5yb3V0ZS5yZXZlcnNlKHtcbiAgICAgIGF1dGhvcklkOiB1c2VyLnB1YlxuICAgIH0pO1xuICAgIGNvbnN0IGNvbW1lbnRzU291bCA9IFNjaGVtYS5BdXRob3JDb21tZW50cy5yb3V0ZS5yZXZlcnNlKHtcbiAgICAgIGF1dGhvcklkOiB1c2VyLnB1YlxuICAgIH0pO1xuICAgIGNvbnN0IHRoaW5ncyA9IHBlZXIuZ3VuLmdldCh0aGluZ3NTb3VsKTtcbiAgICBjb25zdCBjb21tZW50cyA9IHBlZXIuZ3VuLmdldChjb21tZW50c1NvdWwpO1xuXG4gICAgcGVlci5ndW5cbiAgICAgIC51c2VyKClcbiAgICAgIC5nZXQoXCJ0aGluZ3NcIilcbiAgICAgIC5wdXQodGhpbmdzKTtcbiAgICBwZWVyLmd1blxuICAgICAgLnVzZXIoKVxuICAgICAgLmdldChcImNvbW1lbnRzXCIpXG4gICAgICAucHV0KGNvbW1lbnRzKTtcbiAgICB0aGluZ3Muc2V0KHRoaW5nKTtcbiAgICBjb21tZW50cy5zZXQodGhpbmcpO1xuICB9XG5cbiAgLy8gcGVlci5ndW4udXNlcigpLmdldChcImNvbW1lbnRzXCIpLnB1dChwZWVyLmd1bi51c2VyKCkuZ2V0KFwiY29tbWVudHNcIikpO1xuXG4gIHJldHVybiB0aGluZztcbn0pO1xuXG5jb25zdCBjaGF0ID0gUi5jdXJyeSgocGVlciwgZGF0YSkgPT4ge1xuICBjb25zdCB1c2VyID0gcGVlci5pc0xvZ2dlZEluKCk7XG5cbiAgaWYgKGRhdGEudG9waWMpIGRhdGEudG9waWMgPSBkYXRhLnRvcGljLnRvTG93ZXJDYXNlKCkudHJpbSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGlmICh1c2VyKSB7XG4gICAgZGF0YS5hdXRob3IgPSB1c2VyLmFsaWFzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZGF0YS5hdXRob3JJZCA9IHVzZXIucHViOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cblxuICBjb25zdCB0aGluZyA9IHB1dChwZWVyLCB7IC4uLmRhdGEsIGtpbmQ6IFwiY2hhdG1zZ1wiIH0pO1xuXG4gIGlmICh1c2VyKSB7XG4gICAgY29uc3QgdGhpbmdzU291bCA9IFNjaGVtYS5BdXRob3JUaGluZ3Mucm91dGUucmV2ZXJzZSh7XG4gICAgICBhdXRob3JJZDogdXNlci5wdWJcbiAgICB9KTtcbiAgICBjb25zdCB0aGluZ3MgPSBwZWVyLmd1bi5nZXQodGhpbmdzU291bCk7XG5cbiAgICBwZWVyLmd1blxuICAgICAgLnVzZXIoKVxuICAgICAgLmdldChcInRoaW5nc1wiKVxuICAgICAgLnB1dCh0aGluZ3MpO1xuICAgIHRoaW5ncy5zZXQodGhpbmcpO1xuICB9XG5cbiAgcmV0dXJuIHRoaW5nO1xufSk7XG5cbmNvbnN0IHdyaXRlUGFnZSA9IFIuY3VycnkoKHBlZXIsIG5hbWUsIGJvZHkpID0+IHtcbiAgY29uc3QgdXNlciA9IHBlZXIuaXNMb2dnZWRJbigpO1xuXG4gIGlmICghdXNlcikgcmV0dXJuIFByb21pc2UucmVqZWN0KFwibm90IGxvZ2dlZCBpblwiKTtcbiAgbGV0IHRoaW5nO1xuICBjb25zdCBwYWdlc1NvdWwgPSBTY2hlbWEuQXV0aG9yUGFnZXMucm91dGUucmV2ZXJzZSh7IGF1dGhvcklkOiB1c2VyLnB1YiB9KTtcbiAgY29uc3QgY2hhaW4gPSBwZWVyLmd1bi5nZXQocGFnZXNTb3VsKS5nZXQobmFtZSk7XG5cbiAgcmV0dXJuIGNoYWluLnRoZW4ocmVzID0+IHtcbiAgICBpZiAocmVzICYmIHJlcy5kYXRhKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInJlc1wiLCByZXMpO1xuICAgICAgY2hhaW5cbiAgICAgICAgLmdldChcImRhdGFcIilcbiAgICAgICAgLmdldChcImJvZHlcIilcbiAgICAgICAgLnB1dChib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgYm9keSxcbiAgICAgICAgdGl0bGU6IG5hbWUsXG4gICAgICAgIGtpbmQ6IFwid2lraXBhZ2VcIixcbiAgICAgICAgYXV0aG9yOiB1c2VyLmFsaWFzLFxuICAgICAgICBhdXRob3JJZDogdXNlci5wdWJcbiAgICAgIH07XG5cbiAgICAgIGNvbnNvbGUubG9nKFwicGFnZSBkYXRhXCIsIGRhdGEpO1xuICAgICAgdGhpbmcgPSBwdXQocGVlciwgZGF0YSk7XG4gICAgICBjaGFpbi5wdXQodGhpbmcpO1xuICAgIH1cbiAgfSk7XG59KTtcblxuY29uc3Qgdm90ZSA9IFIuY3VycnkoKHBlZXIsIGlkLCBraW5kLCBub25jZSkgPT4ge1xuICBjb25zdCB2b3RlcyA9IHBlZXIuZ3VuLmdldChcbiAgICBTY2hlbWFba2luZCA9PT0gXCJ1cFwiID8gXCJUaGluZ1ZvdGVzVXBcIiA6IFwiVGhpbmdWb3Rlc0Rvd25cIl0ucm91dGUucmV2ZXJzZSh7XG4gICAgICB0aGluZ0lkOiBpZFxuICAgIH0pXG4gICk7XG5cbiAgcmV0dXJuIHZvdGVzLmdldChub25jZSkucHV0KFwiMVwiKTtcbn0pO1xuXG5jb25zdCB0b3BpY1ByZWZpeGVzID0ge1xuICBjaGF0bXNnOiBcImNoYXQ6XCIsXG4gIGNvbW1lbnQ6IFwiY29tbWVudHM6XCJcbn07XG5cbmNvbnN0IGluZGV4ID0gUi5jdXJyeSgocGVlciwgdGhpbmdJZCwgZGF0YSkgPT4ge1xuICBpZiAoIWRhdGEudG9waWMgJiYgIWRhdGEub3BJZCkgcmV0dXJuO1xuXG4gIGlmIChkYXRhLm9wSWQgJiYgIWRhdGEudG9waWMpIHtcbiAgICBwZWVyLmd1blxuICAgICAgLmdldChTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQ6IGRhdGEub3BJZCB9KSlcbiAgICAgIC5nZXQoXCJkYXRhXCIpXG4gICAgICAub24oZnVuY3Rpb24gcmVjdih0ZCkge1xuICAgICAgICBpZiAoIXRkKSByZXR1cm47XG4gICAgICAgIGluZGV4KHBlZXIsIHRoaW5nSWQsIHsgLi4uZGF0YSwgdG9waWM6IHRkLnRvcGljIHx8IFwiYWxsXCIgfSk7XG4gICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB0aGluZyA9IHBlZXIuZ3VuLmdldChTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkpO1xuICBjb25zdCBkYXlTdHIgPSBUaGluZ1NldC5kYXlTdHIoZGF0YS50aW1lc3RhbXApO1xuICBjb25zdCBbeWVhciwgbW9udGgsIGRheV0gPSBkYXlTdHIuc3BsaXQoXCIvXCIpO1xuICBjb25zdCB0b3BpY1ByZWZpeCA9IHRvcGljUHJlZml4ZXNbZGF0YS5raW5kXSB8fCBcIlwiO1xuICBjb25zdCBiYXNlVG9waWNOYW1lID0gZGF0YS50b3BpYy50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgY29uc3QgdG9waWNOYW1lID0gdG9waWNQcmVmaXggKyBiYXNlVG9waWNOYW1lO1xuICBjb25zdCB0b3BpYyA9IHBlZXIuZ3VuLmdldChTY2hlbWEuVG9waWMucm91dGUucmV2ZXJzZSh7IHRvcGljTmFtZSB9KSk7XG4gIGNvbnN0IHRvcGljRGF5ID0gcGVlci5ndW4uZ2V0KFxuICAgIFNjaGVtYS5Ub3BpY0RheS5yb3V0ZS5yZXZlcnNlKHsgdG9waWNOYW1lLCB5ZWFyLCBtb250aCwgZGF5IH0pXG4gICk7XG5cbiAgaWYgKCFkYXRhLnNraXBBbGwgJiYgZGF0YS50b3BpYyAhPT0gXCJhbGxcIikge1xuICAgIGNvbnN0IGFsbG5hbWUgPSBgJHt0b3BpY1ByZWZpeH1hbGxgO1xuICAgIGNvbnN0IGFsbFRvcGljID0gcGVlci5ndW4uZ2V0KFxuICAgICAgU2NoZW1hLlRvcGljLnJvdXRlLnJldmVyc2UoeyB0b3BpY05hbWU6IGFsbG5hbWUgfSlcbiAgICApO1xuICAgIGNvbnN0IGFsbFRvcGljRGF5ID0gcGVlci5ndW4uZ2V0KFxuICAgICAgU2NoZW1hLlRvcGljRGF5LnJvdXRlLnJldmVyc2Uoe1xuICAgICAgICB0b3BpY05hbWU6IGFsbG5hbWUsXG4gICAgICAgIHllYXIsXG4gICAgICAgIG1vbnRoLFxuICAgICAgICBkYXlcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGFsbFRvcGljLnNldCh0aGluZyk7XG4gICAgYWxsVG9waWNEYXkuc2V0KHRoaW5nKTtcbiAgfVxuXG4gIGlmIChkYXRhLmtpbmQgPT09IFwic3VibWlzc2lvblwiKSB7XG4gICAgY29uc3QgdXJsSW5mbyA9IGRhdGEudXJsID8gcGFyc2VVUkkoZGF0YS51cmwpIDoge307XG4gICAgY29uc3QgZG9tYWluTmFtZSA9IChkYXRhLnVybFxuICAgICAgPyAodXJsSW5mby5ob3N0IHx8IHVybEluZm8uc2NoZW1lIHx8IFwiXCIpLnJlcGxhY2UoL153d3dcXC4vLCBcIlwiKVxuICAgICAgOiBgc2VsZi4ke2RhdGEudG9waWN9YFxuICAgICkudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBkb21haW4gPSBwZWVyLmd1bi5nZXQoU2NoZW1hLkRvbWFpbi5yb3V0ZS5yZXZlcnNlKHsgZG9tYWluTmFtZSB9KSk7XG5cbiAgICBkb21haW4uc2V0KHRoaW5nKTtcblxuICAgIGlmIChkYXRhLnVybCkge1xuICAgICAgY29uc3QgdXJsTm9kZSA9IHBlZXIuZ3VuLmdldChTY2hlbWEuVVJMLnJvdXRlLnJldmVyc2UoeyB1cmw6IGRhdGEudXJsIH0pKTtcblxuICAgICAgLy8gdGhpbmcuZ2V0KFwidXJsXCIpLnB1dCh1cmxOb2RlKTtcbiAgICAgIHVybE5vZGUuc2V0KHRoaW5nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5vcElkKSB7XG4gICAgY29uc3QgYWxsY29tbWVudHMgPSBwZWVyLmd1bi5nZXQoXG4gICAgICBTY2hlbWEuVGhpbmdBbGxDb21tZW50cy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZDogZGF0YS5vcElkIH0pXG4gICAgKTtcblxuICAgIGFsbGNvbW1lbnRzLnNldCh0aGluZyk7XG4gIH1cblxuICBpZiAoZGF0YS5yZXBseVRvSWQgfHwgZGF0YS5vcElkKSB7XG4gICAgY29uc3QgY29tbWVudHMgPSBwZWVyLmd1bi5nZXQoXG4gICAgICBTY2hlbWEuVGhpbmdDb21tZW50cy5yb3V0ZS5yZXZlcnNlKHtcbiAgICAgICAgdGhpbmdJZDogZGF0YS5yZXBseVRvSWQgfHwgZGF0YS5vcElkXG4gICAgICB9KVxuICAgICk7XG5cbiAgICBjb21tZW50cy5zZXQodGhpbmcpO1xuICB9XG5cbiAgdG9waWMuc2V0KHRoaW5nKTtcbiAgdG9waWNEYXkuc2V0KHRoaW5nKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgVGhpbmcgPSB7XG4gIHB1dCxcbiAgc3VibWl0LFxuICBjb21tZW50LFxuICBjaGF0LFxuICB3cml0ZVBhZ2UsXG4gIHZvdGUsXG4gIGluZGV4XG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IHNjb3BlIGFzIG1ha2VTY29wZSwgcXVlcnksIGFsbCwgcmVzb2x2ZSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuL0NvbnN0YW50c1wiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBUaGluZ1NldCB9IGZyb20gXCIuL1RoaW5nXCI7XG5pbXBvcnQgeyBMaXN0aW5nTm9kZSB9IGZyb20gXCIuL0xpc3RpbmcvTGlzdGluZ05vZGVcIjtcblxuY29uc3QgZW1wdHlQcm9taXNlID0gcmVzb2x2ZShudWxsKTtcbmNvbnN0IHVuaW9uQXJyYXlzID0gUi5yZWR1Y2UoUi51bmlvbiwgW10pO1xuXG5jb25zdCB0b3BpY1NvdWxzID0gcGFyYW1zID0+IHtcbiAgY29uc3QgeyB0b3BpY3MgPSBbXCJhbGxcIl0gfSA9IHBhcmFtcyB8fCB7fTtcbiAgY29uc3QgZGF5cyA9IFIucHJvcE9yKDM2NSwgXCJkYXlzXCIsIHBhcmFtcykgfHwgMzY1O1xuICBjb25zdCBkYXlTdHJpbmdzID0gW107XG4gIGNvbnN0IG9uZURheSA9IDEwMDAgKiA2MCAqIDYwICogMjQ7XG4gIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBvbmVEYXkgKiBwYXJzZUludChkYXlzLCAxMCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZGF5cyArIDE7IGkrKylcbiAgICBkYXlTdHJpbmdzLnB1c2goVGhpbmdTZXQuZGF5U3RyKHN0YXJ0ICsgaSAqIG9uZURheSkpO1xuICByZXR1cm4gT2JqZWN0LmtleXMoXG4gICAgdG9waWNzLnJlZHVjZShcbiAgICAgIChyZXN1bHQsIHRvcGljTmFtZSkgPT5cbiAgICAgICAgZGF5U3RyaW5ncy5yZWR1Y2UoKHJlcywgZHMpID0+IHtcbiAgICAgICAgICByZXNbYCR7Q29uc3RhbnRzLlBSRUZJWH0vdG9waWNzLyR7dG9waWNOYW1lfS9kYXlzLyR7ZHN9YF0gPSB0cnVlO1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0sIHJlc3VsdCksXG4gICAgICB7fVxuICAgIClcbiAgKTtcbn07XG5cbmNvbnN0IHNpbmdsZVRvcGljID0gcXVlcnkoKHNjb3BlLCBwYXJhbXMpID0+IHtcbiAgY29uc3QgdFNvdWxzID0gdG9waWNTb3Vscyh7IC4uLnBhcmFtcywgdG9waWNzOiBbcGFyYW1zLnRvcGljXSB9KTtcbiAgbGV0IHNvdWxzID0gW107XG4gIGxldCBpdGVtTWF4ID0gQ29uc3RhbnRzLkxJU1RJTkdfU0laRTtcblxuICBpZiAocGFyYW1zLnNvcnQgPT09IFwibmV3XCIpIHtcbiAgICBpdGVtTWF4ID0gQ29uc3RhbnRzLkxJU1RJTkdfU0laRTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocGFyYW1zLnNvcnQgPT09IFwidG9wXCIpIGl0ZW1NYXggPSBpdGVtTWF4ICogMztcbiAgICBpZiAocGFyYW1zLnRvcGljID09PSBcImFsbFwiKSBpdGVtTWF4ID0gaXRlbU1heCAqIDM7XG4gIH1cblxuICBjb25zdCBmZXRjaE1vcmUgPSAoKSA9PiB7XG4gICAgY29uc3QgdG9waWNTb3VsID0gdFNvdWxzLnBvcCgpO1xuXG4gICAgaWYgKHNvdWxzLmxlbmd0aCA+IGl0ZW1NYXggfHwgIXRvcGljU291bCkgcmV0dXJuIHJlc29sdmUoc291bHMpO1xuICAgIHJldHVybiBzY29wZVxuICAgICAgLmdldCh0b3BpY1NvdWwpXG4gICAgICAuc291bHMoKVxuICAgICAgLnRoZW4obW9yZSA9PiB7XG4gICAgICAgIHNvdWxzID0gWy4uLnNvdWxzLCAuLi5tb3JlXTtcbiAgICAgICAgcmV0dXJuIGZldGNoTW9yZSgpO1xuICAgICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIGZldGNoTW9yZSgpO1xufSk7XG5cbmNvbnN0IHNpbmdsZURvbWFpbiA9IHF1ZXJ5KChzY29wZSwgeyBkb21haW4gfSkgPT5cbiAgc2NvcGUuZ2V0KFNjaGVtYS5Eb21haW4ucm91dGUucmV2ZXJzZSh7IGRvbWFpbk5hbWU6IGRvbWFpbiB9KSkuc291bHMoKVxuKTtcblxuY29uc3Qgc2luZ2xlQXV0aG9yID0gcXVlcnkoKHNjb3BlLCBwYXJhbXMpID0+XG4gIGFsbChbXG4gICAgcGFyYW1zLnR5cGUgJiYgcGFyYW1zLnR5cGUgIT09IFwic3VibWl0dGVkXCIgJiYgcGFyYW1zLnR5cGUgIT09IFwib3ZlcnZpZXdcIlxuICAgICAgPyByZXNvbHZlKFtdKVxuICAgICAgOiBzY29wZVxuICAgICAgICAgIC5nZXQocGFyYW1zLmF1dGhvcklkKVxuICAgICAgICAgIC5nZXQoXCJzdWJtaXNzaW9uc1wiKVxuICAgICAgICAgIC5zb3VscygpLFxuICAgIHBhcmFtcy50eXBlICYmXG4gICAgcGFyYW1zLnR5cGUgIT09IFwiY29tbWVudHNcIiAmJlxuICAgIHBhcmFtcy50eXBlICE9PSBcIm92ZXJ2aWV3XCIgJiZcbiAgICBwYXJhbXMudHlwZSAhPT0gXCJjb21tYW5kc1wiXG4gICAgICA/IHJlc29sdmUoW10pXG4gICAgICA6IHNjb3BlXG4gICAgICAgICAgLmdldChwYXJhbXMuYXV0aG9ySWQpXG4gICAgICAgICAgLmdldChcImNvbW1lbnRzXCIpXG4gICAgICAgICAgLnNvdWxzKClcbiAgXSkudGhlbigoW3N1Ym1pc3Npb25zLCBjb21tZW50c10pID0+IHVuaW9uQXJyYXlzKFtzdWJtaXNzaW9ucywgY29tbWVudHNdKSlcbik7XG5cbmNvbnN0IGxpc3RpbmdJZHMgPSBxdWVyeShcbiAgKHNjb3BlLCBzb3VsKSA9PiBzY29wZS5nZXQoc291bCkudGhlbihMaXN0aW5nTm9kZS5zb3J0ZWRJZHMpLFxuICBcImxpc3RpbmdJZHNcIlxuKTtcblxuY29uc3Qgc2luZ2xlTGlzdGluZyA9IHF1ZXJ5KChzY29wZSwgeyBsaXN0aW5nLCBzb3J0LCBpbmRleGVyIH0pID0+XG4gIGxpc3RpbmdJZHMoc2NvcGUsIGAke0NvbnN0YW50cy5QUkVGSVh9JHtsaXN0aW5nfS8ke3NvcnR9QH4ke2luZGV4ZXJ9LmApLnRoZW4oXG4gICAgUi5jb21wb3NlKFxuICAgICAgUi5tYXAodGhpbmdJZCA9PiBTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkpLFxuICAgICAgUi5maWx0ZXIoUi5pZGVudGl0eSlcbiAgICApXG4gIClcbik7XG5cbmNvbnN0IHJlcGxpZXNUb0F1dGhvciA9IHF1ZXJ5KFxuICAoc2NvcGUsIHsgcmVwbGllc1RvQXV0aG9ySWQsIHR5cGUgPSBcIm92ZXJ2aWV3XCIsIC4uLnBhcmFtcyB9KSA9PlxuICAgIHNpbmdsZUxpc3Rpbmcoc2NvcGUsIHtcbiAgICAgIGxpc3Rpbmc6IGAvdXNlci8ke3JlcGxpZXNUb0F1dGhvcklkfS8ke3R5cGV9YCxcbiAgICAgIHNvcnQ6IFwibmV3XCIsXG4gICAgICAuLi5wYXJhbXNcbiAgICB9KS50aGVuKGF1dGhvcmVkU291bHMgPT5cbiAgICAgIGFsbChcbiAgICAgICAgYXV0aG9yZWRTb3Vscy5tYXAoYXV0aG9yZWRTb3VsID0+XG4gICAgICAgICAgc2NvcGUuZ2V0KGAke2F1dGhvcmVkU291bH0vY29tbWVudHNgKS5zb3VscygpXG4gICAgICAgIClcbiAgICAgICkudGhlbih1bmlvbkFycmF5cylcbiAgICApXG4pO1xuXG5jb25zdCBzaW5nbGVTdWJtaXNzaW9uID0gcXVlcnkoKHNjb3BlLCBwYXJhbXMpID0+XG4gIHNjb3BlXG4gICAgLmdldChcbiAgICAgIFNjaGVtYS5UaGluZ0FsbENvbW1lbnRzLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkOiBwYXJhbXMuc3VibWlzc2lvbklkIH0pXG4gICAgKVxuICAgIC5zb3VscyhcbiAgICAgIFIucHJlcGVuZChTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQ6IHBhcmFtcy5zdWJtaXNzaW9uSWQgfSkpXG4gICAgKVxuKTtcblxuY29uc3QgdGhpbmcgPSBxdWVyeSgoc2NvcGUsIHRoaW5nU291bCkgPT5cbiAgc2NvcGUuZ2V0KHRoaW5nU291bCkudGhlbihtZXRhID0+IHtcbiAgICBpZiAoIW1ldGEgfHwgIW1ldGEuaWQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgaWQ6IG1ldGEuaWQsIHRpbWVzdGFtcDogcGFyc2VGbG9hdChtZXRhLnRpbWVzdGFtcCwgMTApIH07XG4gICAgY29uc3QgcmVwbHlUb1NvdWwgPSBSLnBhdGgoW1wicmVwbHlUb1wiLCBcIiNcIl0sIG1ldGEpO1xuICAgIGNvbnN0IG9wU291bCA9IFIucGF0aChbXCJvcFwiLCBcIiNcIl0sIG1ldGEpO1xuICAgIGNvbnN0IG9wSWQgPSBvcFNvdWwgPyBTY2hlbWEuVGhpbmcucm91dGUubWF0Y2gob3BTb3VsKS50aGluZ2lkIDogbnVsbDtcbiAgICBjb25zdCByZXBseVRvSWQgPSByZXBseVRvU291bFxuICAgICAgPyBTY2hlbWEuVGhpbmcucm91dGUubWF0Y2gocmVwbHlUb1NvdWwpLnRoaW5naWRcbiAgICAgIDogbnVsbDtcblxuICAgIGlmIChvcElkKSByZXN1bHQub3BJZCA9IG9wSWQ7XG4gICAgaWYgKHJlcGx5VG9JZCkgcmVzdWx0LnJlcGx5VG9JZCA9IHJlcGx5VG9JZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KVxuKTtcblxuY29uc3QgdGhpbmdWb3RlQ291bnQgPSB2b3RlVHlwZSA9PlxuICBxdWVyeSgoc2NvcGUsIHRoaW5nU291bCkgPT5cbiAgICBzY29wZVxuICAgICAgLmdldCh0aGluZ1NvdWwpXG4gICAgICAuZ2V0KHZvdGVUeXBlKVxuICAgICAgLmNvdW50KClcbiAgKTtcblxuY29uc3QgdGhpbmdWb3Rlc1VwID0gdGhpbmdWb3RlQ291bnQoXCJ2b3Rlc3VwXCIpO1xuY29uc3QgdGhpbmdWb3Rlc0Rvd24gPSB0aGluZ1ZvdGVDb3VudChcInZvdGVzZG93blwiKTtcbmNvbnN0IHRoaW5nQWxsQ29tbWVudHNDb3VudCA9IHF1ZXJ5KChzY29wZSwgdGhpbmdTb3VsKSA9PlxuICBzY29wZS5nZXQoYCR7dGhpbmdTb3VsfS9hbGxjb21tZW50c2ApLmNvdW50KClcbik7XG5cbmNvbnN0IGNvbXB1dGVUaGluZ1Njb3JlcyA9IHF1ZXJ5KChzY29wZSwgdGhpbmdTb3VsKSA9PlxuICBhbGwoW1xuICAgIHRoaW5nVm90ZXNVcChzY29wZSwgdGhpbmdTb3VsKSxcbiAgICB0aGluZ1ZvdGVzRG93bihzY29wZSwgdGhpbmdTb3VsKSxcbiAgICB0aGluZ0FsbENvbW1lbnRzQ291bnQoc2NvcGUsIHRoaW5nU291bClcbiAgXSkudGhlbigoW3VwLCBkb3duLCBjb21tZW50XSkgPT4gKHsgdXAsIGRvd24sIGNvbW1lbnQsIHNjb3JlOiB1cCAtIGRvd24gfSkpXG4pO1xuXG5jb25zdCB0aGluZ01ldGEgPSBxdWVyeShcbiAgKHNjb3BlLCB7IHRoaW5nU291bCwgdGFidWxhdG9yLCBkYXRhID0gZmFsc2UsIHNjb3JlcyA9IGZhbHNlIH0pID0+IHtcbiAgICBpZiAoIXRoaW5nU291bCkgcmV0dXJuIHJlc29sdmUobnVsbCk7XG4gICAgcmV0dXJuIGFsbChbXG4gICAgICB0aGluZyhzY29wZSwgdGhpbmdTb3VsKSxcbiAgICAgIHNjb3Jlc1xuICAgICAgICA/IHRhYnVsYXRvclxuICAgICAgICAgID8gc2NvcGUuZ2V0KGAke3RoaW5nU291bH0vdm90ZWNvdW50c0B+JHt0YWJ1bGF0b3J9LmApLnRoZW4oKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgOiBjb21wdXRlVGhpbmdTY29yZXMoc2NvcGUsIHRoaW5nU291bCkudGhlbigpXG4gICAgICAgIDogcmVzb2x2ZSgpLFxuICAgICAgZGF0YVxuICAgICAgICA/IHNjb3BlXG4gICAgICAgICAgICAuZ2V0KHRoaW5nU291bClcbiAgICAgICAgICAgIC5nZXQoXCJkYXRhXCIpXG4gICAgICAgICAgICAudGhlbigpXG4gICAgICAgIDogcmVzb2x2ZSgpXG4gICAgXSkudGhlbigoW21ldGEsIHZvdGVzLCBkYXRhXSkgPT4ge1xuICAgICAgaWYgKCFtZXRhIHx8ICFtZXRhLmlkKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB7IC4uLm1ldGEsIHZvdGVzLCBkYXRhIH07XG4gICAgfSk7XG4gIH1cbik7XG5cbmNvbnN0IG11bHRpVGhpbmdNZXRhID0gcXVlcnkoKHNjb3BlLCBwYXJhbXMpID0+XG4gIGFsbChcbiAgICBSLnJlZHVjZShcbiAgICAgIChwcm9taXNlcywgdGhpbmdTb3VsKSA9PiB7XG4gICAgICAgIGlmICghdGhpbmdTb3VsKSByZXR1cm4gcHJvbWlzZXM7XG4gICAgICAgIHByb21pc2VzLnB1c2godGhpbmdNZXRhKHNjb3BlLCB7IC4uLnBhcmFtcywgdGhpbmdTb3VsIH0pKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2VzO1xuICAgICAgfSxcbiAgICAgIFtdLFxuICAgICAgUi5wcm9wT3IoW10sIFwidGhpbmdTb3Vsc1wiLCBwYXJhbXMpXG4gICAgKVxuICApXG4pO1xuXG5jb25zdCBtdWx0aVF1ZXJ5ID0gKHNpbmdsZVF1ZXJ5LCBwbHVyYWwsIHNpbmdsZSwgY29sbGF0ZSA9IHVuaW9uQXJyYXlzKSA9PlxuICBxdWVyeSgoc2NvcGUsIHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGl0ZW1zID0gUi5wcm9wKHBsdXJhbCwgcGFyYW1zKTtcblxuICAgIGlmIChSLmlzTmlsKGl0ZW1zKSkgcmV0dXJuIGVtcHR5UHJvbWlzZTtcbiAgICByZXR1cm4gYWxsKFxuICAgICAgUi5tYXAoXG4gICAgICAgIHZhbCA9PiBzaW5nbGVRdWVyeShzY29wZSwgeyAuLi5wYXJhbXMsIFtzaW5nbGVdOiB2YWwgfSksXG4gICAgICAgIFIucHJvcE9yKFtdLCBwbHVyYWwsIHBhcmFtcylcbiAgICAgIClcbiAgICApLnRoZW4oY29sbGF0ZSk7XG4gIH0pO1xuXG5jb25zdCBtdWx0aVRvcGljID0gbXVsdGlRdWVyeShzaW5nbGVUb3BpYywgXCJ0b3BpY3NcIiwgXCJ0b3BpY1wiKTtcbmNvbnN0IG11bHRpRG9tYWluID0gbXVsdGlRdWVyeShzaW5nbGVEb21haW4sIFwiZG9tYWluc1wiLCBcImRvbWFpblwiKTtcbmNvbnN0IG11bHRpQXV0aG9yID0gbXVsdGlRdWVyeShzaW5nbGVBdXRob3IsIFwiYXV0aG9ySWRzXCIsIFwiYXV0aG9ySWRcIik7XG5jb25zdCBtdWx0aVN1Ym1pc3Npb24gPSBtdWx0aVF1ZXJ5KFxuICBzaW5nbGVTdWJtaXNzaW9uLFxuICBcInN1Ym1pc3Npb25JZHNcIixcbiAgXCJzdWJtaXNzaW9uSWRcIlxuKTtcblxuY29uc3QgdGhpbmdEYXRhRnJvbVNvdWxzID0gc2NvcGUgPT4gc291bHMgPT5cbiAgYWxsKFxuICAgIHNvdWxzXG4gICAgICAuZmlsdGVyKHggPT4gISF4KVxuICAgICAgLm1hcChzb3VsID0+XG4gICAgICAgIHNjb3BlXG4gICAgICAgICAgLmdldChzb3VsKVxuICAgICAgICAgIC5nZXQoXCJkYXRhXCIpXG4gICAgICAgICAgLnRoZW4oeCA9PiB4KVxuICAgICAgKVxuICApO1xuXG5jb25zdCBjdXJhdGVkID0gcXVlcnkoKHNjb3BlLCBhdXRob3JJZHMsIHN1Ym1pc3Npb25Pbmx5ID0gZmFsc2UpID0+XG4gIGFsbChbXG4gICAgbXVsdGlBdXRob3Ioc2NvcGUsIHtcbiAgICAgIHR5cGU6IFwiY29tbWVudHNcIixcbiAgICAgIGF1dGhvcklkc1xuICAgIH0pXG4gICAgICAudGhlbih0aGluZ0RhdGFGcm9tU291bHMoc2NvcGUpKVxuICAgICAgLnRoZW4oXG4gICAgICAgIFIuY29tcG9zZShcbiAgICAgICAgICBSLm1hcChzdWJtaXNzaW9uT25seSA/IFIucHJvcChcIm9wSWRcIikgOiBSLnByb3AoXCJyZXBseVRvSWRcIikpLFxuICAgICAgICAgIFIuZmlsdGVyKFIucHJvcChcInJlcGx5VG9JZFwiKSlcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICBtdWx0aUF1dGhvcihzY29wZSwge1xuICAgICAgdHlwZTogXCJzdWJtaXR0ZWRcIixcbiAgICAgIGF1dGhvcklkc1xuICAgIH0pLnRoZW4oUi5tYXAoc291bCA9PiBTY2hlbWEuVGhpbmcucm91dGUubWF0Y2goc291bCkudGhpbmdJZCkpXG4gIF0pLnRoZW4oKFtpZHMxLCBpZHMyXSkgPT4gUi51bmlxKFsuLi5pZHMxLCAuLi5pZHMyXSkpXG4pO1xuXG5jb25zdCB0aGluZ1Njb3JlcyA9IHF1ZXJ5KFxuICAoc2NvcGUsIHRhYnVsYXRvciwgdGhpbmdJZCkgPT5cbiAgICB0YWJ1bGF0b3IgJiYgdGhpbmdJZFxuICAgICAgPyBzY29wZVxuICAgICAgICAgIC5nZXQoU2NoZW1hLlRoaW5nVm90ZUNvdW50cy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCwgdGFidWxhdG9yIH0pKVxuICAgICAgICAgIC50aGVuKClcbiAgICAgIDogcmVzb2x2ZSgpLFxuICBcInRoaW5nU2NvcmVzXCJcbik7XG5cbmNvbnN0IHRoaW5nUmVwbGllcyA9IHF1ZXJ5KChzY29wZSwgdGhpbmdJZCkgPT5cbiAgc2NvcGUuZ2V0KFNjaGVtYS5UaGluZ0NvbW1lbnRzLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkIH0pKS50aGVuKClcbik7XG5cbmNvbnN0IHRoaW5nRGF0YSA9IHF1ZXJ5KFxuICAoc2NvcGUsIHRoaW5nSWQpID0+XG4gICAgdGhpbmdJZFxuICAgICAgPyBzY29wZS5nZXQoU2NoZW1hLlRoaW5nLnJvdXRlLnJldmVyc2UoeyB0aGluZ0lkIH0pKS5nZXQoXCJkYXRhXCIpXG4gICAgICA6IHJlc29sdmUobnVsbCksXG4gIFwidGhpbmdEYXRhXCJcbik7XG5cbmNvbnN0IHVzZXJQYWdlcyA9IHF1ZXJ5KFxuICAoc2NvcGUsIGF1dGhvcklkKSA9PlxuICAgIHNjb3BlLmdldChTY2hlbWEuQXV0aG9yUGFnZXMucm91dGUucmV2ZXJzZSh7IGF1dGhvcklkIH0pKSxcbiAgXCJ1c2VyUGFnZXNcIlxuKTtcblxuY29uc3Qgd2lraVBhZ2VJZCA9IHF1ZXJ5KFxuICAoc2NvcGUsIGF1dGhvcklkLCBuYW1lKSA9PlxuICAgIHNjb3BlXG4gICAgICAuZ2V0KFNjaGVtYS5BdXRob3JQYWdlcy5yb3V0ZS5yZXZlcnNlKHsgYXV0aG9ySWQgfSkpXG4gICAgICAuZ2V0KG5hbWUpXG4gICAgICAuZ2V0KFwiaWRcIiksXG4gIFwid2lraVBhZ2VJZFwiXG4pO1xuXG5jb25zdCB3aWtpUGFnZSA9IHF1ZXJ5KChzY29wZSwgYXV0aG9ySWQsIG5hbWUpID0+XG4gIHdpa2lQYWdlSWQoc2NvcGUsIGF1dGhvcklkLCBuYW1lKS50aGVuKGlkID0+IGlkICYmIHRoaW5nRGF0YShzY29wZSwgaWQpKVxuKTtcblxuY29uc3QgdXNlck1ldGEgPSBxdWVyeSgoc2NvcGUsIGlkKSA9PiB7XG4gIGlmICghaWQpIHJldHVybiByZXNvbHZlKG51bGwpO1xuICByZXR1cm4gc2NvcGUuZ2V0KGB+JHtpZH1gKS50aGVuKG1ldGEgPT4gKHtcbiAgICB1c2VyQWxpYXM6IFIucHJvcChcImFsaWFzXCIsIG1ldGEpLFxuICAgIGNyZWF0ZWRBdDogUi5wYXRoKFtcIl9cIiwgXCI+XCIsIFwicHViXCJdLCBtZXRhKVxuICB9KSk7XG59LCBcInVzZXJNZXRhXCIpO1xuXG5jb25zdCBjcmVhdGVTY29wZSA9IFIuY3VycnkoKG5hYiwgb3B0cykgPT5cbiAgbWFrZVNjb3BlKFIuYXNzb2MoXCJndW5cIiwgbmFiLmd1biwgb3B0cyB8fCB7fSkpXG4pO1xuXG5leHBvcnQgY29uc3QgUXVlcnkgPSB7XG4gIHNpbmdsZVRvcGljLFxuICBzaW5nbGVEb21haW4sXG4gIHNpbmdsZUF1dGhvcixcbiAgc2luZ2xlTGlzdGluZyxcbiAgcmVwbGllc1RvQXV0aG9yLFxuICBzaW5nbGVTdWJtaXNzaW9uLFxuICBjb21wdXRlVGhpbmdTY29yZXMsXG4gIHRoaW5nTWV0YSxcbiAgbXVsdGlUaGluZ01ldGEsXG4gIG11bHRpVG9waWMsXG4gIG11bHRpRG9tYWluLFxuICBtdWx0aUF1dGhvcixcbiAgbXVsdGlTdWJtaXNzaW9uLFxuICB0aGluZ1Njb3JlcyxcbiAgdGhpbmdSZXBsaWVzLFxuICB0aGluZ0RhdGEsXG4gIHRvcGljU291bHMsXG4gIHVzZXJQYWdlcyxcbiAgd2lraVBhZ2VJZCxcbiAgd2lraVBhZ2UsXG4gIHVzZXJNZXRhLFxuICBjcmVhdGVTY29wZSxcbiAgY3VyYXRlZFxufTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSwgcmVzb2x2ZSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi9Db25zdGFudHNcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9Db25maWdcIjtcblxuY29uc3QgW1BPU19JRFgsIFBPU19JRCwgUE9TX1ZBTF0gPSBbMCwgMSwgMiwgM107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbmNvbnN0IHJvd3NUb0lkcyA9IFIubWFwKFIucHJvcChQT1NfSUQpKTtcbmNvbnN0IHJvd3NUb0l0ZW1zID0gUi5tYXAoUi5zbGljZSgxLCAzKSk7XG5jb25zdCBzb3VyY2UgPSBSLnByb3BPcihcIlwiLCBcInNvdXJjZVwiKTtcbmNvbnN0IHNvdWxGcm9tUGF0aCA9IFIuY3VycnkoXG4gIChpbmRleGVyLCBwYXRoKSA9PiBgJHtDb25zdGFudHMuUFJFRklYfSR7cGF0aH1AfiR7aW5kZXhlcn0uYFxuKTtcblxuY29uc3QgZ2V0Um93ID0gUi5jdXJyeSgobm9kZSwgaWR4KSA9PlxuICBSLmNvbXBvc2UoXG4gICAgUi5pZkVsc2UoUi5wcm9wKFwibGVuZ3RoXCIpLCBSLmluc2VydCgwLCBwYXJzZUludChpZHgsIDEwKSksIFIuYWx3YXlzKG51bGwpKSxcbiAgICByb3cgPT4ge1xuICAgICAgcm93WzFdID0gcGFyc2VGbG9hdChyb3dbMV0pO1xuICAgICAgcmV0dXJuIHJvdztcbiAgICB9LFxuICAgIFIubWFwKFIudHJpbSksXG4gICAgUi5zcGxpdChcIixcIiksXG4gICAgUi5wcm9wT3IoXCJcIiwgYCR7aWR4fWApXG4gICkobm9kZSlcbik7XG5cbmNvbnN0IGl0ZW1LZXlzID0gUi5jb21wb3NlKFxuICBSLmZpbHRlcihcbiAgICBSLmNvbXBvc2UoXG4gICAgICB2YWwgPT4gISEodmFsID09PSAwIHx8IHZhbCksXG4gICAgICBwYXJzZUludFxuICAgIClcbiAgKSxcbiAgUi5rZXlzXG4pO1xuXG5jb25zdCByb3dzID0gbm9kZSA9PlxuICBSLmNvbXBvc2UoXG4gICAgUi5tYXAoZ2V0Um93KG5vZGUpKSxcbiAgICBpdGVtS2V5c1xuICApKG5vZGUpO1xuXG5jb25zdCBpZHMgPSBSLmNvbXBvc2UoXG4gIHJvd3NUb0lkcyxcbiAgcm93c1xuKTtcblxuY29uc3Qgc29ydFJvd3MgPSBSLnNvcnRXaXRoKFtcbiAgUi5hc2NlbmQoXG4gICAgUi5jb21wb3NlKFxuICAgICAgUi5jb25kKFtbUi5pc05pbCwgUi5hbHdheXMoSW5maW5pdHkpXSwgW1IuVCwgcGFyc2VGbG9hdF1dKSxcbiAgICAgIFIucHJvcChQT1NfVkFMKVxuICAgIClcbiAgKVxuXSk7XG5cbmNvbnN0IHNvcnRlZElkcyA9IFIuY29tcG9zZShcbiAgUi5tYXAoUi5wcm9wKFBPU19JRCkpLFxuICBzb3J0Um93cyxcbiAgUi5maWx0ZXIoUi5pZGVudGl0eSksXG4gIHJvd3Ncbik7XG5cbmNvbnN0IGRpZmYgPSBhc3luYyAoXG4gIG5vZGUsXG4gIHVwZGF0ZWRJdGVtcyA9IFtdLFxuICByZW1vdmVJZHMgPSBbXSxcbiAgeyBtYXhTaXplID0gMTAwMCB9ID0ge31cbikgPT4ge1xuICBjb25zdCByZW1vdmVkID0gUi5pbmRleEJ5KFIuaWRlbnRpdHksIHJlbW92ZUlkcyk7XG4gIGNvbnN0IGJ5SWQgPSB7fTtcbiAgY29uc3QgY2hhbmdlcyA9IHt9O1xuICBjb25zdCByb3dzID0gW107XG4gIGNvbnN0IHVwZGF0ZWQgPSB7fTtcbiAgbGV0IHRvUmVwbGFjZSA9IFtdO1xuICBsZXQgbWF4SWR4ID0gMDtcbiAgbGV0IGtleTtcblxuICBmb3IgKGtleSBpbiBub2RlIHx8IHt9KSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQoa2V5LCAxMCk7XG5cbiAgICBpZiAoIShwYXJzZWQgfHwgcGFyc2VkID09PSAwKSkgY29udGludWU7XG4gICAgY29uc3Qgcm93ID0gZ2V0Um93KG5vZGUsIGtleSkgfHwgW3BhcnNlZCwgbnVsbCwgbnVsbF07XG4gICAgY29uc3QgW2lkeCwgaWQgPSBudWxsLCByYXdWYWx1ZSA9IG51bGxdID0gcm93OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICByb3dbUE9TX1ZBTF0gPSByYXdWYWx1ZSA9PT0gbnVsbCA/IG51bGwgOiBwYXJzZUZsb2F0KHJhd1ZhbHVlKTtcbiAgICBpZiAoaWQgJiYgcmVtb3ZlZFtpZF0pIHJvd1tQT1NfSURdID0gcm93W1BPU19WQUxdID0gbnVsbDtcbiAgICBpZiAoaWQpIGJ5SWRbaWRdID0gcm93O1xuICAgIGlmIChyb3dbUE9TX0lEXSkge1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvUmVwbGFjZS5wdXNoKHJvdyk7XG4gICAgfVxuICAgIGlmIChpZHggPiBtYXhJZHgpIG1heElkeCA9IGlkeDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdXBkYXRlZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgW2lkLCB2YWx1ZV0gPSB1cGRhdGVkSXRlbXNbaV0gfHwgW251bGwsIG51bGxdO1xuXG4gICAgaWYgKCFpZCkgY29udGludWU7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBieUlkW2lkXTtcblxuICAgIGlmIChleGlzdGluZykge1xuICAgICAgaWYgKGV4aXN0aW5nW1BPU19WQUxdICE9PSB2YWx1ZSkge1xuICAgICAgICBleGlzdGluZ1tQT1NfVkFMXSA9IHZhbHVlO1xuICAgICAgICB1cGRhdGVkW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJvdyA9IFtudWxsLCBpZCwgdmFsdWVdO1xuXG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBhbGxTb3J0ZWQgPSBzb3J0Um93cyhyb3dzKTtcbiAgY29uc3Qgc29ydGVkID0gbWF4U2l6ZSA/IGFsbFNvcnRlZC5zbGljZSgwLCBtYXhTaXplKSA6IGFsbFNvcnRlZDtcbiAgY29uc3QgbWlzc2luZyA9IG1heFNpemUgPyBhbGxTb3J0ZWQuc2xpY2UobWF4U2l6ZSwgYWxsU29ydGVkLmxlbmd0aCkgOiBbXTtcbiAgY29uc3QgYWRkZWQgPSBSLmZpbHRlcihyb3cgPT4gcm93W1BPU19JRFhdID09PSBudWxsLCBzb3J0ZWQpO1xuXG4gIHRvUmVwbGFjZSA9IHRvUmVwbGFjZVxuICAgIC5jb25jYXQoUi5maWx0ZXIocm93ID0+IHJvd1tQT1NfSURYXSAhPT0gbnVsbCwgbWlzc2luZykpXG4gICAgLnJldmVyc2UoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNvcnRlZC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGlkID0gc29ydGVkW2ldW1BPU19JRF07XG4gICAgY29uc3QgaWR4ID0gc29ydGVkW2ldW1BPU19JRFhdO1xuICAgIGNvbnN0IHZhbCA9IHNvcnRlZFtpXVtQT1NfVkFMXTtcblxuICAgIGlmIChpZHggIT09IG51bGwgJiYgdXBkYXRlZFtpZF0pIGNoYW5nZXNbYCR7aWR4fWBdID0gW2lkLCB2YWxdLmpvaW4oXCIsXCIpO1xuICB9XG5cbiAgY29uc3QgaW5zZXJ0ZWQgPSBbXTtcblxuICB3aGlsZSAoYWRkZWQubGVuZ3RoKSB7XG4gICAgY29uc3Qgcm93ID0gYWRkZWQucG9wKCk7XG4gICAgY29uc3QgcmVwbGFjZWQgPSB0b1JlcGxhY2UucG9wKCk7XG4gICAgbGV0IFtpZHhdID0gcmVwbGFjZWQgfHwgW251bGxdO1xuXG4gICAgaWYgKGlkeCA9PT0gbnVsbCkge1xuICAgICAgaWR4ID0gcGFyc2VJbnQobWF4SWR4LCAxMCkgKyBpbnNlcnRlZC5sZW5ndGggKyAxO1xuICAgICAgaW5zZXJ0ZWQucHVzaChpZHgpO1xuICAgIH1cblxuICAgIGNoYW5nZXNbYCR7aWR4fWBdID0gW3Jvd1tQT1NfSURdLCByb3dbUE9TX1ZBTF1dLmpvaW4oXCIsXCIpO1xuICB9XG5cbiAgd2hpbGUgKHRvUmVwbGFjZS5sZW5ndGgpIHtcbiAgICBjb25zdCByb3cgPSB0b1JlcGxhY2UucG9wKCk7XG5cbiAgICBpZiAocm93ICYmICFyb3dbUE9TX0lEXSkge1xuICAgICAgY29uc3QgaWR4ID0gYCR7cm93W1BPU19JRFhdfWA7XG5cbiAgICAgIGlmIChub2RlW2lkeF0gIT09IG51bGwpIHtcbiAgICAgICAgY2hhbmdlc1tpZHhdID0gbnVsbDtcbiAgICAgICAgY29uc29sZS5sb2coXCJudWxsaW5nXCIsIGlkeCwgbm9kZVtpZHhdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gUi5rZXlzKGNoYW5nZXMpLmxlbmd0aCA/IGNoYW5nZXMgOiBudWxsO1xufTtcblxuY29uc3QgY2F0ZWdvcml6ZURpZmYgPSAoZGlmZiwgb3JpZ2luYWwpID0+IHtcbiAgY29uc3QgYWxsS2V5cyA9IGl0ZW1LZXlzKFIubWVyZ2VMZWZ0KGRpZmYsIG9yaWdpbmFsKSk7XG4gIGNvbnN0IGFkZGVkID0gW107XG4gIGNvbnN0IHJlbW92ZWQgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBhbGxLZXlzW2ldO1xuICAgIGNvbnN0IFtfZGlmZklkeCwgZGlmZklkXSA9IGdldFJvdyhkaWZmLCBrZXkpIHx8IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgY29uc3QgW19vcmlnSWR4LCBvcmlnSWRdID0gZ2V0Um93KG9yaWdpbmFsLCBrZXkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpZiAoZGlmZklkICE9PSBvcmlnSWQpIHtcbiAgICAgIGlmIChkaWZmSWQpIGFkZGVkLnB1c2goZGlmZklkKTtcbiAgICAgIGlmIChvcmlnSWQpIHJlbW92ZWQucHVzaChvcmlnSWQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbYWRkZWQsIHJlbW92ZWRdO1xufTtcblxuY29uc3QgdW5pb25Sb3dzID0gUi5jb21wb3NlKFxuICBSLnVuaXFCeShSLnByb3AoUE9TX0lEKSksXG4gIHNvcnRSb3dzLFxuICBSLnJlZHVjZShSLmNvbmNhdCwgW10pLFxuICBSLm1hcChyb3dzKVxuKTtcblxuY29uc3Qgcm93c0Zyb21Tb3VscyA9IHF1ZXJ5KChzY29wZSwgc291bHMpID0+XG4gIFByb21pc2UuYWxsKFIubWFwKHNjb3BlLmdldCwgc291bHMpKS50aGVuKHVuaW9uUm93cylcbik7XG5cbmNvbnN0IHJlYWQgPSBxdWVyeSgoc2NvcGUsIHBhdGgsIG9wdHMpID0+IHtcbiAgY29uc3QgeyBpbmRleGVyID0gQ29uZmlnLmluZGV4ZXIgfSA9IG9wdHMgfHwge307XG5cbiAgY29uc29sZS5sb2coXCJMaXN0aW5nTm9kZS5yZWFkXCIsIHBhdGgpO1xuXG4gIHJldHVybiByb3dzRnJvbVNvdWxzKHNjb3BlLCBbc291bEZyb21QYXRoKGluZGV4ZXIsIHBhdGgpXSkudGhlbihyb3dzVG9JZHMpO1xufSwgXCJsaXN0aW5nUm93c1wiKTtcblxuY29uc3QgZ2V0ID0gcXVlcnkoXG4gIChzY29wZSwgc291bCkgPT4gKHNvdWwgPyBzY29wZS5nZXQoc291bCkgOiByZXNvbHZlKG51bGwpKSxcbiAgXCJsaXN0aW5nXCJcbik7XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nTm9kZSA9IHtcbiAgUE9TX0lEWCxcbiAgUE9TX0lELFxuICBQT1NfVkFMLFxuICBzb3VyY2UsXG4gIGdldCxcbiAgZ2V0Um93LFxuICBpdGVtS2V5cyxcbiAgcm93cyxcbiAgaWRzLFxuICByb3dzVG9JZHMsXG4gIHJvd3NUb0l0ZW1zLFxuICBzb3J0Um93cyxcbiAgc29ydGVkSWRzLFxuICBzb3VsRnJvbVBhdGgsXG4gIHJvd3NGcm9tU291bHMsXG4gIHJlYWQsXG4gIGRpZmYsXG4gIGNhdGVnb3JpemVEaWZmLFxuICB1bmlvblJvd3Ncbn07XG4iLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgcXVlcnkgfSBmcm9tIFwiZ3VuLXNjb3BlXCI7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCIuLi9RdWVyeVwiO1xuaW1wb3J0IHsgVGhpbmdEYXRhTm9kZSB9IGZyb20gXCIuLi9UaGluZ1wiO1xuaW1wb3J0IHsgTGlzdGluZ0RlZmluaXRpb24gfSBmcm9tIFwiLi9MaXN0aW5nRGVmaW5pdGlvblwiO1xuaW1wb3J0IHsgTGlzdGluZ0RhdGFTb3VyY2UgfSBmcm9tIFwiLi9MaXN0aW5nRGF0YVNvdXJjZVwiO1xuaW1wb3J0IHsgTGlzdGluZ0ZpbHRlciB9IGZyb20gXCIuL0xpc3RpbmdGaWx0ZXJcIjtcblxuY29uc3QgZnJvbVNvdXJjZSA9IFIuY29tcG9zZShcbiAgUi5hcHBseShSLm1lcmdlTGVmdCksXG4gIFIuYXAoW0xpc3RpbmdGaWx0ZXIuZnJvbURlZmluaXRpb24sIFIuaWRlbnRpdHldKSxcbiAgUi5vZixcbiAgUi5hcHBseShSLmFzc29jKFwiZGF0YVNvdXJjZVwiKSksXG4gIFIuYXAoW0xpc3RpbmdEYXRhU291cmNlLmZyb21EZWZpbml0aW9uLCBSLmlkZW50aXR5XSksXG4gIFIub2YsXG4gIExpc3RpbmdEZWZpbml0aW9uLmZyb21Tb3VyY2Vcbik7XG5cbmNvbnN0IGdldFNvdXJjZSA9IHF1ZXJ5KChzY29wZSwgYXV0aG9ySWQsIG5hbWUsIGV4dHJhID0gXCJcIikgPT5cbiAgUXVlcnkud2lraVBhZ2Uoc2NvcGUsIGF1dGhvcklkLCBuYW1lKVxuICAgIC50aGVuKFIuY29tcG9zZShcbiAgICAgIGJvZHkgPT4gYCR7Ym9keX1cbiMgYWRkZWQgYnkgaW5kZXhlclxuJHtleHRyYSB8fCBcIlwifVxuc291cmNlZCBmcm9tIHBhZ2UgJHthdXRob3JJZH0gJHtuYW1lfVxuYCxcbiAgICAgIFRoaW5nRGF0YU5vZGUuYm9keVxuICAgICkpXG4pO1xuXG5leHBvcnQgY29uc3QgTGlzdGluZ1NwZWMgPSB7IGZyb21Tb3VyY2UsIGdldFNvdXJjZSB9O1xuIiwiY29uc3QgQ09NTUFORF9SRSA9IC9eIHs0fX4vO1xuY29uc3QgUFJFRklYID0gXCJuYWJcIjtcbmNvbnN0IFNPVUxfREVMSU1FVEVSID0gXCJ8fn58XCI7XG5cbmNvbnN0IExJU1RJTkdfU0laRSA9IDEwMDA7XG5cbmNvbnN0IE1BWF9IQVNIX1NJWkUgPSA2NDtcbmNvbnN0IE1BWF9QT1dfTk9OQ0VfU0laRSA9IDY0O1xuY29uc3QgTUFYX1RPUElDX1NJWkUgPSA0MjtcbmNvbnN0IE1BWF9BVVRIT1JfQUxJQVNfU0laRSA9IDI1NjtcbmNvbnN0IE1BWF9BVVRIT1JfSURfU0laRSA9IDEyODsgLy8gPz8/XG5jb25zdCBNQVhfVVJMX1NJWkUgPSAyMDQ4O1xuY29uc3QgTUFYX0RPTUFJTl9TSVpFID0gMjU2O1xuY29uc3QgTUFYX1RISU5HX0tJTkRfU0laRSA9IDE2O1xuY29uc3QgTUFYX1RISU5HX1RJVExFX1NJWkUgPSAzMDA7XG5jb25zdCBNQVhfVEhJTkdfQk9EWV9TSVpFID0gNTAwMDA7XG5cbmNvbnN0IE1BWF9MSVNUSU5HX0lEU19TSVpFID0gNTAwMDA7XG5jb25zdCBNQVhfTElTVElOR19TT1VSQ0VfU0laRSA9IDUwMDAwO1xuY29uc3QgTUFYX0xJU1RJTkdfVEFCU19TSVpFID0gNTAwMDtcblxuY29uc3QgTUFYX0xJU1RJTkdfU09VTF9QUkVGSVhfU0laRSA9IE1BWF9UT1BJQ19TSVpFO1xuY29uc3QgTUFYX0xJU1RJTkdfU09VTF9JREVOVElGSUVSX1NJWkUgPSBNQVhfQVVUSE9SX0lEX1NJWkU7XG5jb25zdCBNQVhfTElTVElOR19TT1VMX1NPUlRfU0laRSA9IDE2O1xuY29uc3QgTUFYX0xJU1RJTkdfU09VTF9UWVBFX1NJWkUgPSBNQVhfVE9QSUNfU0laRTtcbmNvbnN0IE1BWF9MSVNUSU5HX1NPVUxfS0lORF9TSVpFID0gMTY7XG5cbmNvbnN0IERFRkFVTFRfSU5ERVhFUiA9IFwiQ0V5S3JEZDF4eVBYcFdTVjAwTWd2blpZMlZKTEhYZ3pDdmhNZUR3S1RZQS55alNxMER5WHp6aEJfWlhyX0R6ZkpnaWozdFhVMC0zdDBRNWJKQXRacGo4XCI7XG5jb25zdCBERVZfSU5ERVhFUiA9IFwibDJuU2VkbFNsdm9tVHFDWWhtUG5BTm9RTFhlNHNqNXJSMk9yQzdZcVBwVS56aW1hV3dkbGZ5VHJWSVRnd1dvRFZkYkpRS1JlT1RxVjV6TmpUUmMteVFBXCI7XG5cbmV4cG9ydCBjb25zdCBDb25zdGFudHMgPSB7XG4gIENPTU1BTkRfUkUsXG4gIFBSRUZJWCxcbiAgU09VTF9ERUxJTUVURVIsXG4gIExJU1RJTkdfU0laRSxcbiAgTUFYX0hBU0hfU0laRSxcbiAgTUFYX1BPV19OT05DRV9TSVpFLFxuICBNQVhfVE9QSUNfU0laRSxcbiAgTUFYX0FVVEhPUl9BTElBU19TSVpFLFxuICBNQVhfQVVUSE9SX0lEX1NJWkUsXG4gIE1BWF9VUkxfU0laRSxcbiAgTUFYX0RPTUFJTl9TSVpFLFxuICBNQVhfVEhJTkdfS0lORF9TSVpFLFxuICBNQVhfVEhJTkdfVElUTEVfU0laRSxcbiAgTUFYX1RISU5HX0JPRFlfU0laRSxcbiAgTUFYX0xJU1RJTkdfSURTX1NJWkUsXG4gIE1BWF9MSVNUSU5HX1NPVVJDRV9TSVpFLFxuICBNQVhfTElTVElOR19UQUJTX1NJWkUsXG4gIE1BWF9MSVNUSU5HX1NPVUxfUFJFRklYX1NJWkUsXG4gIE1BWF9MSVNUSU5HX1NPVUxfSURFTlRJRklFUl9TSVpFLFxuICBNQVhfTElTVElOR19TT1VMX1NPUlRfU0laRSxcbiAgTUFYX0xJU1RJTkdfU09VTF9UWVBFX1NJWkUsXG4gIE1BWF9MSVNUSU5HX1NPVUxfS0lORF9TSVpFLFxuICBERUZBVUxUX0lOREVYRVIsXG4gIERFVl9JTkRFWEVSXG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwicm91dGUtcGFyc2VyXCI7XG5cbmNvbnN0IHNwbGl0RG9tYWlucyA9IFIuY29tcG9zZShcbiAgUi5zb3J0QnkoUi5pZGVudGl0eSksXG4gIFIuZmlsdGVyKFIuaWRlbnRpdHkpLFxuICBSLm1hcChSLnRyaW0pLFxuICBSLnNwbGl0KFwiK1wiKSxcbiAgUi50b0xvd2VyLFxuICBSLnRyaW0sXG4gIFIuZGVmYXVsdFRvKFwiXCIpXG4pO1xuXG5jb25zdCBzcGxpdFRvcGljcyA9IFIuY29tcG9zZShcbiAgUi5pZkVsc2UoUi5wcm9wKFwibGVuZ3RoXCIpLCBSLmlkZW50aXR5LCBSLmFsd2F5cyhbXCJhbGxcIl0pKSxcbiAgc3BsaXREb21haW5zXG4pO1xuXG5jb25zdCB3aXRoUm91dGUgPSBvYmogPT4gUi5hc3NvYyhcInJvdXRlXCIsIG5ldyBSb3V0ZShvYmoucGF0aCksIG9iaik7XG5cbmV4cG9ydCBjb25zdCBQYXRoID0geyBzcGxpdERvbWFpbnMsIHNwbGl0VG9waWNzLCB3aXRoUm91dGUgfTtcbiIsIi8qIGdsb2JhbHMgR3VuICovXG5pbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuXG5jb25zdCBzb3VsID0gUi5wYXRoT3IoXCJcIiwgW1wiX1wiLCBcIiNcIl0pO1xuY29uc3Qgc3RhdGUgPSBSLnBhdGhPcih7fSwgW1wiX1wiLCBcIj5cIl0pO1xuXG5jb25zdCBsYXRlc3QgPSBSLmNvbXBvc2UoXG4gIFIubGFzdCxcbiAgUi5zb3J0QnkoUi5pZGVudGl0eSksXG4gIFIudmFsdWVzLFxuICBzdGF0ZVxuKTtcblxuY29uc3QgZWRnZXMgPSBSLmNvbXBvc2UoXG4gIFIubWFwKFIucHJvcChcIiNcIikpLFxuICBSLnZhbHVlc1xuKTtcblxuZnVuY3Rpb24gZGVjb2RlU0VBKHJhd0RhdGEpIHtcbiAgY29uc3QgZGF0YSA9IHJhd0RhdGEgPyB7IC4uLnJhd0RhdGEgfSA6IHJhd0RhdGE7XG4gIGNvbnN0IHNvdWwgPSBSLnBhdGgoW1wiX1wiLCBcIiNcIl0sIGRhdGEpO1xuXG4gIGlmICghc291bCB8fCAhR3VuLlNFQSB8fCBzb3VsLmluZGV4T2YoXCJ+XCIpID09PSAtMSkgcmV0dXJuIHJhd0RhdGE7XG4gIFIud2l0aG91dChbXCJfXCJdLCBSLmtleXMoZGF0YSkpLmZvckVhY2goa2V5ID0+IHtcbiAgICBHdW4uU0VBLnZlcmlmeShcbiAgICAgIEd1bi5TRUEub3B0LnBhY2socmF3RGF0YVtrZXldLCBrZXksIHJhd0RhdGEsIHNvdWwpLFxuICAgICAgZmFsc2UsXG4gICAgICByZXMgPT4gKGRhdGFba2V5XSA9IEd1bi5TRUEub3B0LnVucGFjayhyZXMsIGtleSwgcmF3RGF0YSkpXG4gICAgKTtcbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufTtcblxuZXhwb3J0IGNvbnN0IEd1bk5vZGUgPSB7IHNvdWwsIHN0YXRlLCBsYXRlc3QsIGVkZ2VzLCBkZWNvZGVTRUEgfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCIuLi9RdWVyeVwiO1xuaW1wb3J0IHsgVGhpbmdEYXRhTm9kZSB9IGZyb20gXCIuLi9UaGluZ1wiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi9MaXN0aW5nTm9kZVwiO1xuaW1wb3J0IHsgTGlzdGluZ0RhdGFTb3VyY2UgfSBmcm9tIFwiLi9MaXN0aW5nRGF0YVNvdXJjZVwiO1xuXG5jb25zdCBpbnRQYXRoID0gcCA9PlxuICBSLmNvbXBvc2UoXG4gICAgcGFyc2VJbnQsXG4gICAgUi5wYXRoKHApXG4gICk7XG5cbmNvbnN0IGZyb21EZWZpbml0aW9uID0gZGVmaW5pdGlvbiA9PiB7XG4gIGNvbnN0IHsgZmlsdGVycywgdm90ZUZpbHRlcnMsIGlzUHJlc2VudCB9ID0gZGVmaW5pdGlvbjtcbiAgY29uc3QgZmlsdGVyRnVuY3Rpb25zID0gW107XG4gIGNvbnN0IHZvdGVGaWx0ZXJGdW5jdGlvbnMgPSBbXTtcblxuICBjb25zdCBhZGRGaWx0ZXIgPSAoLi4uZm5zKSA9PiBmaWx0ZXJGdW5jdGlvbnMucHVzaChSLmNvbXBvc2UoLi4uZm5zKSk7XG4gIGNvbnN0IGFkZFZvdGVGaWx0ZXIgPSAoLi4uZm5zKSA9PiB2b3RlRmlsdGVyRnVuY3Rpb25zLnB1c2goUi5jb21wb3NlKC4uLmZucykpO1xuXG4gIGlmIChmaWx0ZXJzLmFsbG93LmFsaWFzZXMubGVuZ3RoKVxuICAgIGFkZEZpbHRlcih0ID0+ICEhaXNQcmVzZW50KFtcImFsaWFzXCIsIHRdKSwgUi5wYXRoKFtcImRhdGFcIiwgXCJhdXRob3JcIl0pKTtcbiAgaWYgKGZpbHRlcnMuYWxsb3cuYXV0aG9ycy5sZW5ndGgpXG4gICAgYWRkRmlsdGVyKHQgPT4gISFpc1ByZXNlbnQoW1wiYXV0aG9yXCIsIHRdKSwgUi5wYXRoKFtcImRhdGFcIiwgXCJhdXRob3JJZFwiXSkpO1xuICBpZiAoZmlsdGVycy5hbGxvdy5kb21haW5zLmxlbmd0aClcbiAgICBhZGRGaWx0ZXIodCA9PiAhIWlzUHJlc2VudChbXCJkb21haW5cIiwgdF0pLCBUaGluZ0RhdGFOb2RlLmRvbWFpbik7XG5cbiAgaWYgKFxuICAgIGZpbHRlcnMuYWxsb3cudG9waWNzLmxlbmd0aCAmJlxuICAgICFSLmZpbmQoXG4gICAgICBSLmNvbXBvc2UoXG4gICAgICAgIFIuaWRlbnRpY2FsKFwiYWxsXCIpLFxuICAgICAgICBSLmxhc3QsXG4gICAgICAgIFIuc3BsaXQoXCI6XCIpXG4gICAgICApLFxuICAgICAgZmlsdGVycy5hbGxvdy50b3BpY3NcbiAgICApXG4gIClcbiAgICBhZGRGaWx0ZXIodCA9PiAhIWlzUHJlc2VudChbXCJ0b3BpY1wiLCB0XSksIFIucGF0aChbXCJkYXRhXCIsIFwidG9waWNcIl0pKTtcblxuICBpZiAoZmlsdGVycy5hbGxvdy5raW5kcy5sZW5ndGgpXG4gICAgYWRkRmlsdGVyKGtpbmQgPT4gISFpc1ByZXNlbnQoW1wia2luZFwiLCBraW5kXSksIFIucGF0aChbXCJkYXRhXCIsIFwia2luZFwiXSkpO1xuICBpZiAoZmlsdGVycy5hbGxvdy50eXBlID09PSBcImNvbW1hbmRzXCIpXG4gICAgYWRkRmlsdGVyKFxuICAgICAgUi5jb21wb3NlKFxuICAgICAgICBSLnRlc3QoQ29uc3RhbnRzLkNPTU1BTkRfUkUpLFxuICAgICAgICBSLnBhdGgoW1wiZGF0YVwiLCBcImJvZHlcIl0pXG4gICAgICApXG4gICAgKTtcblxuICBpZiAoZmlsdGVycy5kZW55LmFsaWFzZXMubGVuZ3RoKVxuICAgIGFkZEZpbHRlcihcbiAgICAgIGFsaWFzID0+ICFpc1ByZXNlbnQoW1wiYmFuXCIsIFwiYWxpYXNcIiwgYWxpYXNdKSxcbiAgICAgIFIucGF0aChbXCJkYXRhXCIsIFwiYXV0aG9yXCJdKVxuICAgICk7XG4gIGlmIChmaWx0ZXJzLmRlbnkuYXV0aG9ycy5sZW5ndGgpXG4gICAgYWRkRmlsdGVyKFxuICAgICAgYXV0aG9ySWQgPT4gIWlzUHJlc2VudChbXCJiYW5cIiwgXCJhdXRob3JcIiwgYXV0aG9ySWRdKSxcbiAgICAgIFIucGF0aChbXCJkYXRhXCIsIFwiYXV0aG9ySWRcIl0pXG4gICAgKTtcbiAgaWYgKGZpbHRlcnMuZGVueS5kb21haW5zLmxlbmd0aClcbiAgICBhZGRGaWx0ZXIoXG4gICAgICBkb21haW4gPT4gIWRvbWFpbiB8fCAhaXNQcmVzZW50KFtcImJhblwiLCBcImRvbWFpblwiLCBkb21haW5dKSxcbiAgICAgIFRoaW5nRGF0YU5vZGUuZG9tYWluXG4gICAgKTtcbiAgaWYgKGZpbHRlcnMuZGVueS50b3BpY3MubGVuZ3RoKVxuICAgIGFkZEZpbHRlcihcbiAgICAgIHRvcGljID0+ICFpc1ByZXNlbnQoW1wiYmFuXCIsIFwidG9waWNcIiwgdG9waWNdKSxcbiAgICAgIFIucGF0aChbXCJkYXRhXCIsIFwidG9waWNcIl0pXG4gICAgKTtcbiAgaWYgKGZpbHRlcnMuZGVueS5hbm9uKSBhZGRGaWx0ZXIoUi5wYXRoKFtcImRhdGFcIiwgXCJhdXRob3JJZFwiXSkpO1xuICBpZiAoZmlsdGVycy5kZW55LnNpZ25lZClcbiAgICBhZGRGaWx0ZXIoXG4gICAgICBSLmNvbXBvc2UoXG4gICAgICAgIGF1dGhvcklkID0+ICFhdXRob3JJZCxcbiAgICAgICAgUi5wYXRoKFtcImRhdGFcIiwgXCJhdXRob3JJZFwiXSlcbiAgICAgIClcbiAgICApO1xuXG4gIGlmICh2b3RlRmlsdGVycy51cHNNaW4gIT09IG51bGwpXG4gICAgYWRkVm90ZUZpbHRlcihSLmx0ZSh2b3RlRmlsdGVycy51cHNNaW4pLCBpbnRQYXRoKFtcInZvdGVzXCIsIFwidXBcIl0pKTtcbiAgaWYgKHZvdGVGaWx0ZXJzLnVwc01heCAhPT0gbnVsbClcbiAgICBhZGRWb3RlRmlsdGVyKFIuZ3RlKHZvdGVGaWx0ZXJzLnVwc01heCksIGludFBhdGgoW1widm90ZXNcIiwgXCJ1cFwiXSkpO1xuICBpZiAodm90ZUZpbHRlcnMuZG93bnNNaW4gIT09IG51bGwpXG4gICAgYWRkVm90ZUZpbHRlcihSLmx0ZSh2b3RlRmlsdGVycy5kb3duc01pbiksIGludFBhdGgoW1widm90ZXNcIiwgXCJkb3duXCJdKSk7XG4gIGlmICh2b3RlRmlsdGVycy5kb3duc01heCAhPT0gbnVsbClcbiAgICBhZGRWb3RlRmlsdGVyKFIuZ3RlKHZvdGVGaWx0ZXJzLmRvd25zTWF4KSwgaW50UGF0aChbXCJ2b3Rlc1wiLCBcImRvd25cIl0pKTtcbiAgaWYgKHZvdGVGaWx0ZXJzLnNjb3JlTWluICE9PSBudWxsKVxuICAgIGFkZFZvdGVGaWx0ZXIoUi5sdGUodm90ZUZpbHRlcnMuc2NvcmVNaW4pLCBpbnRQYXRoKFtcInZvdGVzXCIsIFwic2NvcmVcIl0pKTtcbiAgaWYgKHZvdGVGaWx0ZXJzLnNjb3JlTWF4ICE9PSBudWxsKVxuICAgIGFkZFZvdGVGaWx0ZXIoUi5ndGUodm90ZUZpbHRlcnMuc2NvcmVNYXgpLCBpbnRQYXRoKFtcInZvdGVzXCIsIFwic2NvcmVcIl0pKTtcblxuICBpZiAoZmlsdGVycy5kZW55LnRhZ3MubGVuZ3RoKVxuICAgIGFkZFZvdGVGaWx0ZXIodGhpbmcgPT4ge1xuICAgICAgY29uc3QgY21kcyA9IFIucGF0aChbXCJ2b3Rlc1wiLCBcImNvbW1hbmRzXCJdLCB0aGluZykgfHwge307XG5cbiAgICAgIHJldHVybiAhZmlsdGVycy5kZW55LnRhZ3MuZmluZChcbiAgICAgICAgKFt0YWdOYW1lLCBhdXRob3JJZF0pID0+ICEhUi5wYXRoKFthdXRob3JJZCwgXCJ0YWdcIiwgdGFnTmFtZV0sIGNtZHMpXG4gICAgICApO1xuICAgIH0pO1xuXG4gIGNvbnN0IGNvbnRlbnRGaWx0ZXIgPSB0aGluZyA9PiAhZmlsdGVyRnVuY3Rpb25zLmZpbmQoZm4gPT4gIWZuKHRoaW5nKSk7XG4gIGNvbnN0IHZvdGVGaWx0ZXIgPSB0aGluZyA9PiAhdm90ZUZpbHRlckZ1bmN0aW9ucy5maW5kKGZuID0+ICFmbih0aGluZykpO1xuICBjb25zdCB0aGluZ0ZpbHRlciA9IHRoaW5nID0+IChjb250ZW50RmlsdGVyKHRoaW5nKSAmJiB2b3RlRmlsdGVyKHRoaW5nKSk7XG5cbiAgcmV0dXJuIHsgdGhpbmdGaWx0ZXIsIGNvbnRlbnRGaWx0ZXIsIHZvdGVGaWx0ZXIgfTtcbn07XG5cbmNvbnN0IGdldEZpbHRlcmVkSWRzID0gYXN5bmMgKFxuICBzY29wZSxcbiAgc29ydGVkUm93cyxcbiAgeyBsaW1pdCA9IDI1LCBjb3VudCA9IDAsIGFmdGVyID0gbnVsbCwgZmlsdGVyRm4gfSA9IHt9XG4pID0+IHtcbiAgY29uc3Qgcm93cyA9IHNvcnRlZFJvd3Muc2xpY2UoKTtcbiAgY29uc3QgZmlsdGVyZWQgPSBbXTtcbiAgY29uc3QgZmV0Y2hCYXRjaCA9IChzaXplID0gMzApID0+XG4gICAgUHJvbWlzZS5hbGwoXG4gICAgICBSLm1hcChhc3luYyByb3cgPT4ge1xuICAgICAgICBsZXQgaW5MaXN0aW5nID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZmlsdGVyRm4pIGluTGlzdGluZyA9IGF3YWl0IGZpbHRlckZuKHJvd1tMaXN0aW5nTm9kZS5QT1NfSURdKTtcbiAgICAgICAgaWYgKGluTGlzdGluZykgZmlsdGVyZWQucHVzaChyb3cpO1xuICAgICAgfSwgcm93cy5zcGxpY2UoY291bnQsIHNpemUpKVxuICAgICk7XG5cbiAgd2hpbGUgKHJvd3MubGVuZ3RoKSB7XG4gICAgYXdhaXQgZmV0Y2hCYXRjaCgpO1xuICAgIGlmIChsaW1pdCAmJiBmaWx0ZXJlZC5sZW5ndGggPj0gbGltaXQpIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIFIuY29tcG9zZShcbiAgICBSLm1hcChSLnByb3AoTGlzdGluZ05vZGUuUE9TX0lEKSksXG4gICAgbGltaXQgPyBSLnNsaWNlKDAsIGxpbWl0KSA6IFIuaWRlbnRpdHksXG4gICAgUi5zb3J0QnkoUi5wcm9wKExpc3RpbmdOb2RlLlBPU19WQUwpKVxuICApKGZpbHRlcmVkKTtcbn07XG5cbmNvbnN0IHRoaW5nRmlsdGVyID0gUi5jdXJyeSgoc2NvcGUsIHNwZWMsIHRoaW5nSWQpID0+XG4gIFF1ZXJ5LnRoaW5nTWV0YShzY29wZSwge1xuICAgIHRhYnVsYXRvcjogc3BlYy50YWJ1bGF0b3IsXG4gICAgdGhpbmdTb3VsOiBTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSksXG4gICAgc2NvcmVzOiBMaXN0aW5nRGF0YVNvdXJjZS5uZWVkc1Njb3JlcyhzcGVjKSxcbiAgICBkYXRhOiBMaXN0aW5nRGF0YVNvdXJjZS5uZWVkc0RhdGEoc3BlYylcbiAgfSkudGhlbihzcGVjLnRoaW5nRmlsdGVyKVxuKTtcblxuZXhwb3J0IGNvbnN0IExpc3RpbmdGaWx0ZXIgPSB7IGZyb21EZWZpbml0aW9uLCBnZXRGaWx0ZXJlZElkcywgdGhpbmdGaWx0ZXIgfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBQcm9taXNlLCBxdWVyeSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IFRoaW5nU2V0IH0gZnJvbSBcIi4uL1RoaW5nXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCIuLi9RdWVyeVwiO1xuaW1wb3J0IHsgTGlzdGluZ1NvcnQgfSBmcm9tIFwiLi9MaXN0aW5nU29ydFwiO1xuXG5jb25zdCBuZWVkc1Njb3JlcyA9IGRlZmluaXRpb24gPT5cbiAgISFSLmZpbmQoZGVmaW5pdGlvbi5pc1ByZXNlbnQsIFtcbiAgICBcInNvcnQgaG90XCIsXG4gICAgXCJzb3J0IHRvcFwiLFxuICAgIFwic29ydCBiZXN0XCIsXG4gICAgXCJzb3J0IGNvbnRyb3ZlcnNpYWxcIixcbiAgICBcInVwc1wiLFxuICAgIFwiZG93bnNcIixcbiAgICBcInNjb3JlXCIsXG4gICAgXCJjYW4gcmVtb3ZlXCJcbiAgXSk7XG5cbmNvbnN0IG5lZWRzRGF0YSA9IGRlZmluaXRpb24gPT5cbiAgISFSLmZpbmQoZGVmaW5pdGlvbi5pc1ByZXNlbnQsIFtcbiAgICBcInRvcGljXCIsXG4gICAgXCJkb21haW5cIixcbiAgICBcImF1dGhvclwiLFxuICAgIFwidW5pcXVlIGJ5IGNvbnRlbnRcIixcbiAgICBcImtpbmRcIixcbiAgICBcInR5cGVcIixcbiAgICBcInJlcXVpcmUgc2lnbmVkXCIsXG4gICAgXCJyZXF1aXJlIGFub25cIixcbiAgICBcImFsaWFzXCIsXG4gICAgXCJiYW4gZG9tYWluXCIsXG4gICAgXCJiYW4gdG9waWNcIixcbiAgICBcImJhbiBhdXRob3JcIixcbiAgICBcImJhbiBhbGlhc1wiXG4gIF0pO1xuXG5jb25zdCBpdGVtc0Zyb21UaGluZ1NvdWxzID0gcXVlcnkoKHNjb3BlLCBzb3VscywgZGVmaW5pdGlvbikgPT5cbiAgUHJvbWlzZS5hbGwoXG4gICAgUi5tYXAoc291bCA9PiBMaXN0aW5nU29ydC5pdGVtRnJvbVNvdWwoc2NvcGUsIHNvdWwsIGRlZmluaXRpb24pLCBzb3VscylcbiAgKS50aGVuKExpc3RpbmdTb3J0LnNvcnRJdGVtcylcbik7XG5cbmNvbnN0IGl0ZW1zRnJvbVRoaW5nU2V0cyA9IHF1ZXJ5KChzY29wZSwgc291bHMsIGRlZmluaXRpb24pID0+XG4gIFByb21pc2UuYWxsKFIubWFwKHNjb3BlLmdldCwgc291bHMpKVxuICAgIC50aGVuKFIucmVkdWNlKFIubWVyZ2VSaWdodCwge30pKVxuICAgIC50aGVuKFRoaW5nU2V0LnNvdWxzKVxuICAgIC50aGVuKHNvdWxzID0+IGl0ZW1zRnJvbVRoaW5nU291bHMoc2NvcGUsIHNvdWxzLCBkZWZpbml0aW9uKSlcbik7XG5cbmNvbnN0IGxpc3RpbmdTb3VyY2UgPSBkZWZpbml0aW9uID0+IHtcbiAgY29uc3QgbGlzdGluZ3MgPSBSLnBhdGhPcihbXSwgW1wiZmlsdGVyc1wiLCBcImFsbG93XCIsIFwibGlzdGluZ3NcIl0sIGRlZmluaXRpb24pO1xuICBjb25zdCB7IHNvcnQgfSA9IGRlZmluaXRpb247XG4gIGNvbnN0IGxpc3RpbmdQYXRocyA9IFIubWFwKGwgPT4gYCR7bH0vJHtzb3J0fWAsIGxpc3RpbmdzKTtcblxuICByZXR1cm4geyBsaXN0aW5nUGF0aHMgfTtcbn07XG5cbmNvbnN0IHRvcGljU291cmNlID0gZGVmaW5pdGlvbiA9PiB7XG4gIGNvbnN0IHsgc29ydCB9ID0gZGVmaW5pdGlvbjtcbiAgY29uc3QgdG9waWNzID0gUi5wYXRoKFtcImZpbHRlcnNcIiwgXCJhbGxvd1wiLCBcInRvcGljc1wiXSwgZGVmaW5pdGlvbikgfHwgW107XG4gIGNvbnN0IGxpc3RpbmdQYXRocyA9IFIubWFwKHQgPT4gYC90LyR7dH0vJHtzb3J0fWAsIHRvcGljcyk7XG4gIGNvbnN0IHF1ZXJ5ID0gc2NvcGUgPT5cbiAgICBRdWVyeS5tdWx0aVRvcGljKHNjb3BlLCB7IHRvcGljcywgc29ydCB9KS50aGVuKHNvdWxzID0+XG4gICAgICBpdGVtc0Zyb21UaGluZ1NvdWxzKHNjb3BlLCBzb3VscywgZGVmaW5pdGlvbilcbiAgICApO1xuXG4gIHJldHVybiB7IGxpc3RpbmdQYXRocywgcXVlcnkgfTtcbn07XG5cbmNvbnN0IGRvbWFpblNvdXJjZSA9IGRlZmluaXRpb24gPT4ge1xuICBjb25zdCB7IHNvcnQgfSA9IGRlZmluaXRpb247XG4gIGNvbnN0IGRvbWFpbnMgPSBSLnBhdGgoW1wiZmlsdGVyc1wiLCBcImFsbG93XCIsIFwiZG9tYWluc1wiXSwgZGVmaW5pdGlvbikgfHwgW107XG5cbiAgaWYgKCFkb21haW5zLmxlbmd0aCkgcmV0dXJuIHRvcGljU291cmNlKGRlZmluaXRpb24pO1xuICBjb25zdCBsaXN0aW5nUGF0aHMgPSBSLm1hcChkID0+IGAvZG9tYWluLyR7ZH0vJHtzb3J0fWAsIGRvbWFpbnMpO1xuICBjb25zdCBxdWVyeSA9IHNjb3BlID0+XG4gICAgUXVlcnkubXVsdGlEb21haW4oc2NvcGUsIHsgZG9tYWlucywgc29ydCB9KS50aGVuKHNvdWxzID0+XG4gICAgICBpdGVtc0Zyb21UaGluZ1NvdWxzKHNjb3BlLCBzb3VscywgZGVmaW5pdGlvbilcbiAgICApO1xuXG4gIHJldHVybiB7IGxpc3RpbmdQYXRocywgcXVlcnkgfTtcbn07XG5cbmNvbnN0IGF1dGhvclNvdXJjZSA9IGRlZmluaXRpb24gPT4ge1xuICBjb25zdCB7IHNvcnQgfSA9IGRlZmluaXRpb247XG4gIGNvbnN0IGF1dGhvcklkcyA9IFIucGF0aChbXCJmaWx0ZXJzXCIsIFwiYWxsb3dcIiwgXCJhdXRob3JzXCJdLCBkZWZpbml0aW9uKTtcbiAgY29uc3QgdHlwZSA9IFIucGF0aChbXCJmaWx0ZXJzXCIsIFwiYWxsb3dcIiwgXCJ0eXBlXCJdLCBkZWZpbml0aW9uKTtcblxuICBpZiAoIWF1dGhvcklkcy5sZW5ndGgpIHJldHVybiB0b3BpY1NvdXJjZShkZWZpbml0aW9uKTtcbiAgY29uc3QgbGlzdGluZ1BhdGhzID0gUi5tYXAoaWQgPT4gYC91c2VyLyR7aWR9LyR7dHlwZX0vJHtzb3J0fWAsIGF1dGhvcklkcyk7XG4gIGNvbnN0IHF1ZXJ5ID0gc2NvcGUgPT5cbiAgICBRdWVyeS5tdWx0aUF1dGhvcihzY29wZSwgeyB0eXBlLCBhdXRob3JJZHMgfSkudGhlbihzb3VscyA9PlxuICAgICAgaXRlbXNGcm9tVGhpbmdTb3VscyhzY29wZSwgc291bHMsIGRlZmluaXRpb24pXG4gICAgKTtcblxuICByZXR1cm4geyBsaXN0aW5nUGF0aHMsIHF1ZXJ5IH07XG59O1xuXG5jb25zdCBjdXJhdG9yU291cmNlID0gZGVmaW5pdGlvbiA9PiB7XG4gIGNvbnN0IHsgc29ydCB9ID0gZGVmaW5pdGlvbjtcbiAgY29uc3QgY3VyYXRvcnMgPSBSLnByb3AoXCJjdXJhdG9yc1wiLCBkZWZpbml0aW9uKSB8fCBbXTtcblxuICBpZiAoIWN1cmF0b3JzLmxlbmd0aCkgcmV0dXJuIHRvcGljU291cmNlKGRlZmluaXRpb24pO1xuICBjb25zdCBsaXN0aW5nUGF0aHMgPSBSLm1hcChpZCA9PiBgL3VzZXIvJHtpZH0vY29tbWVudGVkLyR7c29ydH1gLCBjdXJhdG9ycyk7XG4gIGNvbnN0IHF1ZXJ5ID0gc2NvcGUgPT5cbiAgICBRdWVyeS5jdXJhdGUoc2NvcGUsIGN1cmF0b3JzLCB0cnVlKVxuICAgICAgLnRoZW4oaWRzID0+IGlkcy5tYXAodGhpbmdJZCA9PiBTY2hlbWEuVGhpbmcucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQgfSkpKVxuICAgICAgLnRoZW4oc291bHMgPT4gaXRlbXNGcm9tVGhpbmdTb3VscyhzY29wZSwgc291bHMsIGRlZmluaXRpb24pKTtcblxuICByZXR1cm4geyBsaXN0aW5nUGF0aHMsIHF1ZXJ5IH07XG59O1xuXG5jb25zdCBvcFNvdXJjZSA9IGRlZmluaXRpb24gPT4ge1xuICBjb25zdCB7IHNvcnQgfSA9IGRlZmluaXRpb247XG4gIGNvbnN0IHN1Ym1pc3Npb25JZHMgPSBSLnBhdGgoW1wiZmlsdGVyc1wiLCBcImFsbG93XCIsIFwib3BzXCJdLCBkZWZpbml0aW9uKTtcblxuICBpZiAoIXN1Ym1pc3Npb25JZHMubGVuZ3RoKSB0b3BpY1NvdXJjZShkZWZpbml0aW9uKTtcbiAgY29uc3QgbGlzdGluZ1BhdGhzID0gUi5tYXAoXG4gICAgaWQgPT4gYC90aGluZ3MvJHtpZH0vY29tbWVudHMvJHtzb3J0fWAsXG4gICAgc3VibWlzc2lvbklkc1xuICApO1xuICBjb25zdCBxdWVyeSA9IHNjb3BlID0+XG4gICAgUXVlcnkubXVsdGlTdWJtaXNzaW9uKHNjb3BlLCB7IHN1Ym1pc3Npb25JZHMgfSkudGhlbihzb3VscyA9PlxuICAgICAgaXRlbXNGcm9tVGhpbmdTb3VscyhzY29wZSwgc291bHMsIGRlZmluaXRpb24pXG4gICAgKTtcblxuICByZXR1cm4geyBsaXN0aW5nUGF0aHMsIHF1ZXJ5IH07XG59O1xuXG5jb25zdCByZXBsaWVzU291cmNlID0gZGVmaW5pdGlvbiA9PiB7XG4gIGNvbnN0IHsgc29ydCB9ID0gZGVmaW5pdGlvbjtcbiAgY29uc3QgaWQgPSBSLnBhdGgoW1wiZmlsdGVyc1wiLCBcImFsbG93XCIsIFwicmVwbGllc1RvXCJdLCBkZWZpbml0aW9uKTtcbiAgY29uc3QgdHlwZSA9IFIucGF0aChbXCJmaWx0ZXJzXCIsIFwiYWxsb3dcIiwgXCJ0eXBlXCJdLCBkZWZpbml0aW9uKTtcblxuICBjb25zdCBsaXN0aW5nUGF0aHMgPSBbYC91c2VyLyR7aWR9L3JlcGxpZXMvJHt0eXBlfS8ke3NvcnR9YF07XG4gIGNvbnN0IHF1ZXJ5ID0gc2NvcGUgPT5cbiAgICBRdWVyeS5yZXBsaWVzVG9BdXRob3Ioc2NvcGUsIHtcbiAgICAgIHR5cGUsXG4gICAgICByZXBsaWVzVG9BdXRob3JJZDogaWQsXG4gICAgICBpbmRleGVyOiBkZWZpbml0aW9uLmluZGV4ZXJcbiAgICB9KS50aGVuKHNvdWxzID0+IGl0ZW1zRnJvbVRoaW5nU291bHMoc2NvcGUsIHNvdWxzLCBkZWZpbml0aW9uKSk7XG5cbiAgcmV0dXJuIHsgbGlzdGluZ1BhdGhzLCBxdWVyeSB9O1xufTtcblxuY29uc3Qgc291cmNlcyA9IHtcbiAgbGlzdGluZzogbGlzdGluZ1NvdXJjZSxcbiAgcmVwbGllczogcmVwbGllc1NvdXJjZSxcbiAgb3A6IG9wU291cmNlLFxuICBjdXJhdG9yOiBjdXJhdG9yU291cmNlLFxuICBhdXRob3I6IGF1dGhvclNvdXJjZSxcbiAgZG9tYWluOiBkb21haW5Tb3VyY2UsXG4gIHRvcGljOiB0b3BpY1NvdXJjZVxufTtcblxuY29uc3Qgc291cmNlTmFtZXMgPSBSLmtleXMoc291cmNlcyk7XG5jb25zdCBzb3VyY2VOYW1lID0gZGVmID0+IFIuZmluZChkZWYuaXNQcmVzZW50LCBzb3VyY2VOYW1lcykgfHwgXCJ0b3BpY1wiO1xuY29uc3QgZnJvbURlZmluaXRpb24gPSBkZWZpbml0aW9uID0+IHtcbiAgY29uc3QgbmFtZSA9IHNvdXJjZU5hbWUoZGVmaW5pdGlvbik7XG5cbiAgcmV0dXJuIFIubWVyZ2VMZWZ0KHsgbmFtZSB9LCBzb3VyY2VzW25hbWVdKGRlZmluaXRpb24pKTtcbn07XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nRGF0YVNvdXJjZSA9IHtcbiAgZnJvbURlZmluaXRpb24sXG4gIHNvdXJjZXMsXG4gIG5lZWRzU2NvcmVzLFxuICBuZWVkc0RhdGEsXG4gIGl0ZW1zRnJvbVRoaW5nU2V0cyxcbiAgaXRlbXNGcm9tVGhpbmdTb3Vsc1xufTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSwgYWxsLCByZXNvbHZlIH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4uL1NjaGVtYVwiO1xuaW1wb3J0IHsgVGhpbmdTZXQgfSBmcm9tIFwiLi4vVGhpbmdcIjtcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIi4uL1F1ZXJ5XCI7XG5cbmNvbnN0IFtQT1NfSUQsIFBPU19WQUxdID0gWzAsIDFdO1xuY29uc3QgdG9JZHMgPSBSLm1hcChSLnByb3AoUE9TX0lEKSk7XG5jb25zdCBzb3J0SXRlbXMgPSBSLnNvcnRXaXRoKFIucHJvcChQT1NfVkFMKSk7XG5cbmNvbnN0IHZvdGVTb3J0ID0gZm4gPT4gcXVlcnkoKHNjb3BlLCB0aGluZ0lkLCBzcGVjKSA9PiB7XG4gIGlmIChzcGVjLmlzSWRTdGlja3kodGhpbmdJZCkpIHJldHVybiByZXNvbHZlKC1JbmZpbml0eSk7XG4gIGlmIChSLmNvbnRhaW5zKHRoaW5nSWQsIHNwZWMuZmlsdGVycy5hbGxvdy5vcHMpKSByZXR1cm4gcmVzb2x2ZSgtSW5maW5pdHkpO1xuXG4gIHJldHVybiBRdWVyeS50aGluZ01ldGEoc2NvcGUsIHtcbiAgICB0YWJ1bGF0b3I6IHNwZWMudGFidWxhdG9yLFxuICAgIHNjb3JlczogdHJ1ZSxcbiAgICB0aGluZ1NvdWw6IFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCB9KVxuICB9KS50aGVuKHJlcyA9PiBmbihyZXMsIHNwZWMpKTtcbn0pO1xuXG5jb25zdCB0aW1lU29ydCA9IGZuID0+IHF1ZXJ5KChzY29wZSwgdGhpbmdJZCwgc3BlYykgPT5cbiAgUXVlcnkudGhpbmdNZXRhKHNjb3BlLCB7XG4gICAgdGFidWxhdG9yOiBzcGVjLnRhYnVsYXRvcixcbiAgICB0aGluZ1NvdWw6IFNjaGVtYS5UaGluZy5yb3V0ZS5yZXZlcnNlKHsgdGhpbmdJZCB9KVxuICB9KS50aGVuKGZuKVxuKTtcblxuY29uc3Qgc29ydHMgPSB7XG4gIG5ldzogdGltZVNvcnQoXG4gICAgUi5jb21wb3NlKFxuICAgICAgUi5tdWx0aXBseSgtMSksXG4gICAgICB2YWwgPT4gdmFsIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgUi5wcm9wKFwidGltZXN0YW1wXCIpXG4gICAgKVxuICApLFxuICBvbGQ6IHRpbWVTb3J0KFIucHJvcChcInRpbWVzdGFtcFwiKSksXG4gIGFjdGl2ZTogdm90ZVNvcnQoXG4gICAgKHsgdGltZXN0YW1wLCBsYXN0QWN0aXZlIH0pID0+IC0xICogKGxhc3RBY3RpdmUgfHwgdGltZXN0YW1wKVxuICApLFxuICB0b3A6IHZvdGVTb3J0KFxuICAgIFIuY29tcG9zZShcbiAgICAgIHggPT4gLTEgKiBwYXJzZUludCh4LCAxMCksXG4gICAgICBSLnBhdGhPcigwLCBbXCJ2b3Rlc1wiLCBcInNjb3JlXCJdKVxuICAgIClcbiAgKSxcbiAgY29tbWVudHM6IHZvdGVTb3J0KFxuICAgIFIuY29tcG9zZShcbiAgICAgIHggPT4gLTEgKiBwYXJzZUZsb2F0KHgsIDEwKSxcbiAgICAgIFIucGF0aE9yKDAsIFtcInZvdGVzXCIsIFwiY29tbWVudFwiXSlcbiAgICApXG4gICksXG4gIGRpc2N1c3NlZDogdm90ZVNvcnQodGhpbmcgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IFIucHJvcChcInRpbWVzdGFtcFwiLCB0aGluZyk7XG4gICAgY29uc3Qgc2NvcmUgPSBwYXJzZUludChSLnBhdGhPcigwLCBbXCJ2b3Rlc1wiLCBcImNvbW1lbnRcIl0sIHRoaW5nKSwgMTApO1xuICAgIGNvbnN0IHNlY29uZHMgPSB0aW1lc3RhbXAgLyAxMDAwIC0gMTEzNDAyODAwMztcbiAgICBjb25zdCBvcmRlciA9IE1hdGgubG9nMTAoTWF0aC5tYXgoTWF0aC5hYnMoc2NvcmUpLCAxKSk7XG5cbiAgICBpZiAoIXNjb3JlKSByZXR1cm4gMTAwMDAwMDAwMCAtIHNlY29uZHM7XG4gICAgcmV0dXJuIC0xICogKG9yZGVyICsgc2Vjb25kcyAvIDQ1MDAwKTtcbiAgfSksXG4gIGhvdDogdm90ZVNvcnQodGhpbmcgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IFIucHJvcChcInRpbWVzdGFtcFwiLCB0aGluZyk7XG4gICAgY29uc3Qgc2NvcmUgPSBwYXJzZUludChSLnBhdGhPcigwLCBbXCJ2b3Rlc1wiLCBcInNjb3JlXCJdLCB0aGluZyksIDEwKTtcbiAgICBjb25zdCBzZWNvbmRzID0gdGltZXN0YW1wIC8gMTAwMCAtIDExMzQwMjgwMDM7XG4gICAgY29uc3Qgb3JkZXIgPSBNYXRoLmxvZzEwKE1hdGgubWF4KE1hdGguYWJzKHNjb3JlKSwgMSkpO1xuICAgIGxldCBzaWduID0gMDtcblxuICAgIGlmIChzY29yZSA+IDApIHtcbiAgICAgIHNpZ24gPSAxO1xuICAgIH0gZWxzZSBpZiAoc2NvcmUgPCAwKSB7XG4gICAgICBzaWduID0gLTE7XG4gICAgfVxuICAgIHJldHVybiAtMSAqIChzaWduICogb3JkZXIgKyBzZWNvbmRzIC8gNDUwMDApO1xuICB9KSxcbiAgYmVzdDogdm90ZVNvcnQodGhpbmcgPT4ge1xuICAgIGNvbnN0IHVwcyA9IHBhcnNlSW50KFIucGF0aE9yKDAsIFtcInZvdGVzXCIsIFwidXBcIl0sIHRoaW5nKSwgMTApO1xuICAgIGNvbnN0IGRvd25zID0gcGFyc2VJbnQoUi5wYXRoT3IoMCwgW1widm90ZXNcIiwgXCJkb3duXCJdLCB0aGluZyksIDEwKTtcbiAgICBjb25zdCBuID0gdXBzICsgZG93bnM7XG5cbiAgICBpZiAobiA9PT0gMCkgcmV0dXJuIDA7XG4gICAgY29uc3QgeiA9IDEuMjgxNTUxNTY1NTQ1OyAvLyA4MCUgY29uZmlkZW5jZVxuICAgIGNvbnN0IHAgPSB1cHMgLyBuO1xuICAgIGNvbnN0IGxlZnQgPSBwICsgKDEgLyAoMiAqIG4pKSAqIHogKiB6O1xuICAgIGNvbnN0IHJpZ2h0ID0geiAqIE1hdGguc3FydCgocCAqICgxIC0gcCkpIC8gbiArICh6ICogeikgLyAoNCAqIG4gKiBuKSk7XG4gICAgY29uc3QgdW5kZXIgPSAxICsgKDEgLyBuKSAqIHogKiB6O1xuXG4gICAgcmV0dXJuIC0xICogKChsZWZ0IC0gcmlnaHQpIC8gdW5kZXIpO1xuICB9KSxcbiAgY29udHJvdmVyc2lhbDogdm90ZVNvcnQodGhpbmcgPT4ge1xuICAgIGNvbnN0IHVwcyA9IHBhcnNlSW50KFIucGF0aE9yKDAsIFtcInZvdGVzXCIsIFwidXBcIl0sIHRoaW5nKSwgMTApO1xuICAgIGNvbnN0IGRvd25zID0gcGFyc2VJbnQoUi5wYXRoT3IoMCwgW1widm90ZXNcIiwgXCJkb3duXCJdLCB0aGluZyksIDEwKTtcblxuICAgIGlmICh1cHMgPD0gMCB8fCBkb3ducyA8PSAwKSByZXR1cm4gMDtcbiAgICBjb25zdCBtYWduaXR1ZGUgPSB1cHMgKyBkb3ducztcbiAgICBjb25zdCBiYWxhbmNlID0gdXBzID4gZG93bnMgPyBkb3ducyAvIHVwcyA6IHVwcyAvIGRvd25zO1xuXG4gICAgcmV0dXJuIC0xICogbWFnbml0dWRlICoqIGJhbGFuY2U7XG4gIH0pXG59O1xuXG5jb25zdCB0b0l0ZW0gPSBxdWVyeShcbiAgKHNjb3BlLCBpZCwgc3BlYykgPT5cbiAgICAoc29ydHNbc3BlYy5zb3J0XSB8fCBzb3J0cy5uZXcpKGlkLCBzcGVjKS50aGVuKHZhbCA9PiBbaWQsIHZhbF0pXG4pO1xuXG5jb25zdCB0b0l0ZW1zID0gcXVlcnkoXG4gIChzY29wZSwgaWRzLCBzcGVjKSA9PiBhbGwoUi5tYXAoXG4gICAgaWQgPT4gdG9JdGVtKHNjb3BlLCBpZCwgc3BlYyksXG4gICAgaWRzXG4gICkpXG4pO1xuXG5jb25zdCBmcm9tVGhpbmdTZXRzID0gcXVlcnkoXG4gIChzY29wZSwgc291bHMsIHNwZWMpID0+XG4gICAgYWxsKFIubWFwKHNjb3BlLmdldCwgc291bHMpKVxuICAgICAgLnRoZW4oUi5waXBlKFxuICAgICAgICBUaGluZ1NldC51bmlvbixcbiAgICAgICAgVGhpbmdTZXQuaWRzLFxuICAgICAgICBpZHMgPT4gdG9JdGVtcyhzY29wZSwgaWRzLCBzcGVjKVxuICAgICAgKSlcbiAgICAgIC50aGVuKHNvcnRJdGVtcylcbik7XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nU29ydCA9IHtcbiAgUE9TX0lELFxuICBQT1NfVkFMLFxuICBzb3J0cyxcbiAgdG9JdGVtLFxuICB0b0l0ZW1zLFxuICB0b0lkcyxcbiAgc29ydEl0ZW1zLFxuICBmcm9tVGhpbmdTZXRzXG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IEd1bk5vZGUgfSBmcm9tIFwiLi4vR3VuTm9kZVwiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4uL1NjaGVtYVwiO1xuaW1wb3J0IHsgVGhpbmdTZXQgfSBmcm9tIFwiLi4vVGhpbmdcIjtcbmltcG9ydCB7IExpc3RpbmdOb2RlIH0gZnJvbSBcIi4vTGlzdGluZ05vZGVcIjtcbmltcG9ydCB7IExpc3RpbmdTb3J0IH0gZnJvbSBcIi4vTGlzdGluZ1NvcnRcIjtcblxuY29uc3QgdXBkYXRlTGlzdGluZyA9IGFzeW5jIChcbiAgb3JjLFxuICByb3V0ZSxcbiAgc2NvcGUsXG4gIHNwZWMsXG4gIGlkcyA9IFtdLFxuICByZW1vdmVJZHMgPSBbXVxuKSA9PiB7XG4gIGlmICghaWRzLmxlbmd0aCAmJiAhcmVtb3ZlSWRzLmxlbmd0aCkgcmV0dXJuO1xuICBjb25zdCBleGlzdGluZyA9IGF3YWl0IG9yYy5uZXdTY29wZSgpLmdldChyb3V0ZS5zb3VsKTtcbiAgY29uc3QgdXBkYXRlZEl0ZW1zID0gYXdhaXQgTGlzdGluZ1NvcnQudG9JdGVtcyhzY29wZSwgaWRzLCBzcGVjKTtcbiAgY29uc3QgY2hhbmdlcyA9IExpc3RpbmdOb2RlLmRpZmYoZXhpc3RpbmcsIHVwZGF0ZWRJdGVtcywgcmVtb3ZlSWRzKTtcblxuICBpZiAoY2hhbmdlcykgY29uc29sZS5sb2coXCJDSEFOR0VTXCIsIHJvdXRlLnNvdWwsIGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlcykgcm91dGUud3JpdGUoY2hhbmdlcyk7XG59O1xuXG5jb25zdCBvblB1dCA9IGFzeW5jIChvcmMsIHJvdXRlLCB7IHNvcnQsIHVwZGF0ZWRTb3VsLCBkaWZmIH0pID0+IHtcbiAgbGV0IHVwZGF0ZWRJZHMgPSBbXTtcbiAgY29uc3Qgc2NvcGUgPSBvcmMubmV3U2NvcGUoKTtcbiAgY29uc3QgeyB0aGluZ0lkIH0gPSBTY2hlbWEuVGhpbmdWb3RlQ291bnRzLnJvdXRlLm1hdGNoKHVwZGF0ZWRTb3VsKSB8fCB7fTtcbiAgY29uc3QgaXNTdGlja3kgPSBSLmVxdWFscyhyb3V0ZS5tYXRjaC50aGluZ0lkIHx8IG51bGwpO1xuXG4gIGlmICh0aGluZ0lkKSB1cGRhdGVkSWRzLnB1c2godGhpbmdJZCk7XG4gIHVwZGF0ZWRJZHMgPSBSLmNvbmNhdCh1cGRhdGVkSWRzLCBUaGluZ1NldC5pZHMoR3VuTm9kZS5kZWNvZGVTRUEoZGlmZikpKTtcbiAgYXdhaXQgdXBkYXRlTGlzdGluZyhvcmMsIHJvdXRlLCBzY29wZSwgc29ydCwgdXBkYXRlZElkcywgW10sIGlzU3RpY2t5KTtcbiAgZm9yIChjb25zdCBrZXkgaW4gc2NvcGUuZ2V0QWNjZXNzZXMoKSkgb3JjLmxpc3RlbihrZXksIHJvdXRlLnNvdWwpO1xufTtcblxuZXhwb3J0IGNvbnN0IExpc3RpbmdPcmFjbGUgPSB7XG4gIHVwZGF0ZUxpc3RpbmcsXG4gIG9uUHV0XG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCBvYmpIYXNoIGZyb20gXCJvYmplY3QtaGFzaFwiO1xuaW1wb3J0IHsgY3JlYXRlU3VwcHJlc3NvciB9IGZyb20gXCJndW4tc3VwcHJlc3NvclwiO1xuaW1wb3J0ICogYXMgc2VhIGZyb20gXCJndW4tc3VwcHJlc3Nvci1zZWFyXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi9TY2hlbWFcIjtcblxuY29uc3QgaXNMZWdhY3lUaGluZyA9IChzY2hlbWEsIGRhdGEpID0+IHtcbiAgY29uc3QgZGF0YVNvdWwgPSBSLnBhdGgoW1wiZGF0YVwiLCBcIiNcIl0sIGRhdGEpO1xuICBjb25zdCBuZXdlc3QgPSBSLndpdGhvdXQoXG4gICAgW1wiY29tbWVudHNcIiwgXCJhbGxjb21tZW50c1wiLCBcInZvdGVzdXBcIiwgXCJ2b3Rlc2Rvd25cIl0sXG4gICAgUi5rZXlzKFIucGF0aChbXCJfXCIsIFwiPlwiXSwgZGF0YSkpXG4gIClcbiAgICAubWFwKGtleSA9PiBSLnBhdGgoW1wiX1wiLCBcIj5cIiwga2V5XSwgZGF0YSkpXG4gICAgLnNvcnQoKVxuICAgIC5wb3AoKTtcbiAgY29uc3QgeyB0aGluZ0lkIH0gPSBzY2hlbWEuVGhpbmdEYXRhLnJvdXRlLm1hdGNoKGRhdGFTb3VsKSB8fCB7fTtcbiAgY29uc3QgaWQgPSBSLnByb3AoXCJpZFwiLCBkYXRhKTtcblxuICByZXR1cm4gaWQgJiYgaWQgPT09IHRoaW5nSWQgJiYgbmV3ZXN0ICYmIG5ld2VzdCA8IDE1NDMxMDI4MTQ5NDU7XG59O1xuXG5jb25zdCB0aGluZ0hhc2hNYXRjaGVzU291bCA9IChfc2NoZW1hLCBkYXRhKSA9PiB7XG4gIGNvbnN0IGlkID0gUi5wcm9wKFwiaWRcIiwgZGF0YSk7XG5cbiAgcmV0dXJuIChcbiAgICBpZCAmJlxuICAgIGlkID09PVxuICAgICAgb2JqSGFzaCh7XG4gICAgICAgIGF1dGhvcklkOiAoUi5wYXRoKFtcImF1dGhvclwiLCBcIiNcIl0sIGRhdGEpIHx8IFwiXCIpLnN1YnN0cigxKSB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRpbWVzdGFtcDogcGFyc2VJbnQoUi5wcm9wKFwidGltZXN0YW1wXCIsIGRhdGEpLCAxMCksXG4gICAgICAgIGtpbmQ6IFIucHJvcChcImtpbmRcIiwgZGF0YSksXG4gICAgICAgIHRvcGljOiBSLnByb3AoXG4gICAgICAgICAgXCJ0b3BpY05hbWVcIixcbiAgICAgICAgICBTY2hlbWEuVG9waWMucm91dGUubWF0Y2goUi5wYXRoKFtcInRvcGljXCIsIFwiI1wiXSwgZGF0YSkpXG4gICAgICAgICksXG4gICAgICAgIG9wSWQ6IFIucHJvcChcbiAgICAgICAgICBcInRoaW5nSWRcIixcbiAgICAgICAgICBTY2hlbWEuVGhpbmcucm91dGUubWF0Y2goUi5wYXRoKFtcIm9wXCIsIFwiI1wiXSwgZGF0YSkpXG4gICAgICAgICksXG4gICAgICAgIHJlcGx5VG9JZDogUi5wcm9wKFxuICAgICAgICAgIFwidGhpbmdJZFwiLFxuICAgICAgICAgIFNjaGVtYS5UaGluZy5yb3V0ZS5tYXRjaChSLnBhdGgoW1wicmVwbHlUb1wiLCBcIiNcIl0sIGRhdGEpKVxuICAgICAgICApLFxuICAgICAgICBvcmlnaW5hbEhhc2g6IFIucHJvcChcIm9yaWdpbmFsSGFzaFwiLCBkYXRhKVxuICAgICAgfSlcbiAgKTtcbn07XG5cbmNvbnN0IHNpZ25lZFRoaW5nRGF0YU1hdGNoZXMgPSAoX3NjaGVtYSwgZGF0YSkgPT4ge1xuICBjb25zdCBhdXRob3JJZCA9IChSLnBhdGgoW1wiYXV0aG9yXCIsIFwiI1wiXSwgZGF0YSkgfHwgXCJcIikuc3Vic3RyKDEpIHx8IHVuZGVmaW5lZDtcbiAgY29uc3Qgc2lnbmVkSWQgPSBSLnByb3AoXG4gICAgXCJhdXRob3JJZFwiLFxuICAgIFNjaGVtYS5UaGluZ0RhdGFTaWduZWQucm91dGUubWF0Y2goUi5wYXRoKFtcImRhdGFcIiwgXCIjXCJdLCBkYXRhKSlcbiAgKTtcblxuICByZXR1cm4gYXV0aG9ySWQgJiYgYXV0aG9ySWQgPT09IHNpZ25lZElkO1xufTtcblxuY29uc3QgdGhpbmdEYXRhTWF0Y2hlc09yaWdpbmFsSGFzaCA9IChfc2NoZW1hLCBkYXRhKSA9PiB7XG4gIGNvbnN0IG9yaWdpbmFsSGFzaCA9IFIucHJvcChcIm9yaWdpbmFsSGFzaFwiLCBkYXRhKTtcbiAgY29uc3QgaWQgPSBSLnByb3AoXG4gICAgXCJ0aGluZ0lkXCIsXG4gICAgU2NoZW1hLlRoaW5nRGF0YS5yb3V0ZS5tYXRjaChSLnBhdGgoW1wiZGF0YVwiLCBcIiNcIl0sIGRhdGEpKVxuICApO1xuXG4gIHJldHVybiBpZCAmJiBpZCA9PT0gb3JpZ2luYWxIYXNoO1xufTtcblxuY29uc3QgZ2V0SXNUaGluZ1JlbGF0ZWRFZGdlID0gYWp2ID0+IChcbiAgbm9kZVR5cGVOYW1lLFxuICBkYXRhLFxuICBfcFNjaGVtYSxcbiAgX2NQYXRoLFxuICBwYXJlbnREYXRhXG4pID0+IHtcbiAgY29uc3QgeyB0aGluZ0lkIH0gPVxuICAgIFNjaGVtYS5UaGluZy5yb3V0ZS5tYXRjaChSLnBhdGgoW1wiX1wiLCBcIiNcIl0sIHBhcmVudERhdGEpIHx8IFwiXCIpIHx8IHt9O1xuICBjb25zdCB7IHRoaW5nSWQ6IHByb3BUaGluZ0lkIH0gPSBTY2hlbWFbbm9kZVR5cGVOYW1lXS5yb3V0ZS5tYXRjaChcbiAgICBSLnByb3AoXCIjXCIsIGRhdGEpIHx8IFwiXCJcbiAgKTtcblxuICBpZiAoIXRoaW5nSWQgfHwgdGhpbmdJZCAhPT0gcHJvcFRoaW5nSWQpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGFqdi5jb21waWxlKHsgJHJlZjogYHNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy8ke25vZGVUeXBlTmFtZX1FZGdlYCB9KShcbiAgICBkYXRhXG4gICk7XG59O1xuXG5jb25zdCB0aGluZ0RhdGFIYXNoTWF0Y2hlcyA9IChfc2NoZW1hLCBkYXRhKSA9PiB7XG4gIGNvbnN0IHsgXywgLi4ucmVjb3JkIH0gPSBkYXRhIHx8IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgcmVjb3JkLnRpbWVzdGFtcCA9IHBhcnNlRmxvYXQocmVjb3JkLnRpbWVzdGFtcCwgMTApO1xuICBjb25zdCB7IHRoaW5nSWQgfSA9XG4gICAgU2NoZW1hLlRoaW5nRGF0YS5yb3V0ZS5tYXRjaChSLnBhdGgoW1wiX1wiLCBcIiNcIl0sIGRhdGEpIHx8IFwiXCIpIHx8IHt9O1xuXG4gIHJldHVybiB0aGluZ0lkICYmIHRoaW5nSWQgPT09IG9iakhhc2gocmVjb3JkKTtcbn07XG5cbmNvbnN0IGlzVm90ZVZhbGlkID0gKGFyZ29uMiwgc2NoZW1hLCBwcmVmaXgsIHZvdGUpID0+IHtcbiAgY29uc3QgeyBhbGdvcml0aG0gPSBcImFyZ29uMmRcIiwgY29uZmlnID0ge30gfSA9IHNjaGVtYSB8fCB7fTtcblxuICBjb25zdCBub25jZSA9IEJ1ZmZlci5oYXNPd25Qcm9wZXJ0eShcImZyb21cIilcbiAgICA/IEJ1ZmZlci5mcm9tKHZvdGUsIFwiaGV4XCIpXG4gICAgOiBuZXcgQnVmZmVyKHZvdGUsIFwiaGV4XCIpO1xuICBjb25zdCBzYWx0ID0gQnVmZmVyLmhhc093blByb3BlcnR5KFwiZnJvbVwiKVxuICAgID8gQnVmZmVyLmZyb20obm9uY2UsIFwiaGV4XCIpXG4gICAgOiBuZXcgQnVmZmVyKG5vbmNlLCBcImhleFwiKTtcbiAgY29uc3QgaGFzaCA9IGFyZ29uMi5oYXNoKHByZWZpeCwge1xuICAgIHNhbHQsXG4gICAgaGFzaExlbmd0aDogY29uZmlnLmhhc2hMZW5ndGgsXG4gICAgdGltZUNvc3Q6IGNvbmZpZy50aW1lQ29zdCxcbiAgICBtZW1vcnlDb3N0OiBjb25maWcubWVtb3J5Q29zdCxcbiAgICBwYXJhbGxlbGlzbTogY29uZmlnLnBhcmFsbGVsaXNtLFxuICAgIHJhdzogdHJ1ZSxcbiAgICB0eXBlOiBhcmdvbjJbYWxnb3JpdGhtXVxuICB9KTtcbiAgbGV0IG9mZiA9IDA7XG4gIGxldCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPD0gY29uZmlnLmNvbXBsZXhpdHkgLSA4OyBpICs9IDgsIG9mZisrKSB7XG4gICAgaWYgKGhhc2hbb2ZmXSAhPT0gMCkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1hc2sgPSAweGZmIDw8ICg4ICsgaSAtIGNvbmZpZy5jb21wbGV4aXR5KTtcblxuICByZXR1cm4gKGhhc2hbb2ZmXSAmIG1hc2spID09PSAwO1xufTtcblxuY29uc3Qga2V5c0FyZVByb29mc09mV29yayA9IChzY2hlbWEsIGRhdGEpID0+IHtcbiAgY29uc3QgYXJnb24yID0gcmVxdWlyZShcImFyZ29uMlwiKTtcblxuICBpZiAoIWFyZ29uMikgcmV0dXJuIHRydWU7IC8vIGluIGJyb3dzZXIgZG9uJ3QgYm90aGVyIGZvciBub3dcbiAgY29uc3QgeyBhbGdvcml0aG0gPSBcImFyZ29uMmRcIiB9ID0gc2NoZW1hIHx8IHt9O1xuICBjb25zdCBwcmVmaXggPSBSLnBhdGgoW1wiX1wiLCBcIiNcIl0sIGRhdGEpO1xuXG4gIGlmIChhbGdvcml0aG0gIT09IFwiYXJnb24yZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBhcmdvbjIgc3VwcG9ydGVkIGZvciB2b3RlIGhhc2hlc1wiKTtcbiAgfVxuXG4gIFIud2l0aG91dChbXCJfXCJdLCBSLmtleXMoZGF0YSkpLmZvckVhY2godm90ZSA9PiB7XG4gICAgaWYgKCFpc1ZvdGVWYWxpZChhcmdvbjIsIHNjaGVtYSwgcHJlZml4LCB2b3RlKSkge1xuICAgICAgY29uc29sZS5sb2coXCJpbnZhbGlkIHZvdGVcIiwgcHJlZml4LCB2b3RlKTtcbiAgICAgIGRlbGV0ZSBkYXRhW3ZvdGVdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgaW5pdEFqdiA9IFIuY29tcG9zZShcbiAgYWp2ID0+IHtcbiAgICBhanYuYWRkS2V5d29yZChcImlzTGVnYWN5VGhpbmdcIiwge1xuICAgICAgdmFsaWRhdGU6IGlzTGVnYWN5VGhpbmdcbiAgICB9KTtcbiAgICBhanYuYWRkS2V5d29yZChcInRoaW5nSGFzaE1hdGNoZXNTb3VsXCIsIHtcbiAgICAgIHZhbGlkYXRlOiB0aGluZ0hhc2hNYXRjaGVzU291bFxuICAgIH0pO1xuICAgIGFqdi5hZGRLZXl3b3JkKFwic2lnbmVkVGhpbmdEYXRhTWF0Y2hlc1RoaW5nXCIsIHtcbiAgICAgIHZhbGlkYXRlOiBzaWduZWRUaGluZ0RhdGFNYXRjaGVzXG4gICAgfSk7XG4gICAgYWp2LmFkZEtleXdvcmQoXCJ0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoXCIsIHtcbiAgICAgIHZhbGlkYXRlOiB0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoXG4gICAgfSk7XG4gICAgYWp2LmFkZEtleXdvcmQoXCJ0aGluZ1JlbGF0ZWRFZGdlXCIsIHtcbiAgICAgIHZhbGlkYXRlOiBnZXRJc1RoaW5nUmVsYXRlZEVkZ2UoYWp2KVxuICAgIH0pO1xuICAgIGFqdi5hZGRLZXl3b3JkKFwidGhpbmdEYXRhSGFzaE1hdGNoZXNTb3VsXCIsIHtcbiAgICAgIHZhbGlkYXRlOiB0aGluZ0RhdGFIYXNoTWF0Y2hlc1xuICAgIH0pO1xuICAgIGFqdi5hZGRLZXl3b3JkKFwia2V5c0FyZVByb29mc09mV29ya1wiLCB7XG4gICAgICB2YWxpZGF0ZToga2V5c0FyZVByb29mc09mV29yayxcbiAgICAgIG1vZGlmeWluZzogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBhanY7XG4gIH0sXG4gIHNlYS5pbml0QWp2XG4pO1xuXG5leHBvcnQgY29uc3Qgc3VwcHJlc3NvciA9IGNyZWF0ZVN1cHByZXNzb3Ioe1xuICBkZWZpbml0aW9uczogU2NoZW1hLmRlZmluaXRpb25zLFxuICBpbml0OiBpbml0QWp2XG59KTtcblxuY29uc3QgZ3VuV2lyZUlucHV0ID0gUi5jdXJyeSgocGVlciwgY29udGV4dCkgPT5cbiAgY29udGV4dC5vbihcImluXCIsIGZ1bmN0aW9uIHdpcmVJbnB1dChtc2cpIHtcbiAgICBjb25zdCBfID0gbXNnW1wiX1wiXTtcblxuICAgIGRlbGV0ZSBtc2dbXCJfXCJdO1xuICAgIGlmIChcInBpbmdcIiBpbiBtc2cgfHwgXCJsZWVjaFwiIGluIG1zZykgcmV0dXJuO1xuICAgIGlmIChtc2cucHV0ICYmICFSLmtleXMobXNnLnB1dCkubGVuZ3RoKSByZXR1cm47XG4gICAgY29uc3QgcHJvbWlzZSA9IHBlZXIuY29uZmlnLmRpc2FibGVWYWxpZGF0aW9uXG4gICAgICA/IFByb21pc2UucmVzb2x2ZShtc2cpXG4gICAgICA6IHN1cHByZXNzb3IudmFsaWRhdGUobXNnKTtcblxuICAgIHByb21pc2VcbiAgICAgIC50aGVuKHZhbGlkYXRlZCA9PiB7XG4gICAgICAgIGlmICghdmFsaWRhdGVkKSByZXR1cm4gY29uc29sZS5sb2coXCJtc2cgZGlkbid0IHZhbGlkYXRlXCIsIG1zZyk7XG4gICAgICAgIG1zZ1tcIl9cIl0gPSBfO1xuICAgICAgICByZXR1cm4gdGhpcy50by5uZXh0KG1zZyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKFwidmFsaWRhdGUgZXJyXCIsIG1zZywgZXJyLnN0YWNrIHx8IGVycikpO1xuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFZhbGlkYXRpb24gPSB7XG4gIGlzTGVnYWN5VGhpbmcsXG4gIHRoaW5nSGFzaE1hdGNoZXNTb3VsLFxuICBzaWduZWRUaGluZ0RhdGFNYXRjaGVzLFxuICB0aGluZ0RhdGFNYXRjaGVzT3JpZ2luYWxIYXNoLFxuICBnZXRJc1RoaW5nUmVsYXRlZEVkZ2UsXG4gIHRoaW5nRGF0YUhhc2hNYXRjaGVzLFxuICBpc1ZvdGVWYWxpZCxcbiAga2V5c0FyZVByb29mc09mV29yayxcbiAgaW5pdEFqdixcbiAgc3VwcHJlc3NvcixcbiAgZ3VuV2lyZUlucHV0XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTdfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE4X187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xOV9fOyIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBUb3BpY0xpc3RpbmcgfSBmcm9tIFwiLi9Ub3BpY0xpc3RpbmdcIjtcbmltcG9ydCB7IERvbWFpbkxpc3RpbmcgfSBmcm9tIFwiLi9Eb21haW5MaXN0aW5nXCI7XG5pbXBvcnQgeyBDb21tZW50TGlzdGluZyB9IGZyb20gXCIuL0NvbW1lbnRMaXN0aW5nXCI7XG5pbXBvcnQgeyBTcGFjZUxpc3RpbmcgfSBmcm9tIFwiLi9TcGFjZUxpc3RpbmdcIjtcbmltcG9ydCB7IEluYm94TGlzdGluZyB9IGZyb20gXCIuL0luYm94TGlzdGluZ1wiO1xuaW1wb3J0IHsgUHJvZmlsZUxpc3RpbmcgfSBmcm9tIFwiLi9Qcm9maWxlTGlzdGluZ1wiO1xuXG5jb25zdCB0eXBlcyA9IFtcbiAgVG9waWNMaXN0aW5nLFxuICBEb21haW5MaXN0aW5nLFxuICBDb21tZW50TGlzdGluZyxcbiAgU3BhY2VMaXN0aW5nLFxuICBJbmJveExpc3RpbmcsXG4gIFByb2ZpbGVMaXN0aW5nXG5dO1xuXG5jb25zdCBmcm9tUGF0aCA9IHBhdGggPT4ge1xuICBsZXQgbWF0Y2g7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgIG1hdGNoID0gdHlwZXNbaV0ucm91dGUubWF0Y2gocGF0aCk7XG4gICAgaWYgKG1hdGNoKSByZXR1cm4gUi5hc3NvYyhcIm1hdGNoXCIsIG1hdGNoLCB0eXBlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgTGlzdGluZ1R5cGUgPSB7IC4uLnR5cGVzLCB0eXBlcywgZnJvbVBhdGggfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBUb2tlbml6ZXIgfSBmcm9tIFwiLi4vVG9rZW5pemVyXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vQ29uZmlnXCI7XG5cbmNvbnN0IGZyb21Tb3VyY2UgPSAoc291cmNlLCBvd25lcklkID0gbnVsbCwgc3BhY2VOYW1lID0gbnVsbCkgPT4ge1xuICBjb25zdCB0b2tlbml6ZWQgPSBUb2tlbml6ZXIudG9rZW5pemUoc291cmNlKTtcbiAgY29uc3Qgb2JqID0geyAuLi50b2tlbml6ZWQgfTtcbiAgY29uc3QgeyBpc1ByZXNlbnQsIGdldFZhbHVlLCBnZXRWYWx1ZXMsIGdldFZhbHVlQ2hhaW4sIGdldFBhaXJzIH0gPSB0b2tlbml6ZWQ7XG5cbiAgW1xuICAgIG9iai5mcm9tUGFnZUF1dGhvciA9IG93bmVySWQsXG4gICAgb2JqLmZyb21QYWdlTmFtZSA9IHNwYWNlTmFtZSA/IGBzcGFjZToke3NwYWNlTmFtZX1gIDogdW5kZWZpbmVkXG4gIF0gPSBnZXRWYWx1ZUNoYWluKFwic291cmNlZCBmcm9tIHBhZ2VcIik7XG4gIG9iai5kaXNwbGF5TmFtZSA9IHRva2VuaXplZC5nZXRWYWx1ZShcIm5hbWVcIikgfHwgc3BhY2VOYW1lO1xuICBvYmouaW5kZXhlciA9IGdldFZhbHVlKFwidGFidWxhdG9yXCIpIHx8IENvbmZpZy5pbmRleGVyO1xuICBvYmoudGFidWxhdG9yID0gZ2V0VmFsdWUoXCJ0YWJ1bGF0b3JcIikgfHwgb2JqLmluZGV4ZXI7XG4gIG9iai50YWJzID0gZ2V0UGFpcnMoXCJ0YWJcIik7XG4gIG9iai5zb3J0ID0gZ2V0VmFsdWUoXCJzb3J0XCIpO1xuICBvYmoudW5pcXVlQnlDb250ZW50ID0gISFpc1ByZXNlbnQoXCJ1bmlxdWUgYnkgY29udGVudFwiKTtcbiAgb2JqLmN1cmF0b3JzID0gZ2V0VmFsdWVzKFwiY3VyYXRvclwiKTtcbiAgb2JqLm1vZGVyYXRvcnMgPSBnZXRWYWx1ZXMoXCJtb2RcIik7XG4gIG9iai5pbmNsdWRlUmFua3MgPSAhIWlzUHJlc2VudChcInNob3cgcmFua3NcIik7XG4gIG9iai5zdGlja3lJZHMgPSBnZXRWYWx1ZXMoXCJzdGlja3lcIik7XG4gIG9iai5pc0lkU3RpY2t5ID0gaWQgPT4gISF0b2tlbml6ZWQuaXNQcmVzZW50KFtcInN0aWNreVwiLCBpZF0pO1xuICBvYmouc3VibWl0VG9waWNzID0gZ2V0VmFsdWVzKFwic3VibWl0IHRvXCIpO1xuICBvYmouc3VibWl0VG9waWMgPSBnZXRWYWx1ZShcInN1Ym1pdCB0b1wiKTtcbiAgb2JqLmNoYXRUb3BpYyA9IGdldFZhbHVlKFwiY2hhdCBpblwiKTtcblxuICBpZiAob3duZXJJZCAmJiBzcGFjZU5hbWUpIHtcbiAgICBvYmouc3BhY2VOYW1lID0gc3BhY2VOYW1lO1xuICAgIG9iai5vd25lciA9IG93bmVySWQ7XG4gICAgb2JqLnVzZUZvckNvbW1lbnRzID0gIXRva2VuaXplZC5pc1ByZXNlbnQoXCJjb21tZW50cyBsZWF2ZSBzcGFjZVwiKTtcbiAgICBvYmoucGF0aCA9IGAvdXNlci8ke293bmVySWR9L3NwYWNlcy8ke3NwYWNlTmFtZX1gO1xuICAgIG9iai5kZWZhdWx0VGFiID0gdG9rZW5pemVkLmdldFZhbHVlKFwidGFiXCIpO1xuICAgIG9iai5kZWZhdWx0VGFiUGF0aCA9IG9iai5kZWZhdWx0VGFiXG4gICAgICA/IHRva2VuaXplZC5nZXRWYWx1ZShbXCJ0YWJcIiwgb2JqLmRlZmF1bHRUYWJdKVxuICAgICAgOiBudWxsO1xuICB9XG5cbiAgb2JqLmZpbHRlcnMgPSB7XG4gICAgZnVuY3Rpb25zOiBbXSxcbiAgICBhbGxvdzoge1xuICAgICAgcmVwbGllc1RvOiBnZXRWYWx1ZShcInJlcGxpZXMgdG8gYXV0aG9yXCIpLFxuICAgICAgdHlwZTogZ2V0VmFsdWUoXCJ0eXBlXCIpLCAvLyBUT0RPOiB0aGlzIGZpZWxkIHNlZW1zIHJlZHVuZGFudCB3aXRoIGtpbmQgYW5kIHNob3VsZCBiZSBkZXByZWNhdGVkXG4gICAgICBvcHM6IGdldFZhbHVlcyhcIm9wXCIpLFxuICAgICAgYWxpYXNlczogZ2V0VmFsdWVzKFwiYWxpYXNcIiksXG4gICAgICBhdXRob3JzOiBnZXRWYWx1ZXMoXCJhdXRob3JcIiksXG4gICAgICBkb21haW5zOiBnZXRWYWx1ZXMoXCJkb21haW5cIiksXG4gICAgICB0b3BpY3M6IGdldFZhbHVlcyhcInRvcGljXCIpLFxuICAgICAgbGlzdGluZ3M6IGdldFZhbHVlcyhcImxpc3RpbmdcIiksXG4gICAgICBraW5kczogZ2V0VmFsdWVzKFwia2luZFwiKSxcbiAgICAgIGFub246ICFpc1ByZXNlbnQoXCJyZXF1aXJlIHNpZ25lZFwiKSxcbiAgICAgIHNpZ25lZDogIWlzUHJlc2VudChcInJlcXVpcmUgYW5vblwiKVxuICAgIH0sXG4gICAgZGVueToge1xuICAgICAgYWxpYXNlczogZ2V0VmFsdWVzKFwiYmFuIGFsaWFzXCIpLFxuICAgICAgYXV0aG9yczogZ2V0VmFsdWVzKFwiYmFuIGF1dGhvclwiKSxcbiAgICAgIGRvbWFpbnM6IGdldFZhbHVlcyhcImJhbiBkb21haW5cIiksXG4gICAgICB0b3BpY3M6IGdldFZhbHVlcyhcImJhbiB0b3BpY1wiKSxcbiAgICAgIGFub246ICEhaXNQcmVzZW50KFwicmVxdWlyZSBzaWduZWRcIiksXG4gICAgICBzaWduZWQ6ICEhaXNQcmVzZW50KFwicmVxdWlyZSBhbm9uXCIpLFxuICAgICAgdGFnczogZ2V0UGFpcnMoXCJjYW4gcmVtb3ZlXCIpXG4gICAgfVxuICB9O1xuXG4gIG9iai52b3RlRmlsdGVycyA9IHtcbiAgICBmdW5jdGlvbnM6IFtdLFxuICAgIHVwc01pbjogcGFyc2VJbnQoZ2V0VmFsdWUoXCJ1cHMgYWJvdmVcIiksIDEwKSB8fCBudWxsLFxuICAgIHVwc01heDogcGFyc2VJbnQoZ2V0VmFsdWUoXCJ1cHMgYmVsb3dcIiksIDEwKSB8fCBudWxsLFxuICAgIGRvd25zTWluOiBwYXJzZUludChnZXRWYWx1ZShcImRvd25zIGFib3ZlXCIpLCAxMCkgfHwgbnVsbCxcbiAgICBkb3duc01heDogcGFyc2VJbnQoZ2V0VmFsdWUoXCJkb3ducyBiZWxvd1wiKSwgMTApIHx8IG51bGwsXG4gICAgc2NvcmVNaW46IHBhcnNlSW50KGdldFZhbHVlKFwic2NvcmUgYWJvdmVcIiksIDEwKSB8fCBudWxsLFxuICAgIHNjb3JlTWF4OiBwYXJzZUludChnZXRWYWx1ZShcInNjb3JlIGJlbG93XCIpLCAxMCkgfHwgbnVsbFxuICB9O1xuXG4gIG9iai5jZW5zb3JzID0gUi51bmlxKFIubWFwKFIucHJvcCgxKSwgb2JqLmZpbHRlcnMuZGVueS50YWdzKSk7XG4gIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnQgY29uc3QgTGlzdGluZ0RlZmluaXRpb24gPSB7IGZyb21Tb3VyY2UgfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5cbmNvbnN0IHRva2VuaXplID0gc291cmNlID0+IHtcbiAgY29uc3QgdG9rZW5NYXAgPSAoc291cmNlIHx8IFwiXCIpLnNwbGl0KFwiXFxuXCIpLnJlZHVjZSgoZGVmLCBsaW5lKSA9PiB7XG4gICAgY29uc3QgdG9rZW5zID0gbGluZVxuICAgICAgLnRyaW0oKVxuICAgICAgLnNwbGl0KFwiIFwiKVxuICAgICAgLm1hcChSLnRyaW0pXG4gICAgICAuZmlsdGVyKHggPT4geCk7XG5cbiAgICBpZiAoIXRva2Vucy5sZW5ndGgpIHJldHVybiBkZWY7XG4gICAgcmV0dXJuIFIuYXNzb2NQYXRoKHRva2Vucywge30sIGRlZik7XG4gIH0sIHt9KTtcblxuICBjb25zdCBpc1ByZXNlbnQgPSBwID0+IHtcbiAgICBsZXQgY2hlY2sgPSBwO1xuXG4gICAgaWYgKHR5cGVvZiBwID09PSBcInN0cmluZ1wiKSBjaGVjayA9IHAuc3BsaXQoXCIgXCIpO1xuICAgIHJldHVybiBjaGVjayAmJiBSLnBhdGgoY2hlY2ssIHRva2VuTWFwKTtcbiAgfTtcblxuICBjb25zdCBnZXRWYWx1ZXMgPSBwID0+IFIua2V5c0luKGlzUHJlc2VudChwKSk7XG4gIGNvbnN0IGdldFZhbHVlID0gcCA9PiBnZXRWYWx1ZXMocClbMF0gfHwgbnVsbDtcbiAgY29uc3QgZ2V0TGFzdFZhbHVlID0gcCA9PiBnZXRWYWx1ZXMocCkucG9wKCkgfHwgbnVsbDtcblxuICBjb25zdCBnZXRWYWx1ZUNoYWluID0gcCA9PiB7XG4gICAgY29uc3Qga2V5cyA9IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8gcC5zcGxpdChcIiBcIikgOiBwO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGxldCBuZXh0ID0gcDtcblxuICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICBuZXh0ID0gZ2V0VmFsdWUoWy4uLmtleXMsIC4uLnZhbHVlc10pO1xuICAgICAgbmV4dCAmJiB2YWx1ZXMucHVzaChuZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuXG4gIGNvbnN0IGdldFBhaXJzID0gcCA9PiB7XG4gICAgY29uc3Qga2V5cyA9IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8gcC5zcGxpdChcIiBcIikgOiBwO1xuXG4gICAgcmV0dXJuIGdldFZhbHVlcyhrZXlzKS5yZWR1Y2UoKHBhaXJzLCBrZXkpID0+IHtcbiAgICAgIGNvbnN0IHZhbCA9IGdldFZhbHVlKFsuLi5rZXlzLCBrZXldKTtcblxuICAgICAgcmV0dXJuIFsuLi5wYWlycywgW2tleSwgdmFsXV07XG4gICAgfSwgW10pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc291cmNlLFxuICAgIGlzUHJlc2VudCxcbiAgICBnZXRWYWx1ZSxcbiAgICBnZXRWYWx1ZXMsXG4gICAgZ2V0TGFzdFZhbHVlLFxuICAgIGdldFZhbHVlQ2hhaW4sXG4gICAgZ2V0UGFpcnNcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBUb2tlbml6ZXIgPSB7IHRva2VuaXplIH07XG4iLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgcXVlcnkgfSBmcm9tIFwiZ3VuLXNjb3BlXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vQ29uZmlnXCI7XG5pbXBvcnQgeyBUb2tlbml6ZXIgfSBmcm9tIFwiLi4vVG9rZW5pemVyXCI7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCIuLi9RdWVyeVwiO1xuaW1wb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi9MaXN0aW5nU3BlY1wiO1xuXG5jb25zdCB0YWJzID0gW1wiaG90XCIsIFwibmV3XCIsIFwiZGlzY3Vzc2VkXCIsIFwiY29udHJvdmVyc2lhbFwiLCBcInRvcFwiXTtcbmNvbnN0IHNwYWNlQ29uZmlnUGFnZU5hbWUgPSBuYW1lID0+IGBzcGFjZToke25hbWV9YDtcblxuY29uc3Qgc291cmNlV2l0aERlZmF1bHRzID0gUi5jdXJyeSgob3duZXJJZCwgbmFtZSwgc291cmNlKSA9PiB7XG4gIGxldCByZXN1bHQgPSBbc291cmNlIHx8IFwiXCJdO1xuICBjb25zdCB0b2tlbml6ZWQgPSBUb2tlbml6ZXIudG9rZW5pemUoc291cmNlKTtcblxuICBpZiAoIXRva2VuaXplZC5nZXRWYWx1ZShcInRhYlwiKSkge1xuICAgIHRhYnMubWFwKHRhYiA9PlxuICAgICAgcmVzdWx0LnB1c2goYHRhYiAke3RhYn0gL3VzZXIvJHtvd25lcklkfS9zcGFjZXMvJHtuYW1lfS8ke3RhYn1gKVxuICAgICk7XG4gIH1cblxuICBsZXQgaW5kZXhlciA9IHRva2VuaXplZC5nZXRWYWx1ZShcImluZGV4ZXJcIik7XG5cbiAgaWYgKCFpbmRleGVyKSB7XG4gICAgcmVzdWx0LnB1c2goYGluZGV4ZXIgJHtDb25maWcuaW5kZXhlcn1gKTtcbiAgICBpbmRleGVyID0gQ29uZmlnLmluZGV4ZXI7XG4gIH1cblxuICBsZXQgdGFidWxhdG9yID0gdG9rZW5pemVkLmdldFZhbHVlKFwidGFidWxhdG9yXCIpO1xuXG4gIGlmICghdGFidWxhdG9yKSByZXN1bHQucHVzaChgdGFidWxhdG9yICR7aW5kZXhlcn1gKTtcblxuICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcXG5cIik7XG59KTtcblxuY29uc3QgZ2V0U291cmNlID0gcXVlcnkoKHNjb3BlLCBhdXRob3JJZCwgbmFtZSwgZXh0cmEpID0+XG4gIExpc3RpbmdTcGVjLmdldFNvdXJjZShzY29wZSwgYXV0aG9ySWQsIHNwYWNlQ29uZmlnUGFnZU5hbWUobmFtZSksIGV4dHJhKS50aGVuKFxuICAgIHNvdXJjZVdpdGhEZWZhdWx0cyhhdXRob3JJZCwgbmFtZSlcbiAgKVxuKTtcblxuY29uc3QgZ2V0U3BlYyA9IHF1ZXJ5KChzY29wZSwgYXV0aG9ySWQsIG5hbWUsIGV4dHJhKSA9PlxuICBnZXRTb3VyY2Uoc2NvcGUsIGF1dGhvcklkLCBuYW1lLCBleHRyYSkudGhlbihzb3VyY2UgPT5cbiAgICBMaXN0aW5nU3BlYy5mcm9tU291cmNlKHNvdXJjZSwgYXV0aG9ySWQsIG5hbWUpXG4gIClcbik7XG5cbmNvbnN0IG5vZGVUb1NwYWNlTmFtZXMgPSBSLmNvbXBvc2UoXG4gIFIuc29ydEJ5KFIuaWRlbnRpdHkpLFxuICBSLm1hcChSLnJlcGxhY2UoL15zcGFjZTovLCBcIlwiKSksXG4gIFIuZmlsdGVyKFxuICAgIFIuY29tcG9zZShcbiAgICAgIFIucHJvcChcImxlbmd0aFwiKSxcbiAgICAgIFIubWF0Y2goL15zcGFjZTpbXjpdKiQvKVxuICAgIClcbiAgKSxcbiAgUi5rZXlzXG4pO1xuXG5jb25zdCB1c2VyU3BhY2VOYW1lcyA9IHF1ZXJ5KChzY29wZSwgYXV0aG9ySWQpID0+XG4gIFF1ZXJ5LnVzZXJQYWdlcyhzY29wZSwgYXV0aG9ySWQpLnRoZW4obm9kZVRvU3BhY2VOYW1lcykpO1xuXG5leHBvcnQgY29uc3QgU3BhY2VTcGVjID0geyBub2RlVG9TcGFjZU5hbWVzLCB1c2VyU3BhY2VOYW1lcywgdGFicywgZ2V0U291cmNlLCBnZXRTcGVjIH07XG4iLCJpbXBvcnQgeyBQZWVyIH0gZnJvbSBcIi4vUGVlclwiO1xuZXhwb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vQ29uZmlnXCI7XG5leHBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcbmV4cG9ydCB7IExpc3RpbmcsIFNwYWNlU3BlYyB9IGZyb20gXCIuL0xpc3RpbmdcIjtcbmV4cG9ydCB7IFBlZXIgfSBmcm9tIFwiLi9QZWVyXCI7XG5leHBvcnQgeyBRdWVyeSB9IGZyb20gXCIuL1F1ZXJ5XCI7XG5leHBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi9TY2hlbWFcIjtcbmV4cG9ydCB7IFRoaW5nLCBUaGluZ1NldCwgVGhpbmdEYXRhTm9kZSB9IGZyb20gXCIuL1RoaW5nXCI7XG5leHBvcnQgeyBWYWxpZGF0aW9uIH0gZnJvbSBcIi4vVmFsaWRhdGlvblwiO1xuZXhwb3J0IHsgUHJvbWlzZSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmV4cG9ydCBkZWZhdWx0IFBlZXIuaW5pdDtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBWYWxpZGF0aW9uIH0gZnJvbSBcIi4vVmFsaWRhdGlvblwiO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tIFwiLi9RdWVyeVwiO1xuaW1wb3J0IHsgVGhpbmcgfSBmcm9tIFwiLi9UaGluZ1wiO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tIFwiLi9BdXRoZW50aWNhdGlvblwiO1xuXG5mdW5jdGlvbiBpbml0KEd1biwgY29uZmlnID0ge30pIHtcbiAgY29uc3QgeyBsZWVjaCwgZGlzYWJsZVZhbGlkYXRpb24sIG5vR3VuLCBsb2NhbFN0b3JhZ2UsIHBlcnNpc3QsIC4uLnJlc3QgfSA9XG4gICAgY29uZmlnIHx8IHt9O1xuICBjb25zdCBwZWVyID0geyBjb25maWcgfTtcblxuICBpZiAoIW5vR3VuKSB7XG4gICAgY29uc3QgY2ZnID0geyBsb2NhbFN0b3JhZ2U6ICEhbG9jYWxTdG9yYWdlLCByYWRpc2s6ICEhcGVyc2lzdCwgLi4ucmVzdCB9O1xuXG4gICAgaWYgKHBlcnNpc3QpIGNmZy5sb2NhbFN0b3JhZ2UgPSBmYWxzZTtcbiAgICBpZiAoIWRpc2FibGVWYWxpZGF0aW9uKSBHdW4ub24oXCJvcHRcIiwgVmFsaWRhdGlvbi5ndW5XaXJlSW5wdXQocGVlcikpO1xuICAgIGlmIChjZmcuc3RvcmVGbikgY2ZnLnN0b3JlID0gY2ZnLnN0b3JlRm4oY2ZnKTsgLy8gZm9yIGluZGV4ZWRkYlxuICAgIHBlZXIuZ3VuID0gR3VuKGNmZyk7XG4gICAgaWYgKGNmZy5sb2NhbFN0b3JhZ2UpIHBlZXIuZ3VuLm9uKFwibG9jYWxTdG9yYWdlOmVycm9yXCIsIGEgPT4gYS5yZXRyeSh7fSkpO1xuICAgIGlmIChsZWVjaCkge1xuICAgICAgY29uc3Qgc2VuZExlZWNoID0gKCkgPT4gcGVlci5ndW4uXy5vbihcIm91dFwiLCB7IGxlZWNoOiB0cnVlIH0pO1xuXG4gICAgICBzZW5kTGVlY2goKTtcbiAgICB9XG4gIH1cblxuICBwZWVyLm5ld1Njb3BlID0gb3B0cyA9PiBRdWVyeS5jcmVhdGVTY29wZShwZWVyLCBvcHRzKTtcbiAgcGVlci5vbkxvZ2luID0gQXV0aGVudGljYXRpb24ub25Mb2dpbihwZWVyKTtcbiAgcGVlci5zaWdudXAgPSBBdXRoZW50aWNhdGlvbi5zaWdudXAocGVlcik7XG4gIHBlZXIubG9naW4gPSBBdXRoZW50aWNhdGlvbi5sb2dpbihwZWVyKTtcbiAgcGVlci5sb2dvdXQgPSAoKSA9PiBBdXRoZW50aWNhdGlvbi5sb2dvdXQocGVlcik7XG4gIHBlZXIuaXNMb2dnZWRJbiA9ICgpID0+IEF1dGhlbnRpY2F0aW9uLmlzTG9nZ2VkSW4ocGVlcik7XG4gIHBlZXIuc3VibWl0ID0gVGhpbmcuc3VibWl0KHBlZXIpO1xuICBwZWVyLmNvbW1lbnQgPSBUaGluZy5jb21tZW50KHBlZXIpO1xuICBwZWVyLmNoYXQgPSBUaGluZy5jaGF0KHBlZXIpO1xuICBwZWVyLndyaXRlUGFnZSA9IFRoaW5nLndyaXRlUGFnZShwZWVyKTtcbiAgcGVlci52b3RlID0gVGhpbmcudm90ZShwZWVyKTtcbiAgcGVlci5xdWVyaWVzID0gUXVlcnk7XG4gIHJldHVybiBwZWVyO1xufVxuXG5leHBvcnQgY29uc3QgUGVlciA9IHtcbiAgaW5pdFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMjZfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzI3X187IiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gXCIuLi9TY2hlbWFcIjtcbmltcG9ydCB7IEd1bk5vZGUgfSBmcm9tIFwiLi4vR3VuTm9kZVwiO1xuXG5jb25zdCBzb3VscyA9IEd1bk5vZGUuZWRnZXM7XG5jb25zdCBpZHMgPSBSLmNvbXBvc2UoXG4gIFIuZmlsdGVyKFIuaWRlbnRpdHkpLFxuICBSLm1hcChcbiAgICBSLmNvbXBvc2UoXG4gICAgICBSLnByb3AoXCJ0aGluZ0lkXCIpLFxuICAgICAgU2NoZW1hLlRoaW5nLnJvdXRlLm1hdGNoLmJpbmQoU2NoZW1hLlRoaW5nLnJvdXRlKVxuICAgIClcbiAgKSxcbiAgR3VuTm9kZS5lZGdlc1xuKTtcblxuY29uc3QgdW5pb24gPSBSLmNvbXBvc2UoXG4gIFIuZGlzc29jKFwiX1wiKSxcbiAgUi5yZWR1Y2UoUi5tZXJnZVJpZ2h0LCB7fSlcbik7XG5cbmZ1bmN0aW9uIGRheVN0cih0aW1lc3RhbXApIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKHRpbWVzdGFtcCB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gIGNvbnN0IHllYXIgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIGNvbnN0IG1vbnRoID0gZC5nZXRVVENNb250aCgpICsgMTtcbiAgY29uc3QgZGF5TnVtID0gZC5nZXRVVENEYXRlKCk7XG5cbiAgcmV0dXJuIGAke3llYXJ9LyR7bW9udGh9LyR7ZGF5TnVtfWA7XG59XG5cbmV4cG9ydCBjb25zdCBUaGluZ1NldCA9IHsgaWRzLCB1bmlvbiwgc291bHMsIGRheVN0ciB9O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IHBhcnNlIGFzIHBhcnNlVVJJIH0gZnJvbSBcInVyaS1qc1wiO1xuXG5jb25zdCBib2R5ID0gUi5wcm9wT3IoXCJcIiwgXCJib2R5XCIpO1xuY29uc3QgdXJsID0gUi5wcm9wT3IoXCJcIiwgXCJ1cmxcIik7XG5jb25zdCBkb21haW4gPSBSLmNvbXBvc2UoXG4gIHVybFN0ciA9PiB7XG4gICAgaWYgKCF1cmxTdHIpIHJldHVybiBcIlwiO1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlVVJJKHVybFN0cik7XG5cbiAgICByZXR1cm4gKHBhcnNlZC5ob3N0IHx8IHBhcnNlZC5zY2hlbWUgfHwgXCJcIikucmVwbGFjZSgvXnd3d1xcLi8sIFwiXCIpO1xuICB9LFxuICB1cmxcbik7XG5cbmV4cG9ydCBjb25zdCBUaGluZ0RhdGFOb2RlID0geyBib2R5LCBkb21haW4gfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBQcm9taXNlIH0gZnJvbSBcImd1bi1zY29wZVwiO1xuXG5jb25zdCBzaWdudXAgPSBSLmN1cnJ5KFxuICAocGVlciwgdXNlcm5hbWUsIHBhc3N3b3JkLCBvcHRzID0ge30pID0+XG4gICAgbmV3IFByb21pc2UoKG9rLCBmYWlsKSA9PiB7XG4gICAgICBpZiAocGVlciAmJiBwZWVyLmd1biAmJiBwZWVyLmd1bi51c2VyKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBwZWVyLmd1bi51c2VyKCk7XG5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgIHVzZXIuY3JlYXRlKFxuICAgICAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgIGFjayA9PiB7XG4gICAgICAgICAgICAgIGlmIChhY2suZXJyKSB7XG4gICAgICAgICAgICAgICAgZmFpbChhY2suZXJyKTtcbiAgICAgICAgICAgICAgICB1c2VyLmxlYXZlKCk7XG4gICAgICAgICAgICAgICAgcGVlci5ndW4udXNlcigpLmxlYXZlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVlci5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpLnRoZW4ob2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0c1xuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZhaWwoXCJTRUEgaXMgbm90IGxvYWRlZFwiKTtcbiAgICAgIH1cbiAgICB9KVxuKTtcblxuY29uc3QgbG9naW4gPSBSLmN1cnJ5KChwZWVyLCB1c2VybmFtZSwgcGFzc3dvcmQpID0+XG4gIG5ldyBQcm9taXNlKChvaywgZmFpbCkgPT4ge1xuICAgIGlmIChwZWVyICYmIHBlZXIuZ3VuICYmIHBlZXIuZ3VuLnVzZXIpIHtcbiAgICAgIGNvbnN0IHVzZXIgPSBwZWVyLnVzZXIoKTtcblxuICAgICAgdXNlci5hdXRoKHVzZXJuYW1lLCBwYXNzd29yZCwgYWNrID0+XG4gICAgICAgIGFjay5lcnIgPyBmYWlsKGFjay5lcnIpIDogb2socGVlci51c2VyKCkuaXMpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBmYWlsKFwiU0VBIGlzIG5vdCBsb2FkZWRcIik7XG4gICAgfVxuICB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgcGVlci5fb25Mb2dpbiAmJiBwZWVyLl9vbkxvZ2luKHJlc3VsdCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KVxuKTtcblxuY29uc3QgbG9nb3V0ID0gcGVlciA9PiBwZWVyLmd1bi51c2VyKCkubGVhdmUoKTtcbmNvbnN0IGlzTG9nZ2VkSW4gPSBwZWVyID0+IHBlZXIuZ3VuICYmIHBlZXIuZ3VuLnVzZXIgJiYgcGVlci51c2VyKCkuaXM7XG5jb25zdCBvbkxvZ2luID0gUi5jdXJyeSgocGVlciwgZm4pID0+IChwZWVyLl9vbkxvZ2luID0gZm4pKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG5leHBvcnQgY29uc3QgQXV0aGVudGljYXRpb24gPSB7XG4gIHNpZ251cCxcbiAgbG9naW4sXG4gIGxvZ291dCxcbiAgaXNMb2dnZWRJbixcbiAgb25Mb2dpblxufTtcbiIsImltcG9ydCB7IExpc3RpbmdRdWVyeSB9IGZyb20gXCIuL0xpc3RpbmdRdWVyeVwiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi9MaXN0aW5nTm9kZVwiO1xuaW1wb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi9MaXN0aW5nU3BlY1wiO1xuXG5leHBvcnQgeyBMaXN0aW5nRGF0YVNvdXJjZSB9IGZyb20gXCIuL0xpc3RpbmdEYXRhU291cmNlXCI7XG5leHBvcnQgeyBMaXN0aW5nRGVmaW5pdGlvbiB9IGZyb20gXCIuL0xpc3RpbmdEZWZpbml0aW9uXCI7XG5leHBvcnQgeyBMaXN0aW5nRmlsdGVyIH0gZnJvbSBcIi4vTGlzdGluZ0ZpbHRlclwiO1xuZXhwb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi9MaXN0aW5nTm9kZVwiO1xuZXhwb3J0IHsgTGlzdGluZ09yYWNsZSB9IGZyb20gXCIuL0xpc3RpbmdPcmFjbGVcIjtcbmV4cG9ydCB7IExpc3RpbmdRdWVyeSB9IGZyb20gXCIuL0xpc3RpbmdRdWVyeVwiO1xuZXhwb3J0IHsgTGlzdGluZ1NvcnQgfSBmcm9tIFwiLi9MaXN0aW5nU29ydFwiO1xuZXhwb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi9MaXN0aW5nU3BlY1wiO1xuZXhwb3J0IHsgTGlzdGluZ1R5cGUgfSBmcm9tIFwiLi9MaXN0aW5nVHlwZVwiO1xuZXhwb3J0IHsgU3BhY2VTcGVjIH0gZnJvbSBcIi4vU3BhY2VTcGVjXCI7XG5cbmV4cG9ydCBjb25zdCBMaXN0aW5nID0ge1xuICBMaXN0aW5nTm9kZSxcbiAgTGlzdGluZ1NwZWMsXG4gIGdldDogTGlzdGluZ05vZGUuZ2V0LFxuICBmcm9tU3BlYzogTGlzdGluZ1F1ZXJ5LmZyb21TcGVjLFxuICBmcm9tUGF0aDogTGlzdGluZ1F1ZXJ5LmZyb21QYXRoXG59O1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IHF1ZXJ5IH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi9MaXN0aW5nTm9kZVwiO1xuaW1wb3J0IHsgTGlzdGluZ0ZpbHRlciB9IGZyb20gXCIuL0xpc3RpbmdGaWx0ZXJcIjtcbmltcG9ydCB7IExpc3RpbmdUeXBlIH0gZnJvbSBcIi4vTGlzdGluZ1R5cGVcIjtcblxuY29uc3QgZnJvbVNwZWMgPSBxdWVyeSgoc2NvcGUsIHNwZWMsIG9wdHMgPSB7fSkgPT4ge1xuICBjb25zdCBmaWx0ZXJGbiA9IExpc3RpbmdGaWx0ZXIudGhpbmdGaWx0ZXIoc2NvcGUsIHNwZWMpO1xuICBjb25zdCBwYXRocyA9IFIucGF0aE9yKFtdLCBbXCJkYXRhU291cmNlXCIsIFwibGlzdGluZ1BhdGhzXCJdLCBzcGVjKTtcbiAgY29uc3Qgc291bHMgPSBSLm1hcChcbiAgICBMaXN0aW5nTm9kZS5zb3VsRnJvbVBhdGgob3B0cy5pbmRleGVyIHx8IHNwZWMuaW5kZXhlciksXG4gICAgcGF0aHNcbiAgKTtcblxuICByZXR1cm4gTGlzdGluZ05vZGUucm93c0Zyb21Tb3VscyhzY29wZSwgc291bHMpLnRoZW4ocm93cyA9PlxuICAgIExpc3RpbmdGaWx0ZXIuZ2V0RmlsdGVyZWRJZHMoc2NvcGUsIHJvd3MsIHsgLi4ub3B0cywgZmlsdGVyRm4gfSlcbiAgKTtcbn0pO1xuXG5jb25zdCBmcm9tUGF0aCA9IHF1ZXJ5KChzY29wZSwgcGF0aCwgb3B0cykgPT4ge1xuICBjb25zdCB0eXBlID0gTGlzdGluZ1R5cGUuZnJvbVBhdGgocGF0aCk7XG5cbiAgaWYgKCF0eXBlKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgcmV0dXJuIHR5cGUuZ2V0U3BlYyhzY29wZSwgdHlwZS5tYXRjaCkudGhlbihzcGVjID0+IHtcbiAgICBpZiAoc3BlYy5oYXNJbmRleGVyICYmICFvcHRzLmNhbGN1bGF0ZSkge1xuICAgICAgaWYgKCF0eXBlIHx8ICF0eXBlLnJlYWQpIHJldHVybiBMaXN0aW5nTm9kZS5yZWFkKHNjb3BlLCBwYXRoLCBvcHRzKTtcbiAgICAgIHJldHVybiB0eXBlLnJlYWQoc2NvcGUsIHR5cGUubWF0Y2gsIG9wdHMpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbVNwZWMoc2NvcGUsIHNwZWMsIG9wdHMpO1xuICB9KTtcbn0pO1xuXG5leHBvcnQgY29uc3QgTGlzdGluZ1F1ZXJ5ID0geyBmcm9tU3BlYywgZnJvbVBhdGggfTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi8uLi9Db25maWdcIjtcbmltcG9ydCB7IFBhdGggfSBmcm9tIFwiLi4vUGF0aFwiO1xuaW1wb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi4vTGlzdGluZ1NwZWNcIjtcblxuY29uc3QgcGF0aCA9IFwiL3QvOnRvcGljLzpzb3J0XCI7XG5jb25zdCB0YWJzID0gW1wiaG90XCIsIFwibmV3XCIsIFwiZGlzY3Vzc2VkXCIsIFwiY29udHJvdmVyc2lhbFwiLCBcInRvcFwiLCBcImZpcmVob3NlXCJdO1xuXG5jb25zdCBnZXRTb3VyY2UgPSBxdWVyeSgoc2NvcGUsIHsgdG9waWMsIHNvcnQgfSkgPT4ge1xuICBjb25zdCB0b3BpY3MgPSBQYXRoLnNwbGl0VG9waWNzKHRvcGljKTtcbiAgY29uc3Qgc3VibWl0VG8gPSB0b3BpY3NbMF0gPT09IFwiYWxsXCIgPyBcIndoYXRldmVyXCIgOiB0b3BpY3NbMF07XG5cbiAgcmV0dXJuIExpc3RpbmdTcGVjLmdldFNvdXJjZShcbiAgICBzY29wZSxcbiAgICBDb25maWcuaW5kZXhlcixcbiAgICBcImxpc3Rpbmc6dG9waWNcIixcbiAgICBbXG4gICAgICBgbmFtZSAke3RvcGljfWAsXG4gICAgICBgc3VibWl0IHRvICR7c3VibWl0VG99YCxcbiAgICAgIGBzb3J0ICR7c29ydH1gLFxuICAgICAgdG9waWMuaW5kZXhPZihcIjpcIikgPT09IC0xID8gXCJraW5kIHN1Ym1pc3Npb25cIiA6IFwiXCIsXG4gICAgICAuLi5SLm1hcCh0b3BpYyA9PiBgdG9waWMgJHt0b3BpY31gLCB0b3BpY3MpLFxuICAgICAgLi4uUi5tYXAodGFiID0+IGB0YWIgJHt0YWJ9IC90LyR7dG9waWN9LyR7dGFifWAsIHRhYnMpXG4gICAgXS5qb2luKFwiXFxuXCIpXG4gICk7XG59KTtcblxuY29uc3QgZ2V0U3BlYyA9IHF1ZXJ5KChzY29wZSwgbWF0Y2gpID0+XG4gIGdldFNvdXJjZShzY29wZSwgbWF0Y2gpLnRoZW4oTGlzdGluZ1NwZWMuZnJvbVNvdXJjZSlcbik7XG5cbmV4cG9ydCBjb25zdCBUb3BpY0xpc3RpbmcgPSBQYXRoLndpdGhSb3V0ZSh7IHBhdGgsIGdldFNvdXJjZSwgZ2V0U3BlYyB9KTtcbiIsImltcG9ydCAqIGFzIFIgZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBxdWVyeSB9IGZyb20gXCJndW4tc2NvcGVcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi8uLi9Db25maWdcIjtcbmltcG9ydCB7IFBhdGggfSBmcm9tIFwiLi4vUGF0aFwiO1xuaW1wb3J0IHsgTGlzdGluZ1NwZWMgfSBmcm9tIFwiLi4vTGlzdGluZ1NwZWNcIjtcblxuY29uc3QgcGF0aCA9IFwiL2RvbWFpbi86ZG9tYWluLzpzb3J0XCI7XG5jb25zdCB0YWJzID0gW1wiaG90XCIsIFwibmV3XCIsIFwiZGlzY3Vzc2VkXCIsIFwiY29udHJvdmVyc2lhbFwiLCBcInRvcFwiXTtcblxuY29uc3QgZ2V0U291cmNlID0gcXVlcnkoKHNjb3BlLCB7IGRvbWFpbiwgc29ydCB9KSA9PiB7XG4gIGNvbnN0IGRvbWFpbnMgPSBQYXRoLnNwbGl0VG9waWNzKGRvbWFpbik7XG5cbiAgcmV0dXJuIExpc3RpbmdTcGVjLmdldFNvdXJjZShcbiAgICBzY29wZSxcbiAgICBDb25maWcuaW5kZXhlcixcbiAgICBcImxpc3Rpbmc6ZG9tYWluXCIsXG4gICAgW1xuICAgICAgYG5hbWUgJHtkb21haW5zWzBdfWAsXG4gICAgICBcInN1Ym1pdCB0byB3aGF0ZXZlclwiLFxuICAgICAgYHNvcnQgJHtzb3J0fWAsXG4gICAgICBcImtpbmQgc3VibWlzc2lvblwiLFxuICAgICAgLi4uUi5tYXAoZG9tYWluID0+IGBkb21haW4gJHtkb21haW59YCwgZG9tYWlucyksXG4gICAgICAuLi5SLm1hcCh0YWIgPT4gYHRhYiAke3RhYn0gL2RvbWFpbi8ke2RvbWFpbn0vJHt0YWJ9YCwgdGFicylcbiAgICBdLmpvaW4oXCJcXG5cIilcbiAgKTtcbn0pO1xuXG5jb25zdCBnZXRTcGVjID0gcXVlcnkoKHNjb3BlLCBtYXRjaCkgPT5cbiAgZ2V0U291cmNlKHNjb3BlLCBtYXRjaCkudGhlbihMaXN0aW5nU3BlYy5mcm9tU291cmNlKVxuKTtcblxuZXhwb3J0IGNvbnN0IERvbWFpbkxpc3RpbmcgPSBQYXRoLndpdGhSb3V0ZSh7IHBhdGgsIHRhYnMsIGdldFNvdXJjZSwgZ2V0U3BlYyB9KTtcbiIsImltcG9ydCB7IHF1ZXJ5IH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uLy4uL0NvbmZpZ1wiO1xuaW1wb3J0IHsgUGF0aCB9IGZyb20gXCIuLi9QYXRoXCI7XG5pbXBvcnQgeyBMaXN0aW5nU3BlYyB9IGZyb20gXCIuLi9MaXN0aW5nU3BlY1wiO1xuXG5jb25zdCBwYXRoID0gXCIvdGhpbmdzLzp0aGluZ0lkL2NvbW1lbnRzLzpzb3J0XCI7XG5cbmNvbnN0IGdldFNwZWMgPSBxdWVyeSgoc2NvcGUsIHsgdGhpbmdJZCwgc29ydCB9KSA9PlxuICBMaXN0aW5nU3BlYy5nZXRTb3VyY2UoXG4gICAgc2NvcGUsXG4gICAgQ29uZmlnLmluZGV4ZXIsXG4gICAgXCJsaXN0aW5nOmNvbW1lbnRzXCIsXG4gICAgW2BvcCAke3RoaW5nSWR9YCwgYHNvcnQgJHtzb3J0fWBdLmpvaW4oXCJcXG5cIilcbiAgKVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0aW5nID0gUGF0aC53aXRoUm91dGUoeyBwYXRoLCBnZXRTcGVjIH0pO1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IGFsbCwgcXVlcnkgfSBmcm9tIFwiZ3VuLXNjb3BlXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vLi4vQ29uZmlnXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi4vLi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBHdW5Ob2RlIH0gZnJvbSBcIi4uLy4uL0d1bk5vZGVcIjtcbmltcG9ydCB7IFBhdGggfSBmcm9tIFwiLi4vUGF0aFwiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi4vTGlzdGluZ05vZGVcIjtcbmltcG9ydCB7IExpc3RpbmdGaWx0ZXIgfSBmcm9tIFwiLi4vTGlzdGluZ0ZpbHRlclwiO1xuaW1wb3J0IHsgTGlzdGluZ09yYWNsZSB9IGZyb20gXCIuLi9MaXN0aW5nT3JhY2xlXCI7XG5pbXBvcnQgeyBTcGFjZVNwZWMgfSBmcm9tIFwiLi4vU3BhY2VTcGVjXCI7XG5cbmNvbnN0IHBhdGggPSBcIi91c2VyLzphdXRob3JJZC9zcGFjZXMvOm5hbWUvOnNvcnRcIjtcblxuY29uc3QgZ2V0U291cmNlID0gcXVlcnkoKHNjb3BlLCB7IGF1dGhvcklkLCBuYW1lLCBzb3J0IH0pID0+XG4gIFNwYWNlU3BlYy5nZXRTb3VyY2Uoc2NvcGUsIGF1dGhvcklkLCBuYW1lLCBgc29ydCAke3NvcnR9YClcbik7XG5cbmNvbnN0IGdldFNwZWMgPSBxdWVyeSgoc2NvcGUsIHsgYXV0aG9ySWQsIG5hbWUsIHNvcnQgfSkgPT5cbiAgU3BhY2VTcGVjLmdldFNwZWMoc2NvcGUsIGF1dGhvcklkLCBuYW1lLCBgc29ydCAke3NvcnR9YClcbik7XG5cbmNvbnN0IGNhbGN1bGF0ZSA9IHF1ZXJ5KChzY29wZSwgbWF0Y2gsIG9wdHMpID0+IHtcbiAgY29uc3QgeyBhdXRob3JJZCwgbmFtZSwgc29ydCB9ID0gbWF0Y2g7XG4gIGNvbnN0IHJvdXRlUHJvcHMgPSB7IGF1dGhvcklkLCBuYW1lLCBzb3J0LCBpbmRleGVyOiBDb25maWcuaW5kZXhlciB9O1xuICBjb25zdCBzb3VscyA9IFtTY2hlbWEuU3BhY2VMaXN0aW5nLnJvdXRlLnJldmVyc2Uocm91dGVQcm9wcyldO1xuXG4gIHJldHVybiBhbGwoW1xuICAgIGdldFNwZWMoc2NvcGUsIG1hdGNoKSxcbiAgICBMaXN0aW5nTm9kZS5nZXRSb3dzRnJvbVNvdWxzKHNjb3BlLCBzb3VscylcbiAgXSkudGhlbigoW3NwZWMsIHJvd3NdKSA9PiB7XG4gICAgY29uc3QgZmlsdGVyRm4gPSBMaXN0aW5nRmlsdGVyLnRoaW5nRmlsdGVyKHNjb3BlLCBzcGVjKTtcblxuICAgIHJldHVybiBMaXN0aW5nRmlsdGVyLmdldEZpbHRlcmVkSWRzKHNjb3BlLCByb3dzLCB7IC4uLm9wdHMsIGZpbHRlckZuIH0pO1xuICB9KTtcbn0pO1xuXG5jb25zdCBvblB1dCA9IGFzeW5jIChcbiAgb3JjLFxuICByb3V0ZSxcbiAgeyB1cGRhdGVkU291bCwgZGlmZiwgb3JpZ2luYWwsIGxhdGVzdCA9IDAgfVxuKSA9PiB7XG4gIGNvbnN0IHNjb3BlID0gb3JjLm5ld1Njb3BlKCk7XG5cbiAgY29uc3Qgb3JpZ2luYWxEYXRhID0gR3VuTm9kZS5kZWNvZGVTRUEob3JpZ2luYWwpO1xuICBjb25zdCBkaWZmRGF0YSA9IEd1bk5vZGUuZGVjb2RlU0VBKGRpZmYpO1xuICBjb25zdCBbdXBkYXRlZElkcywgcmVtb3ZlZElkc10gPSBMaXN0aW5nTm9kZS5jYXRlZ29yaXplRGlmZihcbiAgICBkaWZmRGF0YSxcbiAgICBvcmlnaW5hbERhdGFcbiAgKTtcbiAgY29uc3Qgc3BlYyA9IGF3YWl0IGdldFNwZWMoc2NvcGUsIHJvdXRlLm1hdGNoKTtcbiAgY29uc3Qgdm90ZUNvdW50c01hdGNoID0gU2NoZW1hLlRoaW5nVm90ZUNvdW50cy5yb3V0ZS5tYXRjaCh1cGRhdGVkU291bCk7XG4gIGNvbnN0IHRoaW5nTWF0Y2ggPSBTY2hlbWEuVGhpbmcucm91dGUubWF0Y2godXBkYXRlZFNvdWwpO1xuICBjb25zdCB7IHRoaW5nSWQgfSA9IFNjaGVtYS5UaGluZ0RhdGFTaWduZWQucm91dGUubWF0Y2godXBkYXRlZFNvdWwpIHx8IHt9O1xuICBjb25zdCBhdXRob3JNYXRjaCA9IFNjaGVtYS5TRUFBdXRob3Iucm91dGUubWF0Y2godXBkYXRlZFNvdWwpO1xuXG4gIGlmICh2b3RlQ291bnRzTWF0Y2gpIHVwZGF0ZWRJZHMucHVzaCh2b3RlQ291bnRzTWF0Y2gudGhpbmdJZCk7XG4gIGlmICh0aGluZ01hdGNoKSB1cGRhdGVkSWRzLnB1c2godGhpbmdNYXRjaC50aGluZ0lkKTtcbiAgaWYgKHRoaW5nSWQgJiYgdGhpbmdJZCAhPT0gc3BlYy5mcm9tUGFnZUlkKSB1cGRhdGVkSWRzLnB1c2godGhpbmdJZCk7XG4gIGF3YWl0IExpc3RpbmdPcmFjbGUudXBkYXRlTGlzdGluZyhcbiAgICBvcmMsXG4gICAgcm91dGUsXG4gICAgc2NvcGUsXG4gICAgc3BlYyxcbiAgICB1cGRhdGVkSWRzLFxuICAgIHJlbW92ZWRJZHMsXG4gICk7XG4gIGZvciAoY29uc3Qga2V5IGluIHNjb3BlLmdldEFjY2Vzc2VzKCkpIG9yYy5saXN0ZW4oa2V5LCByb3V0ZS5zb3VsKTtcbiAgaWYgKFxuICAgIFIucHJvcChcInNpemVcIiwgb3JpZ2luYWwpIHx8XG4gICAgdXBkYXRlZElkcy5sZW5ndGggfHxcbiAgICByZW1vdmVkSWRzLmxlbmd0aCB8fFxuICAgIGF1dGhvck1hdGNoXG4gIClcbiAgICByZXR1cm47XG5cbiAgLy8gYmFzZSBsb2dpYyBmcm9tIGd1bi1jbGVyaWMtc2NvcGUgbmVlZHMgdG8gYmUgZW5jYXBzdWFsdGVkIGJldHRlcj9cbiAgY29uc29sZS5sb2coXCItLS1TVEFOREFSRCBTUEFDRSBVUERBVEUtLS1cIiwgcm91dGUuc291bCwgdXBkYXRlZFNvdWwpO1xuICBjb25zdCBub2RlID0gYXdhaXQgb3JjLm5ld1Njb3BlKCkuZ2V0KHJvdXRlLnNvdWwpO1xuICBjb25zdCBleGlzdGluZ0tleXMgPSBMaXN0aW5nTm9kZS5pdGVtS2V5cyhub2RlKTtcblxuICBpZiAoZXhpc3RpbmdLZXlzLmxlbmd0aCkge1xuICAgIHJvdXRlLndyaXRlKHtcbiAgICAgIHNpemU6IDAsXG4gICAgICAuLi5leGlzdGluZ0tleXMucmVkdWNlKChkaWZmLCBrZXkpID0+IHtcbiAgICAgICAgZGlmZltgJHtrZXl9YF0gPSBudWxsO1xuICAgICAgICByZXR1cm4gZGlmZjtcbiAgICAgIH0sIHt9KVxuICAgIH0pO1xuICB9XG5cbiAgb3JjLndvcmsoe1xuICAgIGlkOiBgdXBkYXRlOiR7cm91dGUuc291bH1gLFxuICAgIHNvdWw6IHJvdXRlLnNvdWwsXG4gICAgbWV0aG9kOiBcImRvVXBkYXRlXCIsXG4gICAgcHJpb3JpdHk6IHJvdXRlLnByaW9yaXR5IHx8IDUwXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IFNwYWNlTGlzdGluZyA9IFBhdGgud2l0aFJvdXRlKHtcbiAgcGF0aCxcbiAgY2FsY3VsYXRlLFxuICBnZXRTb3VyY2UsXG4gIGdldFNwZWMsXG4gIG9uUHV0XG59KTtcbiIsImltcG9ydCB7IHF1ZXJ5IH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uLy4uL0NvbmZpZ1wiO1xuaW1wb3J0IHsgR3VuTm9kZSB9IGZyb20gXCIuLi8uLi9HdW5Ob2RlXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi4vLi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBUaGluZ1NldCB9IGZyb20gXCIuLi8uLi9UaGluZ1wiO1xuaW1wb3J0IHsgUGF0aCB9IGZyb20gXCIuLi9QYXRoXCI7XG5pbXBvcnQgeyBMaXN0aW5nU3BlYyB9IGZyb20gXCIuLi9MaXN0aW5nU3BlY1wiO1xuaW1wb3J0IHsgTGlzdGluZ05vZGUgfSBmcm9tIFwiLi4vTGlzdGluZ05vZGVcIjtcbmltcG9ydCB7IExpc3RpbmdPcmFjbGUgfSBmcm9tIFwiLi4vTGlzdGluZ09yYWNsZVwiO1xuXG5jb25zdCBwYXRoID0gXCIvdXNlci86YXV0aG9ySWQvcmVwbGllZC86dHlwZS86c29ydFwiO1xuXG5jb25zdCBnZXRTb3VyY2UgPSBxdWVyeSgoc2NvcGUsIHsgYXV0aG9ySWQsIHR5cGUsIHNvcnQgPSBcIm5ld1wiIH0pID0+XG4gIExpc3RpbmdTcGVjLmdldFNvdXJjZShcbiAgICBzY29wZSxcbiAgICBDb25maWcuaW5kZXhlcixcbiAgICBcImxpc3Rpbmc6aW5ib3hcIixcbiAgICBbYHJlcGxpZXMgdG8gYXV0aG9yICR7YXV0aG9ySWR9YCwgYHR5cGUgJHt0eXBlfWAsIGBzb3J0ICR7c29ydH1gXS5qb2luKFwiXFxuXCIpXG4gIClcbik7XG5cbmNvbnN0IGdldFNwZWMgPSBxdWVyeSgoc2NvcGUsIG1hdGNoKSA9PlxuICBnZXRTb3VyY2Uoc2NvcGUsIG1hdGNoKS50aGVuKExpc3RpbmdTcGVjLmZyb21Tb3VyY2UpXG4pO1xuXG5jb25zdCBvblB1dCA9IGFzeW5jIChcbiAgb3JjLFxuICByb3V0ZSxcbiAgeyB1cGRhdGVkU291bCwgZGlmZiB9XG4pID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBvcmMubmV3U2NvcGUoKTtcbiAgY29uc3QgZGlmZkRhdGEgPSBHdW5Ob2RlLmRlY29kZVNFQShkaWZmKTtcbiAgY29uc3QgW3VwZGF0ZWRBdXRob3JlZF0gPSBMaXN0aW5nTm9kZS5jYXRlZ29yaXplRGlmZihkaWZmRGF0YSk7XG4gIGNvbnN0IHNwZWMgPSBhd2FpdCBnZXRTcGVjKHNjb3BlLCByb3V0ZS5tYXRjaCk7XG4gIGxldCB1cGRhdGVkSWRzID0gVGhpbmdTZXQuaWRzKGRpZmZEYXRhKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHVwZGF0ZWRBdXRob3JlZC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG9wSWQgPSB1cGRhdGVkQXV0aG9yZWRbaV07XG4gICAgY29uc3QgcmVwbHlJZHMgPSBUaGluZ1NldC5pZHMoXG4gICAgICBhd2FpdCBzY29wZS5nZXQoU2NoZW1hLlRoaW5nQ29tbWVudHMucm91dGUucmV2ZXJzZSh7IHRoaW5nSWQ6IG9wSWQgfSkpLnRoZW4oKVxuICAgICk7XG5cbiAgICB1cGRhdGVkSWRzID0gdXBkYXRlZElkcy5jb25jYXQocmVwbHlJZHMpO1xuICB9XG5cbiAgaWYgKHVwZGF0ZWRJZHMubGVuZ3RoKVxuICAgIGF3YWl0IExpc3RpbmdPcmFjbGUudXBkYXRlTGlzdGluZyhvcmMsIHJvdXRlLCBzY29wZSwgc3BlYywgdXBkYXRlZElkcywgW10pO1xuICBmb3IgKGNvbnN0IGtleSBpbiBzY29wZS5nZXRBY2Nlc3NlcygpKSBvcmMubGlzdGVuKGtleSwgcm91dGUuc291bCk7XG59O1xuXG5leHBvcnQgY29uc3QgSW5ib3hMaXN0aW5nID0gUGF0aC53aXRoUm91dGUoeyBwYXRoLCBnZXRTb3VyY2UsIGdldFNwZWMsIG9uUHV0IH0pO1xuIiwiaW1wb3J0ICogYXMgUiBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IHF1ZXJ5IH0gZnJvbSBcImd1bi1zY29wZVwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uLy4uL0NvbmZpZ1wiO1xuaW1wb3J0IHsgUGF0aCB9IGZyb20gXCIuLi9QYXRoXCI7XG5pbXBvcnQgeyBMaXN0aW5nU3BlYyB9IGZyb20gXCIuLi9MaXN0aW5nU3BlY1wiO1xuXG5jb25zdCBwYXRoID0gXCIvdXNlci86YXV0aG9ySWQvOnR5cGUvOnNvcnRcIjtcbmNvbnN0IHRhYnMgPSBbXCJvdmVydmlld1wiLCBcImNvbW1lbnRzXCIsIFwic3VibWl0dGVkXCIsIFwiY29tbWFuZHNcIl07XG5cbmNvbnN0IGdldFNvdXJjZSA9IHF1ZXJ5KChzY29wZSwgeyBhdXRob3JJZCwgdHlwZSwgc29ydCB9KSA9PlxuICBMaXN0aW5nU3BlYy5nZXRTb3VyY2UoXG4gICAgc2NvcGUsXG4gICAgQ29uZmlnLmluZGV4ZXIsXG4gICAgXCJsaXN0aW5nOnByb2ZpbGVcIixcbiAgICBbXG4gICAgICBgYXV0aG9yICR7YXV0aG9ySWR9YCxcbiAgICAgIGB0eXBlICR7dHlwZX1gLFxuICAgICAgXCJzdWJtaXQgdG8gd2hhdGV2ZXJcIixcbiAgICAgIGBzb3J0ICR7c29ydH1gLFxuICAgICAgLi4uUi5tYXAodGFiID0+IGB0YWIgJHt0YWJ9IC91c2VyLyR7YXV0aG9ySWR9LyR7dGFifWAsIHRhYnMpXG4gICAgXS5qb2luKFwiXFxuXCIpXG4gIClcbik7XG5cbmNvbnN0IGdldFNwZWMgPSBxdWVyeSgoc2NvcGUsIG1hdGNoKSA9PlxuICBnZXRTb3VyY2Uoc2NvcGUsIG1hdGNoKS50aGVuKExpc3RpbmdTcGVjLmZyb21Tb3VyY2UpXG4pO1xuXG5leHBvcnQgY29uc3QgUHJvZmlsZUxpc3RpbmcgPSBQYXRoLndpdGhSb3V0ZSh7IHBhdGgsIHRhYnMsIGdldFNvdXJjZSwgZ2V0U3BlYyB9KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=